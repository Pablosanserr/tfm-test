
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00040000 <_vector_table>:
   40000:	90 09 04 20 4d 15 04 00 d7 46 04 00 21 15 04 00     ... M....F..!...
   40010:	21 15 04 00 21 15 04 00 21 15 04 00 21 15 04 00     !...!...!...!...
	...
   4002c:	71 12 04 00 21 15 04 00 00 00 00 00 11 12 04 00     q...!...........
   4003c:	21 15 04 00                                         !...

00040040 <_irq_vector_table>:
   40040:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40050:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40060:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40070:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40080:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40090:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400a0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400b0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400c0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400d0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400e0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   400f0:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40100:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40110:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40120:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40130:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40140:	f5 12 04 00 f5 12 04 00 f5 12 04 00 f5 12 04 00     ................
   40150:	f5 12 04 00                                         ....

Disassembly of section text:

00040154 <__aeabi_uldivmod>:
   40154:	b953      	cbnz	r3, 4016c <__aeabi_uldivmod+0x18>
   40156:	b94a      	cbnz	r2, 4016c <__aeabi_uldivmod+0x18>
   40158:	2900      	cmp	r1, #0
   4015a:	bf08      	it	eq
   4015c:	2800      	cmpeq	r0, #0
   4015e:	bf1c      	itt	ne
   40160:	f04f 31ff 	movne.w	r1, #4294967295
   40164:	f04f 30ff 	movne.w	r0, #4294967295
   40168:	f000 b80c 	b.w	40184 <__aeabi_idiv0>
   4016c:	f1ad 0c08 	sub.w	ip, sp, #8
   40170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   40174:	f000 f808 	bl	40188 <__udivmoddi4>
   40178:	f8dd e004 	ldr.w	lr, [sp, #4]
   4017c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   40180:	b004      	add	sp, #16
   40182:	4770      	bx	lr

00040184 <__aeabi_idiv0>:
   40184:	4770      	bx	lr
   40186:	bf00      	nop

00040188 <__udivmoddi4>:
   40188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4018c:	4607      	mov	r7, r0
   4018e:	468c      	mov	ip, r1
   40190:	4608      	mov	r0, r1
   40192:	9e09      	ldr	r6, [sp, #36]	; 0x24
   40194:	4615      	mov	r5, r2
   40196:	463c      	mov	r4, r7
   40198:	4619      	mov	r1, r3
   4019a:	2b00      	cmp	r3, #0
   4019c:	f040 80c5 	bne.w	4032a <__udivmoddi4+0x1a2>
   401a0:	4282      	cmp	r2, r0
   401a2:	fab2 f782 	clz	r7, r2
   401a6:	d946      	bls.n	40236 <__udivmoddi4+0xae>
   401a8:	b14f      	cbz	r7, 401be <__udivmoddi4+0x36>
   401aa:	f1c7 0e20 	rsb	lr, r7, #32
   401ae:	fa00 f307 	lsl.w	r3, r0, r7
   401b2:	40bd      	lsls	r5, r7
   401b4:	fa24 fe0e 	lsr.w	lr, r4, lr
   401b8:	40bc      	lsls	r4, r7
   401ba:	ea4e 0c03 	orr.w	ip, lr, r3
   401be:	ea4f 4815 	mov.w	r8, r5, lsr #16
   401c2:	fa1f fe85 	uxth.w	lr, r5
   401c6:	0c22      	lsrs	r2, r4, #16
   401c8:	fbbc f9f8 	udiv	r9, ip, r8
   401cc:	fb08 c319 	mls	r3, r8, r9, ip
   401d0:	fb09 fa0e 	mul.w	sl, r9, lr
   401d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   401d8:	459a      	cmp	sl, r3
   401da:	d928      	bls.n	4022e <__udivmoddi4+0xa6>
   401dc:	18eb      	adds	r3, r5, r3
   401de:	f109 30ff 	add.w	r0, r9, #4294967295
   401e2:	d204      	bcs.n	401ee <__udivmoddi4+0x66>
   401e4:	459a      	cmp	sl, r3
   401e6:	d902      	bls.n	401ee <__udivmoddi4+0x66>
   401e8:	f1a9 0002 	sub.w	r0, r9, #2
   401ec:	442b      	add	r3, r5
   401ee:	eba3 030a 	sub.w	r3, r3, sl
   401f2:	b2a4      	uxth	r4, r4
   401f4:	fbb3 f2f8 	udiv	r2, r3, r8
   401f8:	fb08 3312 	mls	r3, r8, r2, r3
   401fc:	fb02 fe0e 	mul.w	lr, r2, lr
   40200:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40204:	45a6      	cmp	lr, r4
   40206:	d914      	bls.n	40232 <__udivmoddi4+0xaa>
   40208:	192c      	adds	r4, r5, r4
   4020a:	f102 33ff 	add.w	r3, r2, #4294967295
   4020e:	d203      	bcs.n	40218 <__udivmoddi4+0x90>
   40210:	45a6      	cmp	lr, r4
   40212:	d901      	bls.n	40218 <__udivmoddi4+0x90>
   40214:	1e93      	subs	r3, r2, #2
   40216:	442c      	add	r4, r5
   40218:	eba4 040e 	sub.w	r4, r4, lr
   4021c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   40220:	b11e      	cbz	r6, 4022a <__udivmoddi4+0xa2>
   40222:	40fc      	lsrs	r4, r7
   40224:	2300      	movs	r3, #0
   40226:	6034      	str	r4, [r6, #0]
   40228:	6073      	str	r3, [r6, #4]
   4022a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4022e:	4648      	mov	r0, r9
   40230:	e7dd      	b.n	401ee <__udivmoddi4+0x66>
   40232:	4613      	mov	r3, r2
   40234:	e7f0      	b.n	40218 <__udivmoddi4+0x90>
   40236:	b902      	cbnz	r2, 4023a <__udivmoddi4+0xb2>
   40238:	deff      	udf	#255	; 0xff
   4023a:	bb87      	cbnz	r7, 4029e <__udivmoddi4+0x116>
   4023c:	1a83      	subs	r3, r0, r2
   4023e:	2101      	movs	r1, #1
   40240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40244:	b2aa      	uxth	r2, r5
   40246:	0c20      	lsrs	r0, r4, #16
   40248:	fbb3 fcfe 	udiv	ip, r3, lr
   4024c:	fb0e 331c 	mls	r3, lr, ip, r3
   40250:	fb0c f802 	mul.w	r8, ip, r2
   40254:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   40258:	4598      	cmp	r8, r3
   4025a:	d962      	bls.n	40322 <__udivmoddi4+0x19a>
   4025c:	18eb      	adds	r3, r5, r3
   4025e:	f10c 30ff 	add.w	r0, ip, #4294967295
   40262:	d204      	bcs.n	4026e <__udivmoddi4+0xe6>
   40264:	4598      	cmp	r8, r3
   40266:	d902      	bls.n	4026e <__udivmoddi4+0xe6>
   40268:	f1ac 0002 	sub.w	r0, ip, #2
   4026c:	442b      	add	r3, r5
   4026e:	eba3 0308 	sub.w	r3, r3, r8
   40272:	b2a4      	uxth	r4, r4
   40274:	fbb3 fcfe 	udiv	ip, r3, lr
   40278:	fb0e 331c 	mls	r3, lr, ip, r3
   4027c:	fb0c f202 	mul.w	r2, ip, r2
   40280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40284:	42a2      	cmp	r2, r4
   40286:	d94e      	bls.n	40326 <__udivmoddi4+0x19e>
   40288:	192c      	adds	r4, r5, r4
   4028a:	f10c 33ff 	add.w	r3, ip, #4294967295
   4028e:	d204      	bcs.n	4029a <__udivmoddi4+0x112>
   40290:	42a2      	cmp	r2, r4
   40292:	d902      	bls.n	4029a <__udivmoddi4+0x112>
   40294:	f1ac 0302 	sub.w	r3, ip, #2
   40298:	442c      	add	r4, r5
   4029a:	1aa4      	subs	r4, r4, r2
   4029c:	e7be      	b.n	4021c <__udivmoddi4+0x94>
   4029e:	f1c7 0c20 	rsb	ip, r7, #32
   402a2:	40bd      	lsls	r5, r7
   402a4:	fa00 f307 	lsl.w	r3, r0, r7
   402a8:	fa20 f80c 	lsr.w	r8, r0, ip
   402ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   402b0:	fa24 fc0c 	lsr.w	ip, r4, ip
   402b4:	40bc      	lsls	r4, r7
   402b6:	ea4c 0203 	orr.w	r2, ip, r3
   402ba:	b2ab      	uxth	r3, r5
   402bc:	fbb8 fcfe 	udiv	ip, r8, lr
   402c0:	0c11      	lsrs	r1, r2, #16
   402c2:	fb0e 801c 	mls	r0, lr, ip, r8
   402c6:	fb0c f903 	mul.w	r9, ip, r3
   402ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   402ce:	4581      	cmp	r9, r0
   402d0:	d923      	bls.n	4031a <__udivmoddi4+0x192>
   402d2:	1828      	adds	r0, r5, r0
   402d4:	f10c 31ff 	add.w	r1, ip, #4294967295
   402d8:	d204      	bcs.n	402e4 <__udivmoddi4+0x15c>
   402da:	4581      	cmp	r9, r0
   402dc:	d902      	bls.n	402e4 <__udivmoddi4+0x15c>
   402de:	f1ac 0102 	sub.w	r1, ip, #2
   402e2:	4428      	add	r0, r5
   402e4:	eba0 0009 	sub.w	r0, r0, r9
   402e8:	b292      	uxth	r2, r2
   402ea:	fbb0 fcfe 	udiv	ip, r0, lr
   402ee:	fb0e 001c 	mls	r0, lr, ip, r0
   402f2:	fb0c f803 	mul.w	r8, ip, r3
   402f6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   402fa:	4598      	cmp	r8, r3
   402fc:	d90f      	bls.n	4031e <__udivmoddi4+0x196>
   402fe:	18eb      	adds	r3, r5, r3
   40300:	f10c 32ff 	add.w	r2, ip, #4294967295
   40304:	d204      	bcs.n	40310 <__udivmoddi4+0x188>
   40306:	4598      	cmp	r8, r3
   40308:	d902      	bls.n	40310 <__udivmoddi4+0x188>
   4030a:	f1ac 0202 	sub.w	r2, ip, #2
   4030e:	442b      	add	r3, r5
   40310:	eba3 0308 	sub.w	r3, r3, r8
   40314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   40318:	e792      	b.n	40240 <__udivmoddi4+0xb8>
   4031a:	4661      	mov	r1, ip
   4031c:	e7e2      	b.n	402e4 <__udivmoddi4+0x15c>
   4031e:	4662      	mov	r2, ip
   40320:	e7f6      	b.n	40310 <__udivmoddi4+0x188>
   40322:	4660      	mov	r0, ip
   40324:	e7a3      	b.n	4026e <__udivmoddi4+0xe6>
   40326:	4663      	mov	r3, ip
   40328:	e7b7      	b.n	4029a <__udivmoddi4+0x112>
   4032a:	4283      	cmp	r3, r0
   4032c:	d905      	bls.n	4033a <__udivmoddi4+0x1b2>
   4032e:	b10e      	cbz	r6, 40334 <__udivmoddi4+0x1ac>
   40330:	e9c6 7000 	strd	r7, r0, [r6]
   40334:	2100      	movs	r1, #0
   40336:	4608      	mov	r0, r1
   40338:	e777      	b.n	4022a <__udivmoddi4+0xa2>
   4033a:	fab3 f183 	clz	r1, r3
   4033e:	b981      	cbnz	r1, 40362 <__udivmoddi4+0x1da>
   40340:	4283      	cmp	r3, r0
   40342:	d301      	bcc.n	40348 <__udivmoddi4+0x1c0>
   40344:	42ba      	cmp	r2, r7
   40346:	d80a      	bhi.n	4035e <__udivmoddi4+0x1d6>
   40348:	1abc      	subs	r4, r7, r2
   4034a:	eb60 0303 	sbc.w	r3, r0, r3
   4034e:	2001      	movs	r0, #1
   40350:	469c      	mov	ip, r3
   40352:	2e00      	cmp	r6, #0
   40354:	d067      	beq.n	40426 <__udivmoddi4+0x29e>
   40356:	e9c6 4c00 	strd	r4, ip, [r6]
   4035a:	2100      	movs	r1, #0
   4035c:	e765      	b.n	4022a <__udivmoddi4+0xa2>
   4035e:	4608      	mov	r0, r1
   40360:	e7f7      	b.n	40352 <__udivmoddi4+0x1ca>
   40362:	f1c1 0c20 	rsb	ip, r1, #32
   40366:	408b      	lsls	r3, r1
   40368:	fa02 f501 	lsl.w	r5, r2, r1
   4036c:	fa22 f40c 	lsr.w	r4, r2, ip
   40370:	fa20 fb0c 	lsr.w	fp, r0, ip
   40374:	fa27 f20c 	lsr.w	r2, r7, ip
   40378:	408f      	lsls	r7, r1
   4037a:	431c      	orrs	r4, r3
   4037c:	fa00 f301 	lsl.w	r3, r0, r1
   40380:	ea4f 4914 	mov.w	r9, r4, lsr #16
   40384:	4313      	orrs	r3, r2
   40386:	fa1f fe84 	uxth.w	lr, r4
   4038a:	0c1a      	lsrs	r2, r3, #16
   4038c:	fbbb f8f9 	udiv	r8, fp, r9
   40390:	fb09 bb18 	mls	fp, r9, r8, fp
   40394:	fb08 fa0e 	mul.w	sl, r8, lr
   40398:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   4039c:	4592      	cmp	sl, r2
   4039e:	d93e      	bls.n	4041e <__udivmoddi4+0x296>
   403a0:	18a2      	adds	r2, r4, r2
   403a2:	f108 30ff 	add.w	r0, r8, #4294967295
   403a6:	d204      	bcs.n	403b2 <__udivmoddi4+0x22a>
   403a8:	4592      	cmp	sl, r2
   403aa:	d902      	bls.n	403b2 <__udivmoddi4+0x22a>
   403ac:	f1a8 0002 	sub.w	r0, r8, #2
   403b0:	4422      	add	r2, r4
   403b2:	eba2 020a 	sub.w	r2, r2, sl
   403b6:	b29b      	uxth	r3, r3
   403b8:	fbb2 f8f9 	udiv	r8, r2, r9
   403bc:	fb09 2218 	mls	r2, r9, r8, r2
   403c0:	fb08 fe0e 	mul.w	lr, r8, lr
   403c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   403c8:	4596      	cmp	lr, r2
   403ca:	d92a      	bls.n	40422 <__udivmoddi4+0x29a>
   403cc:	18a2      	adds	r2, r4, r2
   403ce:	f108 33ff 	add.w	r3, r8, #4294967295
   403d2:	d204      	bcs.n	403de <__udivmoddi4+0x256>
   403d4:	4596      	cmp	lr, r2
   403d6:	d902      	bls.n	403de <__udivmoddi4+0x256>
   403d8:	f1a8 0302 	sub.w	r3, r8, #2
   403dc:	4422      	add	r2, r4
   403de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   403e2:	eba2 020e 	sub.w	r2, r2, lr
   403e6:	fba0 9305 	umull	r9, r3, r0, r5
   403ea:	429a      	cmp	r2, r3
   403ec:	46ce      	mov	lr, r9
   403ee:	4698      	mov	r8, r3
   403f0:	d302      	bcc.n	403f8 <__udivmoddi4+0x270>
   403f2:	d106      	bne.n	40402 <__udivmoddi4+0x27a>
   403f4:	454f      	cmp	r7, r9
   403f6:	d204      	bcs.n	40402 <__udivmoddi4+0x27a>
   403f8:	3801      	subs	r0, #1
   403fa:	ebb9 0e05 	subs.w	lr, r9, r5
   403fe:	eb63 0804 	sbc.w	r8, r3, r4
   40402:	b186      	cbz	r6, 40426 <__udivmoddi4+0x29e>
   40404:	ebb7 030e 	subs.w	r3, r7, lr
   40408:	eb62 0708 	sbc.w	r7, r2, r8
   4040c:	fa07 fc0c 	lsl.w	ip, r7, ip
   40410:	40cb      	lsrs	r3, r1
   40412:	40cf      	lsrs	r7, r1
   40414:	ea4c 0303 	orr.w	r3, ip, r3
   40418:	e9c6 3700 	strd	r3, r7, [r6]
   4041c:	e79d      	b.n	4035a <__udivmoddi4+0x1d2>
   4041e:	4640      	mov	r0, r8
   40420:	e7c7      	b.n	403b2 <__udivmoddi4+0x22a>
   40422:	4643      	mov	r3, r8
   40424:	e7db      	b.n	403de <__udivmoddi4+0x256>
   40426:	4631      	mov	r1, r6
   40428:	e6ff      	b.n	4022a <__udivmoddi4+0xa2>
	...

0004042c <main>:
#include <tfm_ns_interface.h>

#include "dummy_partition.h"

void main(void)
{
   4042c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t digest[32];

	for (int key = 0; key < 6; key++) {
   40430:	2600      	movs	r6, #0
		psa_status_t status = dp_secret_digest(key, digest, sizeof(digest));

		if (status != PSA_SUCCESS) {
			printk("Status: %d\n", status);
		} else {
			printk("Digest: ");
   40432:	4f13      	ldr	r7, [pc, #76]	; (40480 <main+0x54>)
			for (int i = 0; i < 32; i++) {
				printk("%02x", digest[i]);
   40434:	f8df 804c 	ldr.w	r8, [pc, #76]	; 40484 <main+0x58>
			}
			printk("\n");
   40438:	f8df 904c 	ldr.w	r9, [pc, #76]	; 40488 <main+0x5c>
{
   4043c:	b089      	sub	sp, #36	; 0x24
		psa_status_t status = dp_secret_digest(key, digest, sizeof(digest));
   4043e:	2220      	movs	r2, #32
   40440:	4669      	mov	r1, sp
   40442:	4630      	mov	r0, r6
   40444:	f000 f824 	bl	40490 <dp_secret_digest>
		if (status != PSA_SUCCESS) {
   40448:	4604      	mov	r4, r0
   4044a:	b148      	cbz	r0, 40460 <main+0x34>
			printk("Status: %d\n", status);
   4044c:	4601      	mov	r1, r0
   4044e:	480f      	ldr	r0, [pc, #60]	; (4048c <main+0x60>)
   40450:	f003 ffec 	bl	4442c <printk>
	for (int key = 0; key < 6; key++) {
   40454:	3601      	adds	r6, #1
   40456:	2e06      	cmp	r6, #6
   40458:	d1f1      	bne.n	4043e <main+0x12>
		}
	}
}
   4045a:	b009      	add	sp, #36	; 0x24
   4045c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printk("Digest: ");
   40460:	4638      	mov	r0, r7
   40462:	f003 ffe3 	bl	4442c <printk>
			for (int i = 0; i < 32; i++) {
   40466:	466d      	mov	r5, sp
				printk("%02x", digest[i]);
   40468:	4640      	mov	r0, r8
   4046a:	f815 1b01 	ldrb.w	r1, [r5], #1
			for (int i = 0; i < 32; i++) {
   4046e:	3401      	adds	r4, #1
				printk("%02x", digest[i]);
   40470:	f003 ffdc 	bl	4442c <printk>
			for (int i = 0; i < 32; i++) {
   40474:	2c20      	cmp	r4, #32
   40476:	d1f7      	bne.n	40468 <main+0x3c>
			printk("\n");
   40478:	4648      	mov	r0, r9
   4047a:	f003 ffd7 	bl	4442c <printk>
   4047e:	e7e9      	b.n	40454 <main+0x28>
   40480:	00045328 	.word	0x00045328
   40484:	00045331 	.word	0x00045331
   40488:	000453b1 	.word	0x000453b1
   4048c:	0004531c 	.word	0x0004531c

00040490 <dp_secret_digest>:
}
#else /* defined(CONFIG_TFM_IPC) */
psa_status_t dp_secret_digest(uint32_t secret_index,
			void *p_digest,
			size_t digest_size)
{
   40490:	b500      	push	{lr}
   40492:	b089      	sub	sp, #36	; 0x24
	psa_status_t status;
	psa_invec in_vec[] = {
   40494:	ab03      	add	r3, sp, #12
   40496:	9304      	str	r3, [sp, #16]
		{ .base = &secret_index, .len = sizeof(secret_index) },
	};

	psa_outvec out_vec[] = {
   40498:	9207      	str	r2, [sp, #28]
	psa_invec in_vec[] = {
   4049a:	2304      	movs	r3, #4
		{ .base = p_digest, .len = digest_size }
	};

	status = tfm_ns_interface_dispatch(
   4049c:	2201      	movs	r2, #1
	psa_outvec out_vec[] = {
   4049e:	e9cd 3105 	strd	r3, r1, [sp, #20]
{
   404a2:	9003      	str	r0, [sp, #12]
	status = tfm_ns_interface_dispatch(
   404a4:	9200      	str	r2, [sp, #0]
   404a6:	ab06      	add	r3, sp, #24
   404a8:	a904      	add	r1, sp, #16
   404aa:	4803      	ldr	r0, [pc, #12]	; (404b8 <dp_secret_digest+0x28>)
   404ac:	f002 f980 	bl	427b0 <tfm_ns_interface_dispatch>
				(veneer_fn)tfm_dp_secret_digest_req_veneer,
				(uint32_t)in_vec,  IOVEC_LEN(in_vec),
				(uint32_t)out_vec, IOVEC_LEN(out_vec));

	return status;
}
   404b0:	b009      	add	sp, #36	; 0x24
   404b2:	f85d fb04 	ldr.w	pc, [sp], #4
   404b6:	bf00      	nop
   404b8:	00037d61 	.word	0x00037d61

000404bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   404bc:	680b      	ldr	r3, [r1, #0]
   404be:	3301      	adds	r3, #1
   404c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   404c2:	4b01      	ldr	r3, [pc, #4]	; (404c8 <char_out+0xc>)
   404c4:	681b      	ldr	r3, [r3, #0]
   404c6:	4718      	bx	r3
   404c8:	20040000 	.word	0x20040000

000404cc <__printk_hook_install>:
	_char_out = fn;
   404cc:	4b01      	ldr	r3, [pc, #4]	; (404d4 <__printk_hook_install+0x8>)
   404ce:	6018      	str	r0, [r3, #0]
}
   404d0:	4770      	bx	lr
   404d2:	bf00      	nop
   404d4:	20040000 	.word	0x20040000

000404d8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   404d8:	b507      	push	{r0, r1, r2, lr}
   404da:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   404dc:	2100      	movs	r1, #0
{
   404de:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   404e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   404e2:	4803      	ldr	r0, [pc, #12]	; (404f0 <vprintk+0x18>)
   404e4:	a901      	add	r1, sp, #4
   404e6:	f000 f8e5 	bl	406b4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   404ea:	b003      	add	sp, #12
   404ec:	f85d fb04 	ldr.w	pc, [sp], #4
   404f0:	000404bd 	.word	0x000404bd

000404f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   404f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   404f8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   404fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   404fe:	f019 0808 	ands.w	r8, r9, #8
{
   40502:	4693      	mov	fp, r2
	if (processing) {
   40504:	d00d      	beq.n	40522 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   40506:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   40508:	bf0c      	ite	eq
   4050a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   4050e:	f049 0920 	orrne.w	r9, r9, #32
   40512:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   40516:	f38b 8811 	msr	BASEPRI, fp
   4051a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   4051e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   40522:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   40526:	2902      	cmp	r1, #2
   40528:	d107      	bne.n	4053a <process_event+0x46>
			evt = process_recheck(mgr);
   4052a:	4620      	mov	r0, r4
   4052c:	f003 ff8b 	bl	44446 <process_recheck>
		if (evt == EVT_NOP) {
   40530:	2800      	cmp	r0, #0
   40532:	d0f0      	beq.n	40516 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   40534:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   40536:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   40538:	d14e      	bne.n	405d8 <process_event+0xe4>
			res = mgr->last_res;
   4053a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4053c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   4053e:	2f00      	cmp	r7, #0
   40540:	da15      	bge.n	4056e <process_event+0x7a>
		*clients = mgr->clients;
   40542:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   40544:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   40548:	e9c4 8800 	strd	r8, r8, [r4]
   4054c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   40550:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   40552:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   40554:	8b21      	ldrh	r1, [r4, #24]
   40556:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   4055a:	45ca      	cmp	sl, r9
   4055c:	d002      	beq.n	40564 <process_event+0x70>
		if (do_monitors
   4055e:	68a3      	ldr	r3, [r4, #8]
   40560:	2b00      	cmp	r3, #0
   40562:	d15a      	bne.n	4061a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   40564:	b90d      	cbnz	r5, 4056a <process_event+0x76>
		    || (transit != NULL)) {
   40566:	2e00      	cmp	r6, #0
   40568:	d071      	beq.n	4064e <process_event+0x15a>
   4056a:	2300      	movs	r3, #0
   4056c:	e056      	b.n	4061c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4056e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   40572:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   40574:	2a01      	cmp	r2, #1
   40576:	d81e      	bhi.n	405b6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   40578:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   4057c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   4057e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   40580:	b289      	uxth	r1, r1
   40582:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   40586:	d10a      	bne.n	4059e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   40588:	b13d      	cbz	r5, 4059a <process_event+0xa6>
   4058a:	462a      	mov	r2, r5
   4058c:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   4058e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   40590:	3301      	adds	r3, #1
   40592:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   40594:	2a00      	cmp	r2, #0
   40596:	d1fa      	bne.n	4058e <process_event+0x9a>
   40598:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   4059a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   4059e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   405a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   405a2:	f003 ff50 	bl	44446 <process_recheck>
   405a6:	4606      	mov	r6, r0
   405a8:	2800      	cmp	r0, #0
   405aa:	d0d3      	beq.n	40554 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   405ac:	8b23      	ldrh	r3, [r4, #24]
   405ae:	f043 0320 	orr.w	r3, r3, #32
   405b2:	8323      	strh	r3, [r4, #24]
   405b4:	e7cd      	b.n	40552 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   405b6:	2b04      	cmp	r3, #4
   405b8:	d10c      	bne.n	405d4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   405ba:	f021 0107 	bic.w	r1, r1, #7
   405be:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   405c0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   405c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   405c4:	f003 ff3f 	bl	44446 <process_recheck>
   405c8:	4605      	mov	r5, r0
   405ca:	2800      	cmp	r0, #0
   405cc:	d0c1      	beq.n	40552 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   405ce:	f041 0120 	orr.w	r1, r1, #32
   405d2:	8321      	strh	r1, [r4, #24]
   405d4:	2500      	movs	r5, #0
   405d6:	e7bc      	b.n	40552 <process_event+0x5e>
		} else if (evt == EVT_START) {
   405d8:	2803      	cmp	r0, #3
   405da:	d109      	bne.n	405f0 <process_event+0xfc>
			transit = mgr->transitions->start;
   405dc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   405de:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   405e2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   405e4:	f043 0306 	orr.w	r3, r3, #6
}
   405e8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   405ea:	8323      	strh	r3, [r4, #24]
		res = 0;
   405ec:	462f      	mov	r7, r5
   405ee:	e7b1      	b.n	40554 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   405f0:	2804      	cmp	r0, #4
   405f2:	d106      	bne.n	40602 <process_event+0x10e>
			transit = mgr->transitions->stop;
   405f4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   405f6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   405fa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   405fc:	f043 0304 	orr.w	r3, r3, #4
   40600:	e7f2      	b.n	405e8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   40602:	2805      	cmp	r0, #5
   40604:	d106      	bne.n	40614 <process_event+0x120>
			transit = mgr->transitions->reset;
   40606:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   40608:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   4060c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   4060e:	f043 0305 	orr.w	r3, r3, #5
   40612:	e7e9      	b.n	405e8 <process_event+0xf4>
   40614:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   40616:	462e      	mov	r6, r5
   40618:	e7e8      	b.n	405ec <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   4061a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   4061c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   40620:	8321      	strh	r1, [r4, #24]
   40622:	f38b 8811 	msr	BASEPRI, fp
   40626:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   4062a:	b9fb      	cbnz	r3, 4066c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   4062c:	bb85      	cbnz	r5, 40690 <process_event+0x19c>
			if (transit != NULL) {
   4062e:	b116      	cbz	r6, 40636 <process_event+0x142>
				transit(mgr, transition_complete);
   40630:	4620      	mov	r0, r4
   40632:	491f      	ldr	r1, [pc, #124]	; (406b0 <process_event+0x1bc>)
   40634:	47b0      	blx	r6
	__asm__ volatile(
   40636:	f04f 0320 	mov.w	r3, #32
   4063a:	f3ef 8b11 	mrs	fp, BASEPRI
   4063e:	f383 8812 	msr	BASEPRI_MAX, r3
   40642:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   40646:	8b23      	ldrh	r3, [r4, #24]
   40648:	f023 0308 	bic.w	r3, r3, #8
   4064c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   4064e:	8b23      	ldrh	r3, [r4, #24]
   40650:	06da      	lsls	r2, r3, #27
   40652:	d525      	bpl.n	406a0 <process_event+0x1ac>
			evt = EVT_COMPLETE;
   40654:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   40656:	f023 0310 	bic.w	r3, r3, #16
   4065a:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   4065c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   40660:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   40664:	2900      	cmp	r1, #0
   40666:	f47f af5e 	bne.w	40526 <process_event+0x32>
out:
   4066a:	e754      	b.n	40516 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   4066c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   4066e:	2900      	cmp	r1, #0
   40670:	d0dc      	beq.n	4062c <process_event+0x138>
	return node->next;
   40672:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   40676:	463b      	mov	r3, r7
   40678:	4652      	mov	r2, sl
   4067a:	4620      	mov	r0, r4
   4067c:	f8d1 b004 	ldr.w	fp, [r1, #4]
   40680:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   40682:	f1b9 0f00 	cmp.w	r9, #0
   40686:	d0d1      	beq.n	4062c <process_event+0x138>
   40688:	4649      	mov	r1, r9
   4068a:	f8d9 9000 	ldr.w	r9, [r9]
   4068e:	e7f2      	b.n	40676 <process_event+0x182>
   40690:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   40692:	463b      	mov	r3, r7
   40694:	4652      	mov	r2, sl
   40696:	4620      	mov	r0, r4
   40698:	682d      	ldr	r5, [r5, #0]
   4069a:	f003 fef0 	bl	4447e <notify_one>
   4069e:	e7c5      	b.n	4062c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   406a0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   406a4:	bf1e      	ittt	ne
   406a6:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   406aa:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   406ac:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   406ae:	e7d5      	b.n	4065c <process_event+0x168>
   406b0:	000444ab 	.word	0x000444ab

000406b4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   406b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   406b8:	468b      	mov	fp, r1
   406ba:	4692      	mov	sl, r2
   406bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   406be:	2500      	movs	r5, #0
{
   406c0:	b091      	sub	sp, #68	; 0x44
   406c2:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   406c4:	f89a 0000 	ldrb.w	r0, [sl]
   406c8:	b908      	cbnz	r0, 406ce <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   406ca:	4628      	mov	r0, r5
   406cc:	e35f      	b.n	40d8e <cbvprintf+0x6da>
		if (*fp != '%') {
   406ce:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   406d0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   406d4:	d007      	beq.n	406e6 <cbvprintf+0x32>
			OUTC('%');
   406d6:	4659      	mov	r1, fp
   406d8:	9b02      	ldr	r3, [sp, #8]
   406da:	4798      	blx	r3
   406dc:	2800      	cmp	r0, #0
   406de:	f2c0 8356 	blt.w	40d8e <cbvprintf+0x6da>
   406e2:	3501      	adds	r5, #1
			break;
   406e4:	e212      	b.n	40b0c <cbvprintf+0x458>
		} state = {
   406e6:	2218      	movs	r2, #24
   406e8:	2100      	movs	r1, #0
   406ea:	a80a      	add	r0, sp, #40	; 0x28
   406ec:	f004 f849 	bl	44782 <memset>
	if (*sp == '%') {
   406f0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   406f4:	2b25      	cmp	r3, #37	; 0x25
   406f6:	d078      	beq.n	407ea <cbvprintf+0x136>
   406f8:	2200      	movs	r2, #0
   406fa:	4610      	mov	r0, r2
   406fc:	4696      	mov	lr, r2
   406fe:	4694      	mov	ip, r2
   40700:	4616      	mov	r6, r2
   40702:	4639      	mov	r1, r7
		switch (*sp) {
   40704:	f817 3b01 	ldrb.w	r3, [r7], #1
   40708:	2b2b      	cmp	r3, #43	; 0x2b
   4070a:	f000 809d 	beq.w	40848 <cbvprintf+0x194>
   4070e:	f200 8094 	bhi.w	4083a <cbvprintf+0x186>
   40712:	2b20      	cmp	r3, #32
   40714:	f000 809b 	beq.w	4084e <cbvprintf+0x19a>
   40718:	2b23      	cmp	r3, #35	; 0x23
   4071a:	f000 809b 	beq.w	40854 <cbvprintf+0x1a0>
   4071e:	b12e      	cbz	r6, 4072c <cbvprintf+0x78>
   40720:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   40724:	f046 0604 	orr.w	r6, r6, #4
   40728:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   4072c:	f1bc 0f00 	cmp.w	ip, #0
   40730:	d005      	beq.n	4073e <cbvprintf+0x8a>
   40732:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   40736:	f046 0608 	orr.w	r6, r6, #8
   4073a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   4073e:	f1be 0f00 	cmp.w	lr, #0
   40742:	d005      	beq.n	40750 <cbvprintf+0x9c>
   40744:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   40748:	f046 0610 	orr.w	r6, r6, #16
   4074c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   40750:	b128      	cbz	r0, 4075e <cbvprintf+0xaa>
   40752:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   40756:	f040 0020 	orr.w	r0, r0, #32
   4075a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   4075e:	b12a      	cbz	r2, 4076c <cbvprintf+0xb8>
   40760:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   40764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   40768:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   4076c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   40770:	f002 0044 	and.w	r0, r2, #68	; 0x44
   40774:	2844      	cmp	r0, #68	; 0x44
   40776:	d103      	bne.n	40780 <cbvprintf+0xcc>
		conv->flag_zero = false;
   40778:	f36f 1286 	bfc	r2, #6, #1
   4077c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   40780:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   40784:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   40786:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   4078a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   4078e:	d17b      	bne.n	40888 <cbvprintf+0x1d4>
		conv->width_star = true;
   40790:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
   40794:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   40796:	f042 0201 	orr.w	r2, r2, #1
   4079a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   4079e:	781a      	ldrb	r2, [r3, #0]
   407a0:	2a2e      	cmp	r2, #46	; 0x2e
   407a2:	bf0c      	ite	eq
   407a4:	2101      	moveq	r1, #1
   407a6:	2100      	movne	r1, #0
   407a8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   407ac:	f361 0241 	bfi	r2, r1, #1, #1
   407b0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   407b4:	d174      	bne.n	408a0 <cbvprintf+0x1ec>
	if (*sp == '*') {
   407b6:	785a      	ldrb	r2, [r3, #1]
   407b8:	2a2a      	cmp	r2, #42	; 0x2a
   407ba:	d06a      	beq.n	40892 <cbvprintf+0x1de>
	size_t val = 0;
   407bc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   407be:	260a      	movs	r6, #10
	++sp;
   407c0:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   407c2:	4618      	mov	r0, r3
   407c4:	f810 2b01 	ldrb.w	r2, [r0], #1
   407c8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   407cc:	2f09      	cmp	r7, #9
   407ce:	f240 808e 	bls.w	408ee <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   407d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   407d6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   407d8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   407dc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   407e0:	f361 0241 	bfi	r2, r1, #1, #1
   407e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   407e8:	e05a      	b.n	408a0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   407ea:	f10a 0702 	add.w	r7, sl, #2
   407ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   407f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   407f6:	07d9      	lsls	r1, r3, #31
   407f8:	f140 8149 	bpl.w	40a8e <cbvprintf+0x3da>
			width = va_arg(ap, int);
   407fc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   40800:	f1b9 0f00 	cmp.w	r9, #0
   40804:	da07      	bge.n	40816 <cbvprintf+0x162>
				conv->flag_dash = true;
   40806:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   4080a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   4080e:	f042 0204 	orr.w	r2, r2, #4
   40812:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   40816:	075a      	lsls	r2, r3, #29
   40818:	f140 8142 	bpl.w	40aa0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   4081c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   40820:	f1b8 0f00 	cmp.w	r8, #0
   40824:	f280 8141 	bge.w	40aaa <cbvprintf+0x3f6>
				conv->prec_present = false;
   40828:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   4082c:	f36f 0341 	bfc	r3, #1, #1
   40830:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   40834:	f04f 38ff 	mov.w	r8, #4294967295
   40838:	e137      	b.n	40aaa <cbvprintf+0x3f6>
		switch (*sp) {
   4083a:	2b2d      	cmp	r3, #45	; 0x2d
   4083c:	d00c      	beq.n	40858 <cbvprintf+0x1a4>
   4083e:	2b30      	cmp	r3, #48	; 0x30
   40840:	f47f af6d 	bne.w	4071e <cbvprintf+0x6a>
			conv->flag_zero = true;
   40844:	2201      	movs	r2, #1
	} while (loop);
   40846:	e75c      	b.n	40702 <cbvprintf+0x4e>
			conv->flag_plus = true;
   40848:	f04f 0c01 	mov.w	ip, #1
   4084c:	e759      	b.n	40702 <cbvprintf+0x4e>
			conv->flag_space = true;
   4084e:	f04f 0e01 	mov.w	lr, #1
   40852:	e756      	b.n	40702 <cbvprintf+0x4e>
			conv->flag_hash = true;
   40854:	2001      	movs	r0, #1
   40856:	e754      	b.n	40702 <cbvprintf+0x4e>
		switch (*sp) {
   40858:	2601      	movs	r6, #1
   4085a:	e752      	b.n	40702 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   4085c:	4633      	mov	r3, r6
   4085e:	fb0c 0202 	mla	r2, ip, r2, r0
   40862:	3a30      	subs	r2, #48	; 0x30
   40864:	461e      	mov	r6, r3
   40866:	f816 0b01 	ldrb.w	r0, [r6], #1
   4086a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   4086e:	2f09      	cmp	r7, #9
   40870:	d9f4      	bls.n	4085c <cbvprintf+0x1a8>
	if (sp != wp) {
   40872:	4299      	cmp	r1, r3
   40874:	d093      	beq.n	4079e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   40876:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   4087a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   4087c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   4087e:	f362 0141 	bfi	r1, r2, #1, #1
   40882:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   40886:	e78a      	b.n	4079e <cbvprintf+0xea>
   40888:	460b      	mov	r3, r1
	size_t val = 0;
   4088a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   4088c:	f04f 0c0a 	mov.w	ip, #10
   40890:	e7e8      	b.n	40864 <cbvprintf+0x1b0>
		conv->prec_star = true;
   40892:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   40896:	3302      	adds	r3, #2
		conv->prec_star = true;
   40898:	f042 0204 	orr.w	r2, r2, #4
   4089c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   408a0:	461f      	mov	r7, r3
   408a2:	f817 2b01 	ldrb.w	r2, [r7], #1
   408a6:	2a6c      	cmp	r2, #108	; 0x6c
   408a8:	d041      	beq.n	4092e <cbvprintf+0x27a>
   408aa:	d825      	bhi.n	408f8 <cbvprintf+0x244>
   408ac:	2a68      	cmp	r2, #104	; 0x68
   408ae:	d02b      	beq.n	40908 <cbvprintf+0x254>
   408b0:	2a6a      	cmp	r2, #106	; 0x6a
   408b2:	d046      	beq.n	40942 <cbvprintf+0x28e>
   408b4:	2a4c      	cmp	r2, #76	; 0x4c
   408b6:	d04c      	beq.n	40952 <cbvprintf+0x29e>
   408b8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   408ba:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   408be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   408c2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   408c4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   408c8:	f200 80d9 	bhi.w	40a7e <cbvprintf+0x3ca>
   408cc:	2a57      	cmp	r2, #87	; 0x57
   408ce:	d84d      	bhi.n	4096c <cbvprintf+0x2b8>
   408d0:	2a41      	cmp	r2, #65	; 0x41
   408d2:	d003      	beq.n	408dc <cbvprintf+0x228>
   408d4:	3a45      	subs	r2, #69	; 0x45
   408d6:	2a02      	cmp	r2, #2
   408d8:	f200 80d1 	bhi.w	40a7e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   408dc:	2204      	movs	r2, #4
   408de:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   408e2:	f362 0302 	bfi	r3, r2, #0, #3
   408e6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   408ea:	2301      	movs	r3, #1
			break;
   408ec:	e09e      	b.n	40a2c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   408ee:	fb06 2101 	mla	r1, r6, r1, r2
   408f2:	4603      	mov	r3, r0
   408f4:	3930      	subs	r1, #48	; 0x30
   408f6:	e764      	b.n	407c2 <cbvprintf+0x10e>
	switch (*sp) {
   408f8:	2a74      	cmp	r2, #116	; 0x74
   408fa:	d026      	beq.n	4094a <cbvprintf+0x296>
   408fc:	2a7a      	cmp	r2, #122	; 0x7a
   408fe:	d1db      	bne.n	408b8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   40900:	2206      	movs	r2, #6
   40902:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   40906:	e00d      	b.n	40924 <cbvprintf+0x270>
		if (*++sp == 'h') {
   40908:	785a      	ldrb	r2, [r3, #1]
   4090a:	2a68      	cmp	r2, #104	; 0x68
   4090c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   40910:	d106      	bne.n	40920 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   40912:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   40914:	f361 02c6 	bfi	r2, r1, #3, #4
   40918:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   4091c:	1c9f      	adds	r7, r3, #2
   4091e:	e7cc      	b.n	408ba <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   40920:	4613      	mov	r3, r2
   40922:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   40924:	f362 03c6 	bfi	r3, r2, #3, #4
   40928:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   4092c:	e7c5      	b.n	408ba <cbvprintf+0x206>
		if (*++sp == 'l') {
   4092e:	785a      	ldrb	r2, [r3, #1]
   40930:	2a6c      	cmp	r2, #108	; 0x6c
   40932:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   40936:	d101      	bne.n	4093c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   40938:	2104      	movs	r1, #4
   4093a:	e7eb      	b.n	40914 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   4093c:	4613      	mov	r3, r2
   4093e:	2203      	movs	r2, #3
   40940:	e7f0      	b.n	40924 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   40942:	2205      	movs	r2, #5
   40944:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   40948:	e7ec      	b.n	40924 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   4094a:	2207      	movs	r2, #7
   4094c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   40950:	e7e8      	b.n	40924 <cbvprintf+0x270>
		conv->unsupported = true;
   40952:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   40956:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   4095a:	f023 0302 	bic.w	r3, r3, #2
   4095e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   40962:	f043 0302 	orr.w	r3, r3, #2
   40966:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   4096a:	e7a6      	b.n	408ba <cbvprintf+0x206>
	switch (conv->specifier) {
   4096c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   40970:	2920      	cmp	r1, #32
   40972:	f200 8084 	bhi.w	40a7e <cbvprintf+0x3ca>
   40976:	a001      	add	r0, pc, #4	; (adr r0, 4097c <cbvprintf+0x2c8>)
   40978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   4097c:	00040a41 	.word	0x00040a41
   40980:	00040a7f 	.word	0x00040a7f
   40984:	00040a7f 	.word	0x00040a7f
   40988:	00040a7f 	.word	0x00040a7f
   4098c:	00040a7f 	.word	0x00040a7f
   40990:	00040a7f 	.word	0x00040a7f
   40994:	00040a7f 	.word	0x00040a7f
   40998:	00040a7f 	.word	0x00040a7f
   4099c:	00040a7f 	.word	0x00040a7f
   409a0:	000408dd 	.word	0x000408dd
   409a4:	00040a7f 	.word	0x00040a7f
   409a8:	00040a41 	.word	0x00040a41
   409ac:	00040a01 	.word	0x00040a01
   409b0:	000408dd 	.word	0x000408dd
   409b4:	000408dd 	.word	0x000408dd
   409b8:	000408dd 	.word	0x000408dd
   409bc:	00040a7f 	.word	0x00040a7f
   409c0:	00040a01 	.word	0x00040a01
   409c4:	00040a7f 	.word	0x00040a7f
   409c8:	00040a7f 	.word	0x00040a7f
   409cc:	00040a7f 	.word	0x00040a7f
   409d0:	00040a7f 	.word	0x00040a7f
   409d4:	00040a49 	.word	0x00040a49
   409d8:	00040a41 	.word	0x00040a41
   409dc:	00040a65 	.word	0x00040a65
   409e0:	00040a7f 	.word	0x00040a7f
   409e4:	00040a7f 	.word	0x00040a7f
   409e8:	00040a65 	.word	0x00040a65
   409ec:	00040a7f 	.word	0x00040a7f
   409f0:	00040a41 	.word	0x00040a41
   409f4:	00040a7f 	.word	0x00040a7f
   409f8:	00040a7f 	.word	0x00040a7f
   409fc:	00040a41 	.word	0x00040a41
		conv->specifier_cat = SPECIFIER_SINT;
   40a00:	2001      	movs	r0, #1
   40a02:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   40a06:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   40a0a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   40a0e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   40a10:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   40a14:	bf02      	ittt	eq
   40a16:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   40a1a:	f041 0101 	orreq.w	r1, r1, #1
   40a1e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   40a22:	2a63      	cmp	r2, #99	; 0x63
   40a24:	d131      	bne.n	40a8a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   40a26:	3b00      	subs	r3, #0
   40a28:	bf18      	it	ne
   40a2a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   40a2c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   40a30:	f3c2 0140 	ubfx	r1, r2, #1, #1
   40a34:	430b      	orrs	r3, r1
   40a36:	f363 0241 	bfi	r2, r3, #1, #1
   40a3a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   40a3e:	e6d8      	b.n	407f2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   40a40:	2002      	movs	r0, #2
   40a42:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   40a46:	e7de      	b.n	40a06 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   40a48:	2103      	movs	r1, #3
   40a4a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   40a4e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   40a52:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   40a56:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   40a5a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   40a5c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   40a60:	4143      	adcs	r3, r0
   40a62:	e7e3      	b.n	40a2c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   40a64:	2103      	movs	r1, #3
   40a66:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   40a6a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   40a6e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   40a72:	bf14      	ite	ne
   40a74:	2301      	movne	r3, #1
   40a76:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   40a78:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   40a7c:	e7d6      	b.n	40a2c <cbvprintf+0x378>
		conv->invalid = true;
   40a7e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   40a82:	f043 0301 	orr.w	r3, r3, #1
   40a86:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   40a8a:	2300      	movs	r3, #0
   40a8c:	e7ce      	b.n	40a2c <cbvprintf+0x378>
		} else if (conv->width_present) {
   40a8e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   40a92:	2a00      	cmp	r2, #0
		int width = -1;
   40a94:	bfac      	ite	ge
   40a96:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   40a9a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   40a9e:	e6ba      	b.n	40816 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   40aa0:	079b      	lsls	r3, r3, #30
   40aa2:	f57f aec7 	bpl.w	40834 <cbvprintf+0x180>
			precision = conv->prec_value;
   40aa6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   40aaa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   40aac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   40ab0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   40ab4:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   40ab8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   40abc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   40abe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   40ac2:	d138      	bne.n	40b36 <cbvprintf+0x482>
			switch (length_mod) {
   40ac4:	1ecb      	subs	r3, r1, #3
   40ac6:	2b04      	cmp	r3, #4
   40ac8:	d822      	bhi.n	40b10 <cbvprintf+0x45c>
   40aca:	e8df f003 	tbb	[pc, r3]
   40ace:	0903      	.short	0x0903
   40ad0:	2109      	.short	0x2109
   40ad2:	21          	.byte	0x21
   40ad3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   40ad4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   40ad8:	17da      	asrs	r2, r3, #31
   40ada:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   40ade:	e006      	b.n	40aee <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   40ae0:	3407      	adds	r4, #7
   40ae2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   40ae6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   40aea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   40aee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   40af2:	f013 0603 	ands.w	r6, r3, #3
   40af6:	d056      	beq.n	40ba6 <cbvprintf+0x4f2>
			OUTS(sp, fp);
   40af8:	463b      	mov	r3, r7
   40afa:	4652      	mov	r2, sl
   40afc:	4659      	mov	r1, fp
   40afe:	9802      	ldr	r0, [sp, #8]
   40b00:	f003 fd9c 	bl	4463c <outs>
   40b04:	2800      	cmp	r0, #0
   40b06:	f2c0 8142 	blt.w	40d8e <cbvprintf+0x6da>
   40b0a:	4405      	add	r5, r0
			continue;
   40b0c:	46ba      	mov	sl, r7
   40b0e:	e5d9      	b.n	406c4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   40b10:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   40b14:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   40b16:	ea4f 72e3 	mov.w	r2, r3, asr #31
   40b1a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   40b1e:	d105      	bne.n	40b2c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   40b20:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   40b24:	930a      	str	r3, [sp, #40]	; 0x28
   40b26:	2300      	movs	r3, #0
   40b28:	930b      	str	r3, [sp, #44]	; 0x2c
   40b2a:	e7e0      	b.n	40aee <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   40b2c:	2902      	cmp	r1, #2
   40b2e:	d1de      	bne.n	40aee <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   40b30:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   40b34:	e7d0      	b.n	40ad8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   40b36:	2b02      	cmp	r3, #2
   40b38:	d123      	bne.n	40b82 <cbvprintf+0x4ce>
			switch (length_mod) {
   40b3a:	1ecb      	subs	r3, r1, #3
   40b3c:	2b04      	cmp	r3, #4
   40b3e:	d813      	bhi.n	40b68 <cbvprintf+0x4b4>
   40b40:	e8df f003 	tbb	[pc, r3]
   40b44:	120a0a03 	.word	0x120a0a03
   40b48:	12          	.byte	0x12
   40b49:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   40b4a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   40b4c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
   40b4e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   40b50:	920a      	str	r2, [sp, #40]	; 0x28
   40b52:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   40b54:	4604      	mov	r4, r0
   40b56:	e7ca      	b.n	40aee <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   40b58:	1de0      	adds	r0, r4, #7
   40b5a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   40b5e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   40b62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   40b66:	e7f5      	b.n	40b54 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   40b68:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   40b6c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   40b6e:	930a      	str	r3, [sp, #40]	; 0x28
   40b70:	f04f 0300 	mov.w	r3, #0
   40b74:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   40b76:	d0d3      	beq.n	40b20 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   40b78:	2902      	cmp	r1, #2
   40b7a:	d1b8      	bne.n	40aee <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   40b7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   40b80:	e7d0      	b.n	40b24 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   40b82:	2b04      	cmp	r3, #4
   40b84:	d109      	bne.n	40b9a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   40b86:	1de3      	adds	r3, r4, #7
   40b88:	f023 0307 	bic.w	r3, r3, #7
   40b8c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   40b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   40b94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   40b98:	e7a9      	b.n	40aee <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   40b9a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   40b9c:	bf04      	itt	eq
   40b9e:	f854 3b04 	ldreq.w	r3, [r4], #4
   40ba2:	930a      	streq	r3, [sp, #40]	; 0x28
   40ba4:	e7a3      	b.n	40aee <cbvprintf+0x43a>
		switch (conv->specifier) {
   40ba6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   40baa:	2878      	cmp	r0, #120	; 0x78
   40bac:	d8ae      	bhi.n	40b0c <cbvprintf+0x458>
   40bae:	2862      	cmp	r0, #98	; 0x62
   40bb0:	d822      	bhi.n	40bf8 <cbvprintf+0x544>
   40bb2:	2825      	cmp	r0, #37	; 0x25
   40bb4:	f43f ad8f 	beq.w	406d6 <cbvprintf+0x22>
   40bb8:	2858      	cmp	r0, #88	; 0x58
   40bba:	d1a7      	bne.n	40b0c <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   40bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   40bc0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   40bc4:	9300      	str	r3, [sp, #0]
   40bc6:	aa0c      	add	r2, sp, #48	; 0x30
   40bc8:	ab04      	add	r3, sp, #16
   40bca:	f003 fcf1 	bl	445b0 <encode_uint>
   40bce:	4682      	mov	sl, r0
			if (precision >= 0) {
   40bd0:	f1b8 0f00 	cmp.w	r8, #0
   40bd4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   40bd8:	db0c      	blt.n	40bf4 <cbvprintf+0x540>
				conv->flag_zero = false;
   40bda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   40bde:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   40be2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   40be6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   40be8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   40bec:	d902      	bls.n	40bf4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   40bee:	eba8 0303 	sub.w	r3, r8, r3
   40bf2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   40bf4:	4680      	mov	r8, r0
   40bf6:	e03d      	b.n	40c74 <cbvprintf+0x5c0>
		switch (conv->specifier) {
   40bf8:	3863      	subs	r0, #99	; 0x63
   40bfa:	2815      	cmp	r0, #21
   40bfc:	d886      	bhi.n	40b0c <cbvprintf+0x458>
   40bfe:	a201      	add	r2, pc, #4	; (adr r2, 40c04 <cbvprintf+0x550>)
   40c00:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   40c04:	00040c85 	.word	0x00040c85
   40c08:	00040ce9 	.word	0x00040ce9
   40c0c:	00040b0d 	.word	0x00040b0d
   40c10:	00040b0d 	.word	0x00040b0d
   40c14:	00040b0d 	.word	0x00040b0d
   40c18:	00040b0d 	.word	0x00040b0d
   40c1c:	00040ce9 	.word	0x00040ce9
   40c20:	00040b0d 	.word	0x00040b0d
   40c24:	00040b0d 	.word	0x00040b0d
   40c28:	00040b0d 	.word	0x00040b0d
   40c2c:	00040b0d 	.word	0x00040b0d
   40c30:	00040d43 	.word	0x00040d43
   40c34:	00040d11 	.word	0x00040d11
   40c38:	00040d15 	.word	0x00040d15
   40c3c:	00040b0d 	.word	0x00040b0d
   40c40:	00040b0d 	.word	0x00040b0d
   40c44:	00040c5d 	.word	0x00040c5d
   40c48:	00040b0d 	.word	0x00040b0d
   40c4c:	00040d11 	.word	0x00040d11
   40c50:	00040b0d 	.word	0x00040b0d
   40c54:	00040b0d 	.word	0x00040b0d
   40c58:	00040d11 	.word	0x00040d11
			if (precision >= 0) {
   40c5c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   40c60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   40c64:	db0a      	blt.n	40c7c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   40c66:	4641      	mov	r1, r8
   40c68:	4650      	mov	r0, sl
   40c6a:	f003 fd76 	bl	4475a <strnlen>
		char sign = 0;
   40c6e:	2600      	movs	r6, #0
			bpe = bps + len;
   40c70:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   40c74:	f1ba 0f00 	cmp.w	sl, #0
   40c78:	d10c      	bne.n	40c94 <cbvprintf+0x5e0>
   40c7a:	e747      	b.n	40b0c <cbvprintf+0x458>
				len = strlen(bps);
   40c7c:	4650      	mov	r0, sl
   40c7e:	f003 fd65 	bl	4474c <strlen>
   40c82:	e7f4      	b.n	40c6e <cbvprintf+0x5ba>
			break;
   40c84:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   40c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
   40c88:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   40c8c:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
   40c90:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   40c94:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   40c98:	b106      	cbz	r6, 40c9c <cbvprintf+0x5e8>
			nj_len += 1U;
   40c9a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   40c9c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   40ca0:	06d0      	lsls	r0, r2, #27
   40ca2:	d568      	bpl.n	40d76 <cbvprintf+0x6c2>
			nj_len += 2U;
   40ca4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   40ca6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   40ca8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   40caa:	bf48      	it	mi
   40cac:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   40cae:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   40cb0:	bf48      	it	mi
   40cb2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   40cb4:	f1b9 0f00 	cmp.w	r9, #0
   40cb8:	dd76      	ble.n	40da8 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   40cba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   40cbe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   40cc2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   40cc6:	9303      	str	r3, [sp, #12]
   40cc8:	0753      	lsls	r3, r2, #29
   40cca:	d46d      	bmi.n	40da8 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   40ccc:	0650      	lsls	r0, r2, #25
   40cce:	d561      	bpl.n	40d94 <cbvprintf+0x6e0>
					if (sign != 0) {
   40cd0:	b146      	cbz	r6, 40ce4 <cbvprintf+0x630>
						OUTC(sign);
   40cd2:	4659      	mov	r1, fp
   40cd4:	4630      	mov	r0, r6
   40cd6:	9b02      	ldr	r3, [sp, #8]
   40cd8:	4798      	blx	r3
   40cda:	2800      	cmp	r0, #0
   40cdc:	db57      	blt.n	40d8e <cbvprintf+0x6da>
						sign = 0;
   40cde:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   40ce0:	3501      	adds	r5, #1
						sign = 0;
   40ce2:	461e      	mov	r6, r3
					pad = '0';
   40ce4:	2330      	movs	r3, #48	; 0x30
   40ce6:	e056      	b.n	40d96 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   40ce8:	071e      	lsls	r6, r3, #28
   40cea:	d40f      	bmi.n	40d0c <cbvprintf+0x658>
				sign = ' ';
   40cec:	f013 0610 	ands.w	r6, r3, #16
   40cf0:	bf18      	it	ne
   40cf2:	2620      	movne	r6, #32
			sint = value->sint;
   40cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   40cf8:	2b00      	cmp	r3, #0
   40cfa:	f6bf af5f 	bge.w	40bbc <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   40cfe:	4252      	negs	r2, r2
   40d00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   40d04:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   40d06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   40d0a:	e757      	b.n	40bbc <cbvprintf+0x508>
				sign = '+';
   40d0c:	262b      	movs	r6, #43	; 0x2b
   40d0e:	e7f1      	b.n	40cf4 <cbvprintf+0x640>
		switch (conv->specifier) {
   40d10:	2600      	movs	r6, #0
   40d12:	e753      	b.n	40bbc <cbvprintf+0x508>
			if (value->ptr != NULL) {
   40d14:	980a      	ldr	r0, [sp, #40]	; 0x28
   40d16:	b340      	cbz	r0, 40d6a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   40d18:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   40d1c:	9300      	str	r3, [sp, #0]
   40d1e:	2100      	movs	r1, #0
   40d20:	ab04      	add	r3, sp, #16
   40d22:	aa0c      	add	r2, sp, #48	; 0x30
   40d24:	f003 fc44 	bl	445b0 <encode_uint>
				conv->altform_0c = true;
   40d28:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   40d2c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   40d2e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   40d32:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   40d36:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   40d3a:	2600      	movs	r6, #0
				conv->altform_0c = true;
   40d3c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   40d40:	e746      	b.n	40bd0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   40d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   40d44:	2907      	cmp	r1, #7
   40d46:	f63f aee1 	bhi.w	40b0c <cbvprintf+0x458>
   40d4a:	e8df f001 	tbb	[pc, r1]
   40d4e:	040c      	.short	0x040c
   40d50:	08080c06 	.word	0x08080c06
   40d54:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   40d56:	701d      	strb	r5, [r3, #0]
		break;
   40d58:	e6d8      	b.n	40b0c <cbvprintf+0x458>
		*(short *)dp = (short)count;
   40d5a:	801d      	strh	r5, [r3, #0]
		break;
   40d5c:	e6d6      	b.n	40b0c <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   40d5e:	17ea      	asrs	r2, r5, #31
   40d60:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   40d64:	e6d2      	b.n	40b0c <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   40d66:	601d      	str	r5, [r3, #0]
		break;
   40d68:	e6d0      	b.n	40b0c <cbvprintf+0x458>
			bps = "(nil)";
   40d6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 40e34 <cbvprintf+0x780>
   40d6e:	4606      	mov	r6, r0
			bpe = bps + 5;
   40d70:	f10a 0805 	add.w	r8, sl, #5
   40d74:	e78e      	b.n	40c94 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   40d76:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   40d78:	bf48      	it	mi
   40d7a:	3301      	addmi	r3, #1
   40d7c:	e793      	b.n	40ca6 <cbvprintf+0x5f2>
					OUTC(pad);
   40d7e:	4618      	mov	r0, r3
   40d80:	9303      	str	r3, [sp, #12]
   40d82:	4659      	mov	r1, fp
   40d84:	9b02      	ldr	r3, [sp, #8]
   40d86:	4798      	blx	r3
   40d88:	2800      	cmp	r0, #0
   40d8a:	9b03      	ldr	r3, [sp, #12]
   40d8c:	da04      	bge.n	40d98 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   40d8e:	b011      	add	sp, #68	; 0x44
   40d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   40d94:	2320      	movs	r3, #32
   40d96:	444d      	add	r5, r9
   40d98:	464a      	mov	r2, r9
				while (width-- > 0) {
   40d9a:	2a00      	cmp	r2, #0
   40d9c:	eba5 0109 	sub.w	r1, r5, r9
   40da0:	f109 39ff 	add.w	r9, r9, #4294967295
   40da4:	dceb      	bgt.n	40d7e <cbvprintf+0x6ca>
   40da6:	460d      	mov	r5, r1
		if (sign != 0) {
   40da8:	b136      	cbz	r6, 40db8 <cbvprintf+0x704>
			OUTC(sign);
   40daa:	4659      	mov	r1, fp
   40dac:	4630      	mov	r0, r6
   40dae:	9b02      	ldr	r3, [sp, #8]
   40db0:	4798      	blx	r3
   40db2:	2800      	cmp	r0, #0
   40db4:	dbeb      	blt.n	40d8e <cbvprintf+0x6da>
   40db6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   40db8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   40dbc:	06d9      	lsls	r1, r3, #27
   40dbe:	d401      	bmi.n	40dc4 <cbvprintf+0x710>
   40dc0:	071a      	lsls	r2, r3, #28
   40dc2:	d506      	bpl.n	40dd2 <cbvprintf+0x71e>
				OUTC('0');
   40dc4:	4659      	mov	r1, fp
   40dc6:	2030      	movs	r0, #48	; 0x30
   40dc8:	9b02      	ldr	r3, [sp, #8]
   40dca:	4798      	blx	r3
   40dcc:	2800      	cmp	r0, #0
   40dce:	dbde      	blt.n	40d8e <cbvprintf+0x6da>
   40dd0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   40dd2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   40dd6:	06db      	lsls	r3, r3, #27
   40dd8:	d507      	bpl.n	40dea <cbvprintf+0x736>
				OUTC(conv->specifier);
   40dda:	4659      	mov	r1, fp
   40ddc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   40de0:	9b02      	ldr	r3, [sp, #8]
   40de2:	4798      	blx	r3
   40de4:	2800      	cmp	r0, #0
   40de6:	dbd2      	blt.n	40d8e <cbvprintf+0x6da>
   40de8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   40dea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   40dec:	442e      	add	r6, r5
   40dee:	1b73      	subs	r3, r6, r5
   40df0:	2b00      	cmp	r3, #0
   40df2:	dc16      	bgt.n	40e22 <cbvprintf+0x76e>
			OUTS(bps, bpe);
   40df4:	4643      	mov	r3, r8
   40df6:	4652      	mov	r2, sl
   40df8:	4659      	mov	r1, fp
   40dfa:	9802      	ldr	r0, [sp, #8]
   40dfc:	f003 fc1e 	bl	4463c <outs>
   40e00:	2800      	cmp	r0, #0
   40e02:	dbc4      	blt.n	40d8e <cbvprintf+0x6da>
   40e04:	4405      	add	r5, r0
		while (width > 0) {
   40e06:	44a9      	add	r9, r5
   40e08:	eba9 0305 	sub.w	r3, r9, r5
   40e0c:	2b00      	cmp	r3, #0
   40e0e:	f77f ae7d 	ble.w	40b0c <cbvprintf+0x458>
			OUTC(' ');
   40e12:	4659      	mov	r1, fp
   40e14:	2020      	movs	r0, #32
   40e16:	9b02      	ldr	r3, [sp, #8]
   40e18:	4798      	blx	r3
   40e1a:	2800      	cmp	r0, #0
   40e1c:	dbb7      	blt.n	40d8e <cbvprintf+0x6da>
   40e1e:	3501      	adds	r5, #1
			--width;
   40e20:	e7f2      	b.n	40e08 <cbvprintf+0x754>
				OUTC('0');
   40e22:	4659      	mov	r1, fp
   40e24:	2030      	movs	r0, #48	; 0x30
   40e26:	9b02      	ldr	r3, [sp, #8]
   40e28:	4798      	blx	r3
   40e2a:	2800      	cmp	r0, #0
   40e2c:	dbaf      	blt.n	40d8e <cbvprintf+0x6da>
   40e2e:	3501      	adds	r5, #1
   40e30:	e7dd      	b.n	40dee <cbvprintf+0x73a>
   40e32:	bf00      	nop
   40e34:	00045336 	.word	0x00045336

00040e38 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   40e38:	b148      	cbz	r0, 40e4e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   40e3a:	4b05      	ldr	r3, [pc, #20]	; (40e50 <arch_busy_wait+0x18>)
   40e3c:	681a      	ldr	r2, [r3, #0]
   40e3e:	4b05      	ldr	r3, [pc, #20]	; (40e54 <arch_busy_wait+0x1c>)
   40e40:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   40e44:	4b04      	ldr	r3, [pc, #16]	; (40e58 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
   40e46:	4350      	muls	r0, r2
   40e48:	f043 0301 	orr.w	r3, r3, #1
   40e4c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   40e4e:	4770      	bx	lr
   40e50:	20040020 	.word	0x20040020
   40e54:	000f4240 	.word	0x000f4240
   40e58:	000451f0 	.word	0x000451f0

00040e5c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   40e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40e60:	4605      	mov	r5, r0
   40e62:	f04f 0320 	mov.w	r3, #32
   40e66:	f3ef 8611 	mrs	r6, BASEPRI
   40e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   40e6e:	f3bf 8f6f 	isb	sy
	return list->head;
   40e72:	4b0e      	ldr	r3, [pc, #56]	; (40eac <pm_state_notify+0x50>)
   40e74:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   40e76:	b19c      	cbz	r4, 40ea0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   40e78:	f04f 090c 	mov.w	r9, #12
   40e7c:	4f0c      	ldr	r7, [pc, #48]	; (40eb0 <pm_state_notify+0x54>)
   40e7e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 40eb4 <pm_state_notify+0x58>
			callback = notifier->state_exit;
   40e82:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   40e86:	2d00      	cmp	r5, #0
   40e88:	bf08      	it	eq
   40e8a:	4613      	moveq	r3, r2
		if (callback) {
   40e8c:	b12b      	cbz	r3, 40e9a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   40e8e:	f898 2014 	ldrb.w	r2, [r8, #20]
   40e92:	fb09 f202 	mul.w	r2, r9, r2
   40e96:	5cb8      	ldrb	r0, [r7, r2]
   40e98:	4798      	blx	r3
	return node->next;
   40e9a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   40e9c:	2c00      	cmp	r4, #0
   40e9e:	d1f0      	bne.n	40e82 <pm_state_notify+0x26>
	__asm__ volatile(
   40ea0:	f386 8811 	msr	BASEPRI, r6
   40ea4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   40ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40eac:	20040208 	.word	0x20040208
   40eb0:	20040210 	.word	0x20040210
   40eb4:	20040350 	.word	0x20040350

00040eb8 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   40eb8:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   40eba:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   40ebc:	f000 001f 	and.w	r0, r0, #31
   40ec0:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   40ec4:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   40ec6:	4b05      	ldr	r3, [pc, #20]	; (40edc <atomic_clear_bit.constprop.0+0x24>)
   40ec8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   40ecc:	e8d3 2fef 	ldaex	r2, [r3]
   40ed0:	4002      	ands	r2, r0
   40ed2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   40ed6:	2900      	cmp	r1, #0
   40ed8:	d1f8      	bne.n	40ecc <atomic_clear_bit.constprop.0+0x14>
}
   40eda:	4770      	bx	lr
   40edc:	2004021c 	.word	0x2004021c

00040ee0 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   40ee0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   40ee2:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   40ee4:	4b17      	ldr	r3, [pc, #92]	; (40f44 <pm_system_resume+0x64>)
   40ee6:	7d1c      	ldrb	r4, [r3, #20]
   40ee8:	f004 031f 	and.w	r3, r4, #31
   40eec:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   40eee:	43d0      	mvns	r0, r2
   40ef0:	4b15      	ldr	r3, [pc, #84]	; (40f48 <pm_system_resume+0x68>)
   40ef2:	0961      	lsrs	r1, r4, #5
   40ef4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   40ef8:	e8d3 1fef 	ldaex	r1, [r3]
   40efc:	ea01 0500 	and.w	r5, r1, r0
   40f00:	e8c3 5fec 	stlex	ip, r5, [r3]
   40f04:	f1bc 0f00 	cmp.w	ip, #0
   40f08:	d1f6      	bne.n	40ef8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   40f0a:	4211      	tst	r1, r2
   40f0c:	d013      	beq.n	40f36 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   40f0e:	4b0f      	ldr	r3, [pc, #60]	; (40f4c <pm_system_resume+0x6c>)
   40f10:	4d0f      	ldr	r5, [pc, #60]	; (40f50 <pm_system_resume+0x70>)
   40f12:	b18b      	cbz	r3, 40f38 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   40f14:	230c      	movs	r3, #12
   40f16:	4363      	muls	r3, r4
   40f18:	18ea      	adds	r2, r5, r3
   40f1a:	7851      	ldrb	r1, [r2, #1]
   40f1c:	5ce8      	ldrb	r0, [r5, r3]
   40f1e:	f003 fbca 	bl	446b6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   40f22:	2000      	movs	r0, #0
   40f24:	f7ff ff9a 	bl	40e5c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   40f28:	230c      	movs	r3, #12
   40f2a:	435c      	muls	r4, r3
   40f2c:	2300      	movs	r3, #0
   40f2e:	192a      	adds	r2, r5, r4
   40f30:	512b      	str	r3, [r5, r4]
   40f32:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   40f36:	bd38      	pop	{r3, r4, r5, pc}
   40f38:	f383 8811 	msr	BASEPRI, r3
   40f3c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   40f40:	e7ef      	b.n	40f22 <pm_system_resume+0x42>
   40f42:	bf00      	nop
   40f44:	20040350 	.word	0x20040350
   40f48:	20040220 	.word	0x20040220
   40f4c:	000446b7 	.word	0x000446b7
   40f50:	20040210 	.word	0x20040210

00040f54 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   40f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   40f58:	4b2f      	ldr	r3, [pc, #188]	; (41018 <pm_system_suspend+0xc4>)
{
   40f5a:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   40f5c:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   40f5e:	ea4f 1854 	mov.w	r8, r4, lsr #5
   40f62:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   40f66:	4b2d      	ldr	r3, [pc, #180]	; (4101c <pm_system_suspend+0xc8>)
   40f68:	4443      	add	r3, r8
   40f6a:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   40f6e:	f004 091f 	and.w	r9, r4, #31
   40f72:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   40f76:	f013 0f01 	tst.w	r3, #1
   40f7a:	4e29      	ldr	r6, [pc, #164]	; (41020 <pm_system_suspend+0xcc>)
   40f7c:	d10a      	bne.n	40f94 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   40f7e:	4601      	mov	r1, r0
   40f80:	4620      	mov	r0, r4
   40f82:	f000 f863 	bl	4104c <pm_policy_next_state>
		if (info != NULL) {
   40f86:	b128      	cbz	r0, 40f94 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   40f88:	c807      	ldmia	r0, {r0, r1, r2}
   40f8a:	230c      	movs	r3, #12
   40f8c:	fb03 6304 	mla	r3, r3, r4, r6
   40f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   40f94:	230c      	movs	r3, #12
   40f96:	4363      	muls	r3, r4
   40f98:	5cf5      	ldrb	r5, [r6, r3]
   40f9a:	18f2      	adds	r2, r6, r3
   40f9c:	b92d      	cbnz	r5, 40faa <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   40f9e:	4620      	mov	r0, r4
   40fa0:	f7ff ff8a 	bl	40eb8 <atomic_clear_bit.constprop.0>
		ret = false;
   40fa4:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   40fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   40faa:	1c7b      	adds	r3, r7, #1
   40fac:	d00f      	beq.n	40fce <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   40fae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   40fb2:	2100      	movs	r1, #0
   40fb4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   40fb8:	481a      	ldr	r0, [pc, #104]	; (41024 <pm_system_suspend+0xd0>)
   40fba:	2300      	movs	r3, #0
   40fbc:	fbec 0105 	umlal	r0, r1, ip, r5
   40fc0:	4a19      	ldr	r2, [pc, #100]	; (41028 <pm_system_suspend+0xd4>)
   40fc2:	f7ff f8c7 	bl	40154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   40fc6:	2101      	movs	r1, #1
   40fc8:	1a38      	subs	r0, r7, r0
   40fca:	f003 ff5b 	bl	44e84 <z_set_timeout_expiry>
	k_sched_lock();
   40fce:	f002 fd9d 	bl	43b0c <k_sched_lock>
	pm_state_notify(true);
   40fd2:	2001      	movs	r0, #1
   40fd4:	f7ff ff42 	bl	40e5c <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   40fd8:	2301      	movs	r3, #1
   40fda:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   40fde:	4b13      	ldr	r3, [pc, #76]	; (4102c <pm_system_suspend+0xd8>)
   40fe0:	4498      	add	r8, r3
   40fe2:	e8d8 3fef 	ldaex	r3, [r8]
   40fe6:	ea43 0309 	orr.w	r3, r3, r9
   40fea:	e8c8 3fe2 	stlex	r2, r3, [r8]
   40fee:	2a00      	cmp	r2, #0
   40ff0:	d1f7      	bne.n	40fe2 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   40ff2:	4b0f      	ldr	r3, [pc, #60]	; (41030 <pm_system_suspend+0xdc>)
   40ff4:	b133      	cbz	r3, 41004 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   40ff6:	230c      	movs	r3, #12
   40ff8:	4363      	muls	r3, r4
   40ffa:	18f2      	adds	r2, r6, r3
   40ffc:	7851      	ldrb	r1, [r2, #1]
   40ffe:	5cf0      	ldrb	r0, [r6, r3]
   41000:	f003 fb4d 	bl	4469e <pm_state_set>
	pm_system_resume();
   41004:	f7ff ff6c 	bl	40ee0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   41008:	4620      	mov	r0, r4
   4100a:	f7ff ff55 	bl	40eb8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   4100e:	f002 ff4d 	bl	43eac <k_sched_unlock>
	bool ret = true;
   41012:	2001      	movs	r0, #1
   41014:	e7c7      	b.n	40fa6 <pm_system_suspend+0x52>
   41016:	bf00      	nop
   41018:	20040350 	.word	0x20040350
   4101c:	2004021c 	.word	0x2004021c
   41020:	20040210 	.word	0x20040210
   41024:	000f423f 	.word	0x000f423f
   41028:	000f4240 	.word	0x000f4240
   4102c:	20040220 	.word	0x20040220
   41030:	0004469f 	.word	0x0004469f

00041034 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   41034:	4b04      	ldr	r3, [pc, #16]	; (41048 <pm_policy_state_lock_is_active+0x14>)
   41036:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4103a:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   4103e:	3800      	subs	r0, #0
   41040:	bf18      	it	ne
   41042:	2001      	movne	r0, #1
   41044:	4770      	bx	lr
   41046:	bf00      	nop
   41048:	20040224 	.word	0x20040224

0004104c <pm_policy_next_state>:
{
   4104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41050:	b085      	sub	sp, #20
   41052:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   41054:	a903      	add	r1, sp, #12
   41056:	f000 f847 	bl	410e8 <pm_state_cpu_get_all>
   4105a:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   4105e:	1e44      	subs	r4, r0, #1
   41060:	f8df 8078 	ldr.w	r8, [pc, #120]	; 410dc <pm_policy_next_state+0x90>
   41064:	f8df a078 	ldr.w	sl, [pc, #120]	; 410e0 <pm_policy_next_state+0x94>
   41068:	b224      	sxth	r4, r4
   4106a:	1c63      	adds	r3, r4, #1
   4106c:	d104      	bne.n	41078 <pm_policy_next_state+0x2c>
	return NULL;
   4106e:	2600      	movs	r6, #0
}
   41070:	4630      	mov	r0, r6
   41072:	b005      	add	sp, #20
   41074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   41078:	9a03      	ldr	r2, [sp, #12]
   4107a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   4107e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   41082:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   41086:	f7ff ffd5 	bl	41034 <pm_policy_state_lock_is_active>
   4108a:	4605      	mov	r5, r0
   4108c:	bb10      	cbnz	r0, 410d4 <pm_policy_next_state+0x88>
   4108e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   41092:	46c4      	mov	ip, r8
   41094:	4629      	mov	r1, r5
   41096:	6870      	ldr	r0, [r6, #4]
   41098:	4652      	mov	r2, sl
   4109a:	fbe0 c109 	umlal	ip, r1, r0, r9
   4109e:	465b      	mov	r3, fp
   410a0:	4660      	mov	r0, ip
   410a2:	f7ff f857 	bl	40154 <__aeabi_uldivmod>
   410a6:	46c4      	mov	ip, r8
   410a8:	4629      	mov	r1, r5
   410aa:	9001      	str	r0, [sp, #4]
   410ac:	68b0      	ldr	r0, [r6, #8]
   410ae:	465b      	mov	r3, fp
   410b0:	fbe0 c109 	umlal	ip, r1, r0, r9
   410b4:	4652      	mov	r2, sl
   410b6:	4660      	mov	r0, ip
   410b8:	f7ff f84c 	bl	40154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   410bc:	4b09      	ldr	r3, [pc, #36]	; (410e4 <pm_policy_next_state+0x98>)
   410be:	681b      	ldr	r3, [r3, #0]
   410c0:	1c59      	adds	r1, r3, #1
   410c2:	d001      	beq.n	410c8 <pm_policy_next_state+0x7c>
   410c4:	4283      	cmp	r3, r0
   410c6:	d905      	bls.n	410d4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   410c8:	1c7a      	adds	r2, r7, #1
   410ca:	d0d1      	beq.n	41070 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   410cc:	9b01      	ldr	r3, [sp, #4]
   410ce:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   410d0:	42b8      	cmp	r0, r7
   410d2:	d9cd      	bls.n	41070 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   410d4:	3c01      	subs	r4, #1
   410d6:	b224      	sxth	r4, r4
   410d8:	e7c7      	b.n	4106a <pm_policy_next_state+0x1e>
   410da:	bf00      	nop
   410dc:	000f423f 	.word	0x000f423f
   410e0:	000f4240 	.word	0x000f4240
   410e4:	20040004 	.word	0x20040004

000410e8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   410e8:	b908      	cbnz	r0, 410ee <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   410ea:	4b02      	ldr	r3, [pc, #8]	; (410f4 <pm_state_cpu_get_all+0xc>)
   410ec:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   410ee:	2000      	movs	r0, #0
   410f0:	4770      	bx	lr
   410f2:	bf00      	nop
   410f4:	000451f8 	.word	0x000451f8

000410f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   410f8:	4901      	ldr	r1, [pc, #4]	; (41100 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   410fa:	2210      	movs	r2, #16
	str	r2, [r1]
   410fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   410fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   41100:	e000ed10 	.word	0xe000ed10

00041104 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   41104:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   41106:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   41108:	f380 8811 	msr	BASEPRI, r0
	isb
   4110c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   41110:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   41114:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   41116:	b662      	cpsie	i
	isb
   41118:	f3bf 8f6f 	isb	sy

	bx	lr
   4111c:	4770      	bx	lr
   4111e:	bf00      	nop

00041120 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   41120:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   41122:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   41124:	f381 8811 	msr	BASEPRI, r1

	wfe
   41128:	bf20      	wfe

	msr	BASEPRI, r0
   4112a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   4112e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   41130:	4770      	bx	lr
   41132:	bf00      	nop

00041134 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   41134:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   41136:	2b00      	cmp	r3, #0
   41138:	db08      	blt.n	4114c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4113a:	2201      	movs	r2, #1
   4113c:	f000 001f 	and.w	r0, r0, #31
   41140:	fa02 f000 	lsl.w	r0, r2, r0
   41144:	4a02      	ldr	r2, [pc, #8]	; (41150 <arch_irq_enable+0x1c>)
   41146:	095b      	lsrs	r3, r3, #5
   41148:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   4114c:	4770      	bx	lr
   4114e:	bf00      	nop
   41150:	e000e100 	.word	0xe000e100

00041154 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   41154:	4b05      	ldr	r3, [pc, #20]	; (4116c <arch_irq_is_enabled+0x18>)
   41156:	0942      	lsrs	r2, r0, #5
   41158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   4115c:	2301      	movs	r3, #1
   4115e:	f000 001f 	and.w	r0, r0, #31
   41162:	fa03 f000 	lsl.w	r0, r3, r0
}
   41166:	4010      	ands	r0, r2
   41168:	4770      	bx	lr
   4116a:	bf00      	nop
   4116c:	e000e100 	.word	0xe000e100

00041170 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   41170:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   41172:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   41174:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   41178:	bfac      	ite	ge
   4117a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   4117e:	4b06      	ldrlt	r3, [pc, #24]	; (41198 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   41180:	ea4f 1141 	mov.w	r1, r1, lsl #5
   41184:	b2c9      	uxtb	r1, r1
   41186:	bfab      	itete	ge
   41188:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   4118c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   41190:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   41194:	5419      	strblt	r1, [r3, r0]
}
   41196:	4770      	bx	lr
   41198:	e000ed14 	.word	0xe000ed14

0004119c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   4119c:	bf30      	wfi
    b z_SysNmiOnReset
   4119e:	f7ff bffd 	b.w	4119c <z_SysNmiOnReset>
   411a2:	bf00      	nop

000411a4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   411a4:	4a0b      	ldr	r2, [pc, #44]	; (411d4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   411a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   411a8:	4b0b      	ldr	r3, [pc, #44]	; (411d8 <z_arm_prep_c+0x34>)
   411aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   411ae:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   411b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   411b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   411b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   411bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   411c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   411c4:	f002 f9f6 	bl	435b4 <z_bss_zero>
	z_data_copy();
   411c8:	f002 ff92 	bl	440f0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   411cc:	f000 f9b2 	bl	41534 <z_arm_interrupt_init>
	z_cstart();
   411d0:	f002 fa30 	bl	43634 <z_cstart>
   411d4:	00040000 	.word	0x00040000
   411d8:	e000ed00 	.word	0xe000ed00

000411dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   411dc:	4a09      	ldr	r2, [pc, #36]	; (41204 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   411de:	490a      	ldr	r1, [pc, #40]	; (41208 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   411e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   411e2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   411e4:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   411e6:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   411e8:	4908      	ldr	r1, [pc, #32]	; (4120c <arch_swap+0x30>)
   411ea:	684b      	ldr	r3, [r1, #4]
   411ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   411f0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   411f2:	2300      	movs	r3, #0
   411f4:	f383 8811 	msr	BASEPRI, r3
   411f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   411fc:	6893      	ldr	r3, [r2, #8]
}
   411fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
   41200:	4770      	bx	lr
   41202:	bf00      	nop
   41204:	20040350 	.word	0x20040350
   41208:	00045318 	.word	0x00045318
   4120c:	e000ed00 	.word	0xe000ed00

00041210 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   41210:	4915      	ldr	r1, [pc, #84]	; (41268 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   41212:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   41214:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   41218:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   4121c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   4121e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   41222:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   41226:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   41228:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   4122c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   41230:	4f0e      	ldr	r7, [pc, #56]	; (4126c <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   41232:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   41236:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   41238:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   4123a:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   4123c:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   41240:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   41242:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   41244:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   41246:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   4124a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   4124e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   41252:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   41256:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   4125a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   4125c:	f003 fa42 	bl	446e4 <configure_builtin_stack_guard>
    pop {r2, lr}
   41260:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   41264:	4770      	bx	lr
   41266:	0000      	.short	0x0000
    ldr r1, =_kernel
   41268:	20040350 	.word	0x20040350
    ldr v4, =_SCS_ICSR
   4126c:	e000ed04 	.word	0xe000ed04

00041270 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   41270:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   41274:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   41276:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   4127a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   4127e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   41280:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   41284:	2902      	cmp	r1, #2
    beq _oops
   41286:	d0ff      	beq.n	41288 <_oops>

00041288 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   41288:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   4128a:	f003 fa1c 	bl	446c6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   4128e:	bd01      	pop	{r0, pc}

00041290 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   41290:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   41294:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   41296:	490c      	ldr	r1, [pc, #48]	; (412c8 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   41298:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   4129c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   4129e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   412a2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   412a6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   412a8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   412ac:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   412b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   412b4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   412b8:	2300      	movs	r3, #0
   412ba:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   412bc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   412c0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   412c2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   412c4:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   412c6:	4770      	bx	lr
   412c8:	0004459d 	.word	0x0004459d

000412cc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   412cc:	4b08      	ldr	r3, [pc, #32]	; (412f0 <arch_switch_to_main_thread+0x24>)
   412ce:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   412d0:	6e43      	ldr	r3, [r0, #100]	; 0x64
   412d2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   412d6:	4610      	mov	r0, r2
   412d8:	f381 8809 	msr	PSP, r1
   412dc:	2100      	movs	r1, #0
   412de:	b663      	cpsie	if
   412e0:	f381 8811 	msr	BASEPRI, r1
   412e4:	f3bf 8f6f 	isb	sy
   412e8:	2200      	movs	r2, #0
   412ea:	2300      	movs	r3, #0
   412ec:	f003 f956 	bl	4459c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   412f0:	20040350 	.word	0x20040350

000412f4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   412f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   412f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   412f8:	4a0b      	ldr	r2, [pc, #44]	; (41328 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   412fa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   412fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   412fe:	bf1e      	ittt	ne
	movne	r1, #0
   41300:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   41302:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   41304:	f003 fce7 	blne	44cd6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   41308:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   4130a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   4130e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   41312:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   41316:	4905      	ldr	r1, [pc, #20]	; (4132c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   41318:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   4131a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   4131c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   4131e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   41322:	4903      	ldr	r1, [pc, #12]	; (41330 <_isr_wrapper+0x3c>)
	bx r1
   41324:	4708      	bx	r1
   41326:	0000      	.short	0x0000
	ldr r2, =_kernel
   41328:	20040350 	.word	0x20040350
	ldr r1, =_sw_isr_table
   4132c:	00044fa4 	.word	0x00044fa4
	ldr r1, =z_arm_int_exit
   41330:	00041335 	.word	0x00041335

00041334 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   41334:	4b04      	ldr	r3, [pc, #16]	; (41348 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   41336:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   41338:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   4133a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   4133c:	d003      	beq.n	41346 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   4133e:	4903      	ldr	r1, [pc, #12]	; (4134c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   41340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   41344:	600a      	str	r2, [r1, #0]

00041346 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   41346:	4770      	bx	lr
	ldr r3, =_kernel
   41348:	20040350 	.word	0x20040350
	ldr r1, =_SCS_ICSR
   4134c:	e000ed04 	.word	0xe000ed04

00041350 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   41350:	4b09      	ldr	r3, [pc, #36]	; (41378 <usage_fault.constprop.0+0x28>)
   41352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   41354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   41356:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   41358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   4135a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   4135c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   4135e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   41360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
   41362:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   41366:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   4136a:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   4136e:	bf18      	it	ne
   41370:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   41372:	629a      	str	r2, [r3, #40]	; 0x28
}
   41374:	4770      	bx	lr
   41376:	bf00      	nop
   41378:	e000ed00 	.word	0xe000ed00

0004137c <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   4137c:	4b0d      	ldr	r3, [pc, #52]	; (413b4 <bus_fault.constprop.0+0x38>)
   4137e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   41380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   41382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   41384:	0592      	lsls	r2, r2, #22
   41386:	d508      	bpl.n	4139a <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
   41388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   4138a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   4138c:	0412      	lsls	r2, r2, #16
   4138e:	d504      	bpl.n	4139a <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   41390:	b118      	cbz	r0, 4139a <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   41392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   41394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   41398:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   4139a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   4139c:	4b05      	ldr	r3, [pc, #20]	; (413b4 <bus_fault.constprop.0+0x38>)
   4139e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   413a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413a2:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   413a4:	bf58      	it	pl
   413a6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   413a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   413ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   413b0:	7008      	strb	r0, [r1, #0]
}
   413b2:	4770      	bx	lr
   413b4:	e000ed00 	.word	0xe000ed00

000413b8 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   413b8:	4b12      	ldr	r3, [pc, #72]	; (41404 <mem_manage_fault.constprop.0+0x4c>)
   413ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   413bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   413be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413c0:	0792      	lsls	r2, r2, #30
   413c2:	d508      	bpl.n	413d6 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   413c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   413c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413c8:	0612      	lsls	r2, r2, #24
   413ca:	d504      	bpl.n	413d6 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   413cc:	b118      	cbz	r0, 413d6 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   413ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   413d4:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   413d6:	4b0b      	ldr	r3, [pc, #44]	; (41404 <mem_manage_fault.constprop.0+0x4c>)
   413d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   413da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   413dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413de:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
   413e0:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   413e4:	bf58      	it	pl
   413e6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   413e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   413ea:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   413ec:	bf42      	ittt	mi
   413ee:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   413f0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   413f4:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   413f6:	4a03      	ldr	r2, [pc, #12]	; (41404 <mem_manage_fault.constprop.0+0x4c>)
   413f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   413fa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   413fe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   41400:	7008      	strb	r0, [r1, #0]
}
   41402:	4770      	bx	lr
   41404:	e000ed00 	.word	0xe000ed00

00041408 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   41408:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   4140a:	4b3e      	ldr	r3, [pc, #248]	; (41504 <z_arm_fault+0xfc>)
{
   4140c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   4140e:	685b      	ldr	r3, [r3, #4]
   41410:	2600      	movs	r6, #0
{
   41412:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   41414:	f3c3 0308 	ubfx	r3, r3, #0, #9
   41418:	f386 8811 	msr	BASEPRI, r6
   4141c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   41420:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   41424:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   41428:	d116      	bne.n	41458 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   4142a:	07d0      	lsls	r0, r2, #31
   4142c:	d414      	bmi.n	41458 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   4142e:	0654      	lsls	r4, r2, #25
   41430:	d403      	bmi.n	4143a <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   41432:	0710      	lsls	r0, r2, #28
   41434:	d404      	bmi.n	41440 <z_arm_fault+0x38>
			*nested_exc = true;
   41436:	2601      	movs	r6, #1
   41438:	e004      	b.n	41444 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   4143a:	f012 0604 	ands.w	r6, r2, #4
   4143e:	d001      	beq.n	41444 <z_arm_fault+0x3c>
			ptr_esf = (z_arch_esf_t *)psp;
   41440:	460d      	mov	r5, r1
	*nested_exc = false;
   41442:	2600      	movs	r6, #0
	*recoverable = false;
   41444:	2200      	movs	r2, #0
	switch (fault) {
   41446:	3b03      	subs	r3, #3
	*recoverable = false;
   41448:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   4144c:	2b03      	cmp	r3, #3
   4144e:	d852      	bhi.n	414f6 <z_arm_fault+0xee>
   41450:	e8df f003 	tbb	[pc, r3]
   41454:	464d4904 	.word	0x464d4904
		return NULL;
   41458:	4635      	mov	r5, r6
   4145a:	e7f3      	b.n	41444 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   4145c:	4b29      	ldr	r3, [pc, #164]	; (41504 <z_arm_fault+0xfc>)
   4145e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   41460:	f014 0402 	ands.w	r4, r4, #2
   41464:	d147      	bne.n	414f6 <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   41466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   41468:	2a00      	cmp	r2, #0
   4146a:	db0a      	blt.n	41482 <z_arm_fault+0x7a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   4146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   4146e:	0052      	lsls	r2, r2, #1
   41470:	d507      	bpl.n	41482 <z_arm_fault+0x7a>
	uint16_t fault_insn = *(ret_addr - 1);
   41472:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   41474:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   41478:	f64d 7202 	movw	r2, #57090	; 0xdf02
   4147c:	4291      	cmp	r1, r2
   4147e:	d118      	bne.n	414b2 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
   41480:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   41482:	f89d 3007 	ldrb.w	r3, [sp, #7]
   41486:	b993      	cbnz	r3, 414ae <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   41488:	2220      	movs	r2, #32
   4148a:	4629      	mov	r1, r5
   4148c:	a802      	add	r0, sp, #8
   4148e:	f003 f96d 	bl	4476c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   41492:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41494:	b38e      	cbz	r6, 414fa <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   41496:	f3c3 0208 	ubfx	r2, r3, #0, #9
   4149a:	b922      	cbnz	r2, 414a6 <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   4149c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   414a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   414a4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   414a6:	4620      	mov	r0, r4
   414a8:	a902      	add	r1, sp, #8
   414aa:	f003 f90a 	bl	446c2 <z_arm_fatal_error>
}
   414ae:	b00a      	add	sp, #40	; 0x28
   414b0:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_MMFSR != 0) {
   414b2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   414b6:	b132      	cbz	r2, 414c6 <z_arm_fault+0xbe>
			reason = mem_manage_fault(esf, 1, recoverable);
   414b8:	2001      	movs	r0, #1
   414ba:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   414be:	f7ff ff7b 	bl	413b8 <mem_manage_fault.constprop.0>
   414c2:	4604      	mov	r4, r0
		break;
   414c4:	e7dd      	b.n	41482 <z_arm_fault+0x7a>
		} else if (SCB_BFSR != 0) {
   414c6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   414ca:	b12a      	cbz	r2, 414d8 <z_arm_fault+0xd0>
			reason = bus_fault(esf, 1, recoverable);
   414cc:	2001      	movs	r0, #1
   414ce:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   414d2:	f7ff ff53 	bl	4137c <bus_fault.constprop.0>
   414d6:	e7f4      	b.n	414c2 <z_arm_fault+0xba>
		} else if (SCB_UFSR != 0) {
   414d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   414da:	b29b      	uxth	r3, r3
   414dc:	2b00      	cmp	r3, #0
   414de:	d0d0      	beq.n	41482 <z_arm_fault+0x7a>
		reason = usage_fault(esf);
   414e0:	f7ff ff36 	bl	41350 <usage_fault.constprop.0>
   414e4:	e7ed      	b.n	414c2 <z_arm_fault+0xba>
		reason = mem_manage_fault(esf, 0, recoverable);
   414e6:	2000      	movs	r0, #0
   414e8:	f10d 0107 	add.w	r1, sp, #7
   414ec:	e7e7      	b.n	414be <z_arm_fault+0xb6>
		reason = bus_fault(esf, 0, recoverable);
   414ee:	2000      	movs	r0, #0
   414f0:	f10d 0107 	add.w	r1, sp, #7
   414f4:	e7ed      	b.n	414d2 <z_arm_fault+0xca>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   414f6:	2400      	movs	r4, #0
   414f8:	e7c3      	b.n	41482 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   414fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   414fe:	f023 0301 	bic.w	r3, r3, #1
   41502:	e7cf      	b.n	414a4 <z_arm_fault+0x9c>
   41504:	e000ed00 	.word	0xe000ed00

00041508 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   41508:	4b04      	ldr	r3, [pc, #16]	; (4151c <z_arm_fault_init+0x14>)
   4150a:	695a      	ldr	r2, [r3, #20]
   4150c:	f042 0210 	orr.w	r2, r2, #16
   41510:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   41512:	695a      	ldr	r2, [r3, #20]
   41514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   41518:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   4151a:	4770      	bx	lr
   4151c:	e000ed00 	.word	0xe000ed00

00041520 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   41520:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   41524:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   41528:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   4152a:	4672      	mov	r2, lr
	bl z_arm_fault
   4152c:	f7ff ff6c 	bl	41408 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   41530:	bd01      	pop	{r0, pc}
   41532:	bf00      	nop

00041534 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   41534:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   41536:	2120      	movs	r1, #32
   41538:	4803      	ldr	r0, [pc, #12]	; (41548 <z_arm_interrupt_init+0x14>)
   4153a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   4153c:	3301      	adds	r3, #1
   4153e:	2b45      	cmp	r3, #69	; 0x45
   41540:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   41544:	d1f9      	bne.n	4153a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   41546:	4770      	bx	lr
   41548:	e000e100 	.word	0xe000e100

0004154c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   4154c:	2000      	movs	r0, #0
    msr CONTROL, r0
   4154e:	f380 8814 	msr	CONTROL, r0
    isb
   41552:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   41556:	2000      	movs	r0, #0
    msr MSPLIM, r0
   41558:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   4155c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   41560:	f003 fcb6 	bl	44ed0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   41564:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   41566:	490e      	ldr	r1, [pc, #56]	; (415a0 <__start+0x54>)
    str r0, [r1]
   41568:	6008      	str	r0, [r1, #0]
    dsb
   4156a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   4156e:	480d      	ldr	r0, [pc, #52]	; (415a4 <__start+0x58>)
    msr msp, r0
   41570:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   41574:	f000 f83e 	bl	415f4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   41578:	2020      	movs	r0, #32
    msr BASEPRI, r0
   4157a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   4157e:	480a      	ldr	r0, [pc, #40]	; (415a8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   41580:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   41584:	1840      	adds	r0, r0, r1
    msr PSP, r0
   41586:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   4158a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   4158e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   41590:	4308      	orrs	r0, r1
    msr CONTROL, r0
   41592:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   41596:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   4159a:	f7ff fe03 	bl	411a4 <z_arm_prep_c>
   4159e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   415a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   415a4:	20040990 	.word	0x20040990
    ldr r0, =z_interrupt_stacks
   415a8:	20040ad0 	.word	0x20040ad0

000415ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   415ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   415b0:	4905      	ldr	r1, [pc, #20]	; (415c8 <sys_arch_reboot+0x1c>)
   415b2:	4b06      	ldr	r3, [pc, #24]	; (415cc <sys_arch_reboot+0x20>)
   415b4:	68ca      	ldr	r2, [r1, #12]
   415b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   415ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   415bc:	60cb      	str	r3, [r1, #12]
   415be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   415c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   415c4:	e7fd      	b.n	415c2 <sys_arch_reboot+0x16>
   415c6:	bf00      	nop
   415c8:	e000ed00 	.word	0xe000ed00
   415cc:	05fa0004 	.word	0x05fa0004

000415d0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   415d0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   415d2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   415d4:	4906      	ldr	r1, [pc, #24]	; (415f0 <z_arm_clear_arm_mpu_config+0x20>)
   415d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   415da:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   415de:	4293      	cmp	r3, r2
   415e0:	d100      	bne.n	415e4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   415e2:	4770      	bx	lr
  mpu->RNR = rnr;
   415e4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   415e8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   415ec:	3301      	adds	r3, #1
   415ee:	e7f6      	b.n	415de <z_arm_clear_arm_mpu_config+0xe>
   415f0:	e000ed00 	.word	0xe000ed00

000415f4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   415f4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   415f6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   415f8:	2400      	movs	r4, #0
   415fa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   415fe:	f7ff ffe7 	bl	415d0 <z_arm_clear_arm_mpu_config>
   41602:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   41604:	f04f 30ff 	mov.w	r0, #4294967295
   41608:	4a0b      	ldr	r2, [pc, #44]	; (41638 <z_arm_init_arch_hw_at_boot+0x44>)
   4160a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   4160e:	3301      	adds	r3, #1
   41610:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   41612:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   41616:	d1f8      	bne.n	4160a <z_arm_init_arch_hw_at_boot+0x16>
   41618:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   4161a:	f04f 30ff 	mov.w	r0, #4294967295
   4161e:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   41622:	3301      	adds	r3, #1
   41624:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   41626:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   4162a:	d1f8      	bne.n	4161e <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   4162c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   4162e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   41632:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   41636:	bd10      	pop	{r4, pc}
   41638:	e000e100 	.word	0xe000e100

0004163c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   4163c:	4b08      	ldr	r3, [pc, #32]	; (41660 <z_impl_k_thread_abort+0x24>)
   4163e:	689b      	ldr	r3, [r3, #8]
   41640:	4283      	cmp	r3, r0
   41642:	d10b      	bne.n	4165c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41644:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   41648:	b143      	cbz	r3, 4165c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   4164a:	4b06      	ldr	r3, [pc, #24]	; (41664 <z_impl_k_thread_abort+0x28>)
   4164c:	685a      	ldr	r2, [r3, #4]
   4164e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   41652:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   41654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   41656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   4165a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   4165c:	f002 bcf6 	b.w	4404c <z_thread_abort>
   41660:	20040350 	.word	0x20040350
   41664:	e000ed00 	.word	0xe000ed00

00041668 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   41668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   4166a:	4c09      	ldr	r4, [pc, #36]	; (41690 <z_arm_configure_static_mpu_regions+0x28>)
   4166c:	4a09      	ldr	r2, [pc, #36]	; (41694 <z_arm_configure_static_mpu_regions+0x2c>)
   4166e:	4623      	mov	r3, r4
   41670:	2101      	movs	r1, #1
   41672:	4809      	ldr	r0, [pc, #36]	; (41698 <z_arm_configure_static_mpu_regions+0x30>)
   41674:	f000 f8f2 	bl	4185c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   41678:	2300      	movs	r3, #0
   4167a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   4167c:	4b07      	ldr	r3, [pc, #28]	; (4169c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   4167e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   41680:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   41682:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   41684:	9301      	str	r3, [sp, #4]
   41686:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   41688:	f000 f8f2 	bl	41870 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   4168c:	b004      	add	sp, #16
   4168e:	bd10      	pop	{r4, pc}
   41690:	20080000 	.word	0x20080000
   41694:	20040000 	.word	0x20040000
   41698:	000451f8 	.word	0x000451f8
   4169c:	200400e0 	.word	0x200400e0

000416a0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   416a0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   416a2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   416a4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   416a6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   416aa:	f004 031f 	and.w	r3, r4, #31
   416ae:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   416b0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   416b2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   416b4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   416b8:	4905      	ldr	r1, [pc, #20]	; (416d0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   416ba:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   416be:	f043 0301 	orr.w	r3, r3, #1
   416c2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   416c6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   416ca:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   416ce:	bd10      	pop	{r4, pc}
   416d0:	e000ed00 	.word	0xe000ed00

000416d4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   416d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   416d8:	460f      	mov	r7, r1
   416da:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   416dc:	4606      	mov	r6, r0
   416de:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   416e2:	4d52      	ldr	r5, [pc, #328]	; (4182c <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   416e4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   416e6:	45b8      	cmp	r8, r7
   416e8:	da09      	bge.n	416fe <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
   416ea:	f8d6 9004 	ldr.w	r9, [r6, #4]
   416ee:	f1b9 0f00 	cmp.w	r9, #0
   416f2:	d03a      	beq.n	4176a <mpu_configure_regions_and_partition.constprop.0+0x96>
		&&
   416f4:	f1b9 0f1f 	cmp.w	r9, #31
   416f8:	d805      	bhi.n	41706 <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   416fa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   416fe:	4620      	mov	r0, r4
   41700:	b005      	add	sp, #20
   41702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   41706:	f019 0f1f 	tst.w	r9, #31
   4170a:	d1f6      	bne.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
   4170c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   41710:	f01a 0f1f 	tst.w	sl, #31
   41714:	d1f1      	bne.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   41716:	4650      	mov	r0, sl
   41718:	f002 ffea 	bl	446f0 <arm_cmse_mpu_region_get>
   4171c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   4171e:	eb09 000a 	add.w	r0, r9, sl
   41722:	3801      	subs	r0, #1
   41724:	f002 ffe4 	bl	446f0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   41728:	4583      	cmp	fp, r0
   4172a:	d1e6      	bne.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
   4172c:	f11b 0f16 	cmn.w	fp, #22
   41730:	d0e3      	beq.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
   41732:	455c      	cmp	r4, fp
   41734:	dde1      	ble.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
   41736:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   4173a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   4173e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   41742:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   41746:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   4174a:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   4174e:	e9d6 3200 	ldrd	r3, r2, [r6]
   41752:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   41754:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   41756:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   4175a:	d11e      	bne.n	4179a <mpu_configure_regions_and_partition.constprop.0+0xc6>
   4175c:	45ca      	cmp	sl, r9
   4175e:	d108      	bne.n	41772 <mpu_configure_regions_and_partition.constprop.0+0x9e>
			mpu_configure_region(u_reg_index, &regions[i]);
   41760:	4631      	mov	r1, r6
   41762:	fa5f f08b 	uxtb.w	r0, fp
   41766:	f002 ffcc 	bl	44702 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   4176a:	f108 0801 	add.w	r8, r8, #1
   4176e:	360c      	adds	r6, #12
   41770:	e7b9      	b.n	416e6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   41772:	4631      	mov	r1, r6
	MPU->RNR = index;
   41774:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   41778:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   4177c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   41780:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   41784:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   41786:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   4178a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   4178c:	f002 ffb9 	bl	44702 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   41790:	f110 0f16 	cmn.w	r0, #22
   41794:	d0b1      	beq.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
   41796:	1c44      	adds	r4, r0, #1
   41798:	e7e7      	b.n	4176a <mpu_configure_regions_and_partition.constprop.0+0x96>
				regions[i].start - 1);
   4179a:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   4179c:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
   4179e:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   417a0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   417a4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   417a8:	d108      	bne.n	417bc <mpu_configure_regions_and_partition.constprop.0+0xe8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   417aa:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   417ae:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   417b0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   417b4:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   417b6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   417ba:	e7e7      	b.n	4178c <mpu_configure_regions_and_partition.constprop.0+0xb8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   417bc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   417c0:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   417c4:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   417c6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   417ca:	4631      	mov	r1, r6
   417cc:	f002 ff99 	bl	44702 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   417d0:	f110 0f16 	cmn.w	r0, #22
   417d4:	d091      	beq.n	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
   417d6:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   417da:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   417de:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   417e2:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   417e6:	f362 0304 	bfi	r3, r2, #0, #5
   417ea:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   417ee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   417f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   417f6:	085b      	lsrs	r3, r3, #1
   417f8:	f363 1247 	bfi	r2, r3, #5, #3
   417fc:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   41800:	e9d6 3200 	ldrd	r3, r2, [r6]
   41804:	4413      	add	r3, r2
   41806:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   41808:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   4180c:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   4180e:	4453      	add	r3, sl
   41810:	eba3 0309 	sub.w	r3, r3, r9
   41814:	b2c8      	uxtb	r0, r1
   41816:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   4181a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   4181c:	9303      	str	r3, [sp, #12]
   4181e:	f63f af6c 	bhi.w	416fa <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   41822:	4669      	mov	r1, sp
   41824:	f7ff ff3c 	bl	416a0 <region_init>
   41828:	e7b5      	b.n	41796 <mpu_configure_regions_and_partition.constprop.0+0xc2>
   4182a:	bf00      	nop
   4182c:	e000ed00 	.word	0xe000ed00

00041830 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   41830:	2205      	movs	r2, #5
   41832:	4b04      	ldr	r3, [pc, #16]	; (41844 <arm_core_mpu_enable+0x14>)
   41834:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   41838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   4183c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   41840:	4770      	bx	lr
   41842:	bf00      	nop
   41844:	e000ed00 	.word	0xe000ed00

00041848 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   41848:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   4184c:	2200      	movs	r2, #0
   4184e:	4b02      	ldr	r3, [pc, #8]	; (41858 <arm_core_mpu_disable+0x10>)
   41850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   41854:	4770      	bx	lr
   41856:	bf00      	nop
   41858:	e000ed00 	.word	0xe000ed00

0004185c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   4185c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   4185e:	4c03      	ldr	r4, [pc, #12]	; (4186c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   41860:	7822      	ldrb	r2, [r4, #0]
   41862:	f7ff ff37 	bl	416d4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   41866:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   41868:	bd10      	pop	{r4, pc}
   4186a:	bf00      	nop
   4186c:	20040388 	.word	0x20040388

00041870 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   41870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41874:	4d29      	ldr	r5, [pc, #164]	; (4191c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   41876:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   41878:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   4187a:	f04f 0800 	mov.w	r8, #0
   4187e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   41880:	4f27      	ldr	r7, [pc, #156]	; (41920 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   41882:	45d0      	cmp	r8, sl
   41884:	da1b      	bge.n	418be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   41886:	f8d6 9004 	ldr.w	r9, [r6, #4]
   4188a:	f1b9 0f00 	cmp.w	r9, #0
   4188e:	d03f      	beq.n	41910 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   41890:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   41892:	4608      	mov	r0, r1
   41894:	9101      	str	r1, [sp, #4]
   41896:	f002 ff2b 	bl	446f0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   4189a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   4189c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   4189e:	eb09 0001 	add.w	r0, r9, r1
   418a2:	3801      	subs	r0, #1
   418a4:	f002 ff24 	bl	446f0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   418a8:	4284      	cmp	r4, r0
   418aa:	f04f 0214 	mov.w	r2, #20
   418ae:	4b1d      	ldr	r3, [pc, #116]	; (41924 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   418b0:	d008      	beq.n	418c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   418b2:	f06f 0315 	mvn.w	r3, #21
   418b6:	fb02 f808 	mul.w	r8, r2, r8
   418ba:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   418be:	b003      	add	sp, #12
   418c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   418c4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   418c8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   418ca:	d0f8      	beq.n	418be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   418cc:	7819      	ldrb	r1, [r3, #0]
   418ce:	42a1      	cmp	r1, r4
   418d0:	ddf5      	ble.n	418be <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   418d2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   418d6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   418da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   418de:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   418e2:	f100 0108 	add.w	r1, r0, #8
   418e6:	7b00      	ldrb	r0, [r0, #12]
   418e8:	f364 0004 	bfi	r0, r4, #0, #5
   418ec:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   418ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   418f2:	790c      	ldrb	r4, [r1, #4]
   418f4:	0840      	lsrs	r0, r0, #1
   418f6:	f360 1447 	bfi	r4, r0, #5, #3
   418fa:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   418fc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   41900:	f021 011f 	bic.w	r1, r1, #31
   41904:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   41906:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   4190a:	f021 011f 	bic.w	r1, r1, #31
   4190e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   41910:	f108 0801 	add.w	r8, r8, #1
   41914:	3514      	adds	r5, #20
   41916:	360c      	adds	r6, #12
   41918:	e7b3      	b.n	41882 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   4191a:	bf00      	nop
   4191c:	20040240 	.word	0x20040240
   41920:	e000ed00 	.word	0xe000ed00
   41924:	20040388 	.word	0x20040388

00041928 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   41928:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   4192a:	4d0e      	ldr	r5, [pc, #56]	; (41964 <z_arm_mpu_init+0x3c>)
   4192c:	682c      	ldr	r4, [r5, #0]
   4192e:	2c08      	cmp	r4, #8
   41930:	d815      	bhi.n	4195e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   41932:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   41934:	f7ff ff88 	bl	41848 <arm_core_mpu_disable>
	MPU->MAIR0 =
   41938:	4b0b      	ldr	r3, [pc, #44]	; (41968 <z_arm_mpu_init+0x40>)
   4193a:	4a0c      	ldr	r2, [pc, #48]	; (4196c <z_arm_mpu_init+0x44>)
   4193c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   41940:	4284      	cmp	r4, r0
   41942:	d105      	bne.n	41950 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   41944:	4b0a      	ldr	r3, [pc, #40]	; (41970 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   41946:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   41948:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   4194a:	f7ff ff71 	bl	41830 <arm_core_mpu_enable>
}
   4194e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   41950:	6869      	ldr	r1, [r5, #4]
   41952:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   41956:	f7ff fea3 	bl	416a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   4195a:	3001      	adds	r0, #1
   4195c:	e7f0      	b.n	41940 <z_arm_mpu_init+0x18>
		return -1;
   4195e:	f04f 30ff 	mov.w	r0, #4294967295
   41962:	e7f4      	b.n	4194e <z_arm_mpu_init+0x26>
   41964:	00045204 	.word	0x00045204
   41968:	e000ed00 	.word	0xe000ed00
   4196c:	0044ffaa 	.word	0x0044ffaa
   41970:	20040388 	.word	0x20040388

00041974 <_exit>:

#include <stdlib.h>
#include <zephyr.h>

void _exit(int status)
{
   41974:	b508      	push	{r3, lr}
	printk("exit\n");
   41976:	4802      	ldr	r0, [pc, #8]	; (41980 <_exit+0xc>)
   41978:	f002 fd58 	bl	4442c <printk>
	while (1) {
   4197c:	e7fe      	b.n	4197c <_exit+0x8>
   4197e:	bf00      	nop
   41980:	0004533c 	.word	0x0004533c

00041984 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   41984:	4b01      	ldr	r3, [pc, #4]	; (4198c <__stdout_hook_install+0x8>)
   41986:	6018      	str	r0, [r3, #0]
}
   41988:	4770      	bx	lr
   4198a:	bf00      	nop
   4198c:	20040008 	.word	0x20040008

00041990 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   41990:	4b08      	ldr	r3, [pc, #32]	; (419b4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   41992:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   41994:	1ac3      	subs	r3, r0, r3
{
   41996:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   41998:	4907      	ldr	r1, [pc, #28]	; (419b8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   4199a:	109b      	asrs	r3, r3, #2
{
   4199c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4199e:	4359      	muls	r1, r3
   419a0:	2240      	movs	r2, #64	; 0x40
   419a2:	4806      	ldr	r0, [pc, #24]	; (419bc <onoff_stop+0x2c>)
   419a4:	f002 ff15 	bl	447d2 <stop>
	notify(mgr, res);
   419a8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   419aa:	4601      	mov	r1, r0
	notify(mgr, res);
   419ac:	4620      	mov	r0, r4
}
   419ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   419b2:	4718      	bx	r3
   419b4:	20040264 	.word	0x20040264
   419b8:	b6db6db7 	.word	0xb6db6db7
   419bc:	00044f2c 	.word	0x00044f2c

000419c0 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419c0:	2340      	movs	r3, #64	; 0x40
{
   419c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   419c4:	4c0b      	ldr	r4, [pc, #44]	; (419f4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419c6:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   419c8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419ca:	460b      	mov	r3, r1
{
   419cc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419ce:	490a      	ldr	r1, [pc, #40]	; (419f8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   419d0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419d2:	4361      	muls	r1, r4
{
   419d4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   419d6:	4a09      	ldr	r2, [pc, #36]	; (419fc <onoff_start+0x3c>)
   419d8:	4809      	ldr	r0, [pc, #36]	; (41a00 <onoff_start+0x40>)
   419da:	f002 ff26 	bl	4482a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   419de:	1e01      	subs	r1, r0, #0
   419e0:	da05      	bge.n	419ee <onoff_start+0x2e>
		notify(mgr, err);
   419e2:	4630      	mov	r0, r6
   419e4:	462b      	mov	r3, r5
	}
}
   419e6:	b002      	add	sp, #8
   419e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   419ec:	4718      	bx	r3
}
   419ee:	b002      	add	sp, #8
   419f0:	bd70      	pop	{r4, r5, r6, pc}
   419f2:	bf00      	nop
   419f4:	20040264 	.word	0x20040264
   419f8:	b6db6db7 	.word	0xb6db6db7
   419fc:	0004489b 	.word	0x0004489b
   41a00:	00044f2c 	.word	0x00044f2c

00041a04 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   41a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   41a08:	2200      	movs	r2, #0
   41a0a:	2101      	movs	r1, #1
{
   41a0c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   41a0e:	2005      	movs	r0, #5
   41a10:	f7ff fbae 	bl	41170 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   41a14:	4811      	ldr	r0, [pc, #68]	; (41a5c <clk_init+0x58>)
   41a16:	f000 ffc5 	bl	429a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   41a1a:	4b11      	ldr	r3, [pc, #68]	; (41a60 <clk_init+0x5c>)
   41a1c:	4298      	cmp	r0, r3
   41a1e:	d119      	bne.n	41a54 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   41a20:	f000 ffd0 	bl	429c4 <nrfx_clock_enable>
   41a24:	2400      	movs	r4, #0
	return &data->mgr[type];
   41a26:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   41a2a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   41a2c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 41a64 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   41a30:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   41a32:	4649      	mov	r1, r9
   41a34:	fb08 5004 	mla	r0, r8, r4, r5
   41a38:	f002 fd54 	bl	444e4 <onoff_manager_init>
		if (err < 0) {
   41a3c:	2800      	cmp	r0, #0
   41a3e:	db07      	blt.n	41a50 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   41a40:	2301      	movs	r3, #1
   41a42:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
   41a46:	441c      	add	r4, r3
   41a48:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   41a4a:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
   41a4c:	d1f0      	bne.n	41a30 <clk_init+0x2c>
	}

	return 0;
   41a4e:	2000      	movs	r0, #0
}
   41a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   41a54:	f06f 0004 	mvn.w	r0, #4
   41a58:	e7fa      	b.n	41a50 <clk_init+0x4c>
   41a5a:	bf00      	nop
   41a5c:	00041a9d 	.word	0x00041a9d
   41a60:	0bad0000 	.word	0x0bad0000
   41a64:	00045264 	.word	0x00045264

00041a68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   41a68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   41a6a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   41a6c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   41a6e:	434b      	muls	r3, r1
   41a70:	4808      	ldr	r0, [pc, #32]	; (41a94 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   41a72:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   41a74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   41a76:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   41a78:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   41a7c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   41a7e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   41a80:	f002 fe94 	bl	447ac <set_on_state>
	if (callback) {
   41a84:	b12d      	cbz	r5, 41a92 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   41a86:	4632      	mov	r2, r6
   41a88:	462b      	mov	r3, r5
}
   41a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   41a8e:	4802      	ldr	r0, [pc, #8]	; (41a98 <clkstarted_handle.constprop.0+0x30>)
   41a90:	4718      	bx	r3
}
   41a92:	bd70      	pop	{r4, r5, r6, pc}
   41a94:	20040264 	.word	0x20040264
   41a98:	00044f2c 	.word	0x00044f2c

00041a9c <clock_event_handler>:
	switch (event) {
   41a9c:	2805      	cmp	r0, #5
   41a9e:	d811      	bhi.n	41ac4 <clock_event_handler+0x28>
   41aa0:	e8df f000 	tbb	[pc, r0]
   41aa4:	10100e03 	.word	0x10100e03
   41aa8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   41aaa:	4b07      	ldr	r3, [pc, #28]	; (41ac8 <clock_event_handler+0x2c>)
   41aac:	6f98      	ldr	r0, [r3, #120]	; 0x78
   41aae:	f010 0007 	ands.w	r0, r0, #7
   41ab2:	d107      	bne.n	41ac4 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   41ab4:	f7ff bfd8 	b.w	41a68 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   41ab8:	2002      	movs	r0, #2
   41aba:	e7fb      	b.n	41ab4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   41abc:	2003      	movs	r0, #3
   41abe:	e7f9      	b.n	41ab4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   41ac0:	2001      	movs	r0, #1
   41ac2:	e7f7      	b.n	41ab4 <clock_event_handler+0x18>
}
   41ac4:	4770      	bx	lr
   41ac6:	bf00      	nop
   41ac8:	20040264 	.word	0x20040264

00041acc <generic_hfclk_start>:
{
   41acc:	b508      	push	{r3, lr}
	__asm__ volatile(
   41ace:	f04f 0320 	mov.w	r3, #32
   41ad2:	f3ef 8111 	mrs	r1, BASEPRI
   41ad6:	f383 8812 	msr	BASEPRI_MAX, r3
   41ada:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   41ade:	4a11      	ldr	r2, [pc, #68]	; (41b24 <generic_hfclk_start+0x58>)
   41ae0:	6813      	ldr	r3, [r2, #0]
   41ae2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   41ae6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   41aea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   41aec:	d00b      	beq.n	41b06 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   41aee:	4a0e      	ldr	r2, [pc, #56]	; (41b28 <generic_hfclk_start+0x5c>)
   41af0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   41af4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   41af8:	f013 0301 	ands.w	r3, r3, #1
   41afc:	d003      	beq.n	41b06 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   41afe:	480b      	ldr	r0, [pc, #44]	; (41b2c <generic_hfclk_start+0x60>)
   41b00:	f002 fe54 	bl	447ac <set_on_state>
			already_started = true;
   41b04:	2301      	movs	r3, #1
	__asm__ volatile(
   41b06:	f381 8811 	msr	BASEPRI, r1
   41b0a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   41b0e:	b123      	cbz	r3, 41b1a <generic_hfclk_start+0x4e>
}
   41b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   41b14:	2000      	movs	r0, #0
   41b16:	f7ff bfa7 	b.w	41a68 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   41b1a:	2001      	movs	r0, #1
}
   41b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   41b20:	f000 bf64 	b.w	429ec <nrfx_clock_start>
   41b24:	20040304 	.word	0x20040304
   41b28:	40005000 	.word	0x40005000
   41b2c:	200402dc 	.word	0x200402dc

00041b30 <api_blocking_start>:
{
   41b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   41b32:	2200      	movs	r2, #0
   41b34:	2301      	movs	r3, #1
   41b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   41b3a:	466b      	mov	r3, sp
   41b3c:	4a08      	ldr	r2, [pc, #32]	; (41b60 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   41b3e:	f8cd d000 	str.w	sp, [sp]
   41b42:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   41b46:	f002 fea1 	bl	4488c <api_start>
	if (err < 0) {
   41b4a:	2800      	cmp	r0, #0
   41b4c:	db05      	blt.n	41b5a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   41b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   41b52:	2300      	movs	r3, #0
   41b54:	4668      	mov	r0, sp
   41b56:	f001 ff59 	bl	43a0c <z_impl_k_sem_take>
}
   41b5a:	b005      	add	sp, #20
   41b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   41b60:	000448d1 	.word	0x000448d1

00041b64 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   41b64:	4b07      	ldr	r3, [pc, #28]	; (41b84 <generic_hfclk_stop+0x20>)
   41b66:	e8d3 2fef 	ldaex	r2, [r3]
   41b6a:	f022 0102 	bic.w	r1, r2, #2
   41b6e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   41b72:	2800      	cmp	r0, #0
   41b74:	d1f7      	bne.n	41b66 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   41b76:	07d3      	lsls	r3, r2, #31
   41b78:	d402      	bmi.n	41b80 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   41b7a:	2001      	movs	r0, #1
   41b7c:	f003 b81e 	b.w	44bbc <nrfx_clock_stop>
}
   41b80:	4770      	bx	lr
   41b82:	bf00      	nop
   41b84:	20040304 	.word	0x20040304

00041b88 <z_nrf_clock_control_lf_on>:
{
   41b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   41b8c:	2201      	movs	r2, #1
   41b8e:	4607      	mov	r7, r0
   41b90:	4935      	ldr	r1, [pc, #212]	; (41c68 <z_nrf_clock_control_lf_on+0xe0>)
   41b92:	e8d1 3fef 	ldaex	r3, [r1]
   41b96:	e8c1 2fe0 	stlex	r0, r2, [r1]
   41b9a:	2800      	cmp	r0, #0
   41b9c:	d1f9      	bne.n	41b92 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   41b9e:	b933      	cbnz	r3, 41bae <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   41ba0:	4932      	ldr	r1, [pc, #200]	; (41c6c <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   41ba2:	4833      	ldr	r0, [pc, #204]	; (41c70 <z_nrf_clock_control_lf_on+0xe8>)
   41ba4:	604b      	str	r3, [r1, #4]
   41ba6:	60cb      	str	r3, [r1, #12]
   41ba8:	608a      	str	r2, [r1, #8]
   41baa:	f002 fcae 	bl	4450a <onoff_request>
	switch (start_mode) {
   41bae:	1e7b      	subs	r3, r7, #1
   41bb0:	2b01      	cmp	r3, #1
   41bb2:	d82d      	bhi.n	41c10 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   41bb4:	2f01      	cmp	r7, #1
   41bb6:	d106      	bne.n	41bc6 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   41bb8:	4b2e      	ldr	r3, [pc, #184]	; (41c74 <z_nrf_clock_control_lf_on+0xec>)
   41bba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   41bbe:	f003 0303 	and.w	r3, r3, #3
   41bc2:	2b02      	cmp	r3, #2
   41bc4:	d024      	beq.n	41c10 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   41bc6:	f003 f880 	bl	44cca <k_is_in_isr>
   41bca:	4604      	mov	r4, r0
   41bcc:	b918      	cbnz	r0, 41bd6 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   41bce:	4b2a      	ldr	r3, [pc, #168]	; (41c78 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   41bd0:	781b      	ldrb	r3, [r3, #0]
   41bd2:	2b00      	cmp	r3, #0
   41bd4:	d141      	bne.n	41c5a <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
   41bd6:	f04f 0320 	mov.w	r3, #32
   41bda:	f3ef 8611 	mrs	r6, BASEPRI
   41bde:	f383 8812 	msr	BASEPRI_MAX, r3
   41be2:	f3bf 8f6f 	isb	sy
   41be6:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   41be8:	4d22      	ldr	r5, [pc, #136]	; (41c74 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   41bea:	f8df 8090 	ldr.w	r8, [pc, #144]	; 41c7c <z_nrf_clock_control_lf_on+0xf4>
   41bee:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   41bf2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   41bf6:	03d2      	lsls	r2, r2, #15
   41bf8:	d50c      	bpl.n	41c14 <z_nrf_clock_control_lf_on+0x8c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   41bfa:	f003 0303 	and.w	r3, r3, #3
   41bfe:	2b02      	cmp	r3, #2
   41c00:	d001      	beq.n	41c06 <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   41c02:	2f01      	cmp	r7, #1
   41c04:	d106      	bne.n	41c14 <z_nrf_clock_control_lf_on+0x8c>
	if (isr_mode) {
   41c06:	b324      	cbz	r4, 41c52 <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
   41c08:	f386 8811 	msr	BASEPRI, r6
   41c0c:	f3bf 8f6f 	isb	sy
}
   41c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   41c14:	b1c4      	cbz	r4, 41c48 <z_nrf_clock_control_lf_on+0xc0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   41c16:	4630      	mov	r0, r6
   41c18:	f7ff fa82 	bl	41120 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   41c1c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   41c20:	b2db      	uxtb	r3, r3
   41c22:	2b01      	cmp	r3, #1
   41c24:	d1e3      	bne.n	41bee <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   41c26:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   41c2a:	2a00      	cmp	r2, #0
   41c2c:	d0df      	beq.n	41bee <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   41c2e:	2200      	movs	r2, #0
   41c30:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   41c34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   41c38:	2202      	movs	r2, #2
   41c3a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   41c3e:	2220      	movs	r2, #32
   41c40:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   41c44:	60ab      	str	r3, [r5, #8]
}
   41c46:	e7d2      	b.n	41bee <z_nrf_clock_control_lf_on+0x66>
	return z_impl_k_sleep(timeout);
   41c48:	2100      	movs	r1, #0
   41c4a:	2021      	movs	r0, #33	; 0x21
   41c4c:	f002 f9de 	bl	4400c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   41c50:	e7e4      	b.n	41c1c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENSET = mask;
   41c52:	2302      	movs	r3, #2
   41c54:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   41c58:	e7da      	b.n	41c10 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
   41c5a:	2202      	movs	r2, #2
   41c5c:	4b05      	ldr	r3, [pc, #20]	; (41c74 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
   41c5e:	4606      	mov	r6, r0
   41c60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   41c64:	e7c0      	b.n	41be8 <z_nrf_clock_control_lf_on+0x60>
   41c66:	bf00      	nop
   41c68:	20040308 	.word	0x20040308
   41c6c:	20040254 	.word	0x20040254
   41c70:	20040280 	.word	0x20040280
   41c74:	40005000 	.word	0x40005000
   41c78:	20040589 	.word	0x20040589
   41c7c:	e000e100 	.word	0xe000e100

00041c80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   41c80:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   41c82:	4808      	ldr	r0, [pc, #32]	; (41ca4 <uart_console_init+0x24>)
   41c84:	4b08      	ldr	r3, [pc, #32]	; (41ca8 <uart_console_init+0x28>)
   41c86:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   41c88:	f002 fff6 	bl	44c78 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   41c8c:	b138      	cbz	r0, 41c9e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   41c8e:	4807      	ldr	r0, [pc, #28]	; (41cac <uart_console_init+0x2c>)
   41c90:	f7ff fe78 	bl	41984 <__stdout_hook_install>
	__printk_hook_install(console_out);
   41c94:	4805      	ldr	r0, [pc, #20]	; (41cac <uart_console_init+0x2c>)
   41c96:	f7fe fc19 	bl	404cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   41c9a:	2000      	movs	r0, #0
}
   41c9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   41c9e:	f06f 0012 	mvn.w	r0, #18
   41ca2:	e7fb      	b.n	41c9c <uart_console_init+0x1c>
   41ca4:	00044f8c 	.word	0x00044f8c
   41ca8:	2004030c 	.word	0x2004030c
   41cac:	00041cb1 	.word	0x00041cb1

00041cb0 <console_out>:
	if ('\n' == c) {
   41cb0:	280a      	cmp	r0, #10
{
   41cb2:	b538      	push	{r3, r4, r5, lr}
   41cb4:	4604      	mov	r4, r0
   41cb6:	4d07      	ldr	r5, [pc, #28]	; (41cd4 <console_out+0x24>)
	if ('\n' == c) {
   41cb8:	d104      	bne.n	41cc4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   41cba:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   41cbc:	6883      	ldr	r3, [r0, #8]
   41cbe:	210d      	movs	r1, #13
   41cc0:	685b      	ldr	r3, [r3, #4]
   41cc2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   41cc4:	6828      	ldr	r0, [r5, #0]
   41cc6:	6883      	ldr	r3, [r0, #8]
   41cc8:	b2e1      	uxtb	r1, r4
   41cca:	685b      	ldr	r3, [r3, #4]
   41ccc:	4798      	blx	r3
}
   41cce:	4620      	mov	r0, r4
   41cd0:	bd38      	pop	{r3, r4, r5, pc}
   41cd2:	bf00      	nop
   41cd4:	2004030c 	.word	0x2004030c

00041cd8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   41cd8:	b530      	push	{r4, r5, lr}
	return port->config;
   41cda:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   41cdc:	f001 051f 	and.w	r5, r1, #31
   41ce0:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   41ce2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   41ce6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   41cea:	b085      	sub	sp, #20
   41cec:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   41cf0:	d104      	bne.n	41cfc <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   41cf2:	4628      	mov	r0, r5
   41cf4:	f001 f974 	bl	42fe0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   41cf8:	2000      	movs	r0, #0
   41cfa:	e031      	b.n	41d60 <gpio_nrfx_pin_interrupt_configure+0x88>
	if (mode == GPIO_INT_MODE_LEVEL) {
   41cfc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   41d00:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   41d04:	d12e      	bne.n	41d64 <gpio_nrfx_pin_interrupt_configure+0x8c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   41d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   41d0a:	bf0c      	ite	eq
   41d0c:	2304      	moveq	r3, #4
   41d0e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   41d10:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   41d14:	6883      	ldr	r3, [r0, #8]
   41d16:	fa23 f101 	lsr.w	r1, r3, r1
   41d1a:	07c9      	lsls	r1, r1, #31
   41d1c:	d42e      	bmi.n	41d7c <gpio_nrfx_pin_interrupt_configure+0xa4>
   41d1e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   41d22:	d12b      	bne.n	41d7c <gpio_nrfx_pin_interrupt_configure+0xa4>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   41d24:	4a1e      	ldr	r2, [pc, #120]	; (41da0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   41d26:	481f      	ldr	r0, [pc, #124]	; (41da4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   41d28:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   41d2a:	2901      	cmp	r1, #1
   41d2c:	bf08      	it	eq
   41d2e:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   41d30:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   41d34:	3380      	adds	r3, #128	; 0x80
   41d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   41d3a:	07db      	lsls	r3, r3, #31
   41d3c:	d41e      	bmi.n	41d7c <gpio_nrfx_pin_interrupt_configure+0xa4>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   41d3e:	f10d 0407 	add.w	r4, sp, #7
   41d42:	4621      	mov	r1, r4
   41d44:	4628      	mov	r0, r5
   41d46:	f001 f8b1 	bl	42eac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   41d4a:	4b17      	ldr	r3, [pc, #92]	; (41da8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   41d4c:	4298      	cmp	r0, r3
   41d4e:	d114      	bne.n	41d7a <gpio_nrfx_pin_interrupt_configure+0xa2>
			err = nrfx_gpiote_channel_alloc(&ch);
   41d50:	4620      	mov	r0, r4
   41d52:	f001 f8f9 	bl	42f48 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   41d56:	4b15      	ldr	r3, [pc, #84]	; (41dac <gpio_nrfx_pin_interrupt_configure+0xd4>)
   41d58:	4298      	cmp	r0, r3
   41d5a:	d00e      	beq.n	41d7a <gpio_nrfx_pin_interrupt_configure+0xa2>
				return -ENOMEM;
   41d5c:	f06f 000b 	mvn.w	r0, #11
}
   41d60:	b005      	add	sp, #20
   41d62:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   41d64:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   41d68:	d005      	beq.n	41d76 <gpio_nrfx_pin_interrupt_configure+0x9e>
   41d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   41d6e:	bf0c      	ite	eq
   41d70:	2302      	moveq	r3, #2
   41d72:	2301      	movne	r3, #1
   41d74:	e7cc      	b.n	41d10 <gpio_nrfx_pin_interrupt_configure+0x38>
   41d76:	2303      	movs	r3, #3
   41d78:	e7ca      	b.n	41d10 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   41d7a:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   41d7c:	2300      	movs	r3, #0
   41d7e:	4628      	mov	r0, r5
   41d80:	4619      	mov	r1, r3
   41d82:	aa02      	add	r2, sp, #8
   41d84:	f000 ff6c 	bl	42c60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   41d88:	4b08      	ldr	r3, [pc, #32]	; (41dac <gpio_nrfx_pin_interrupt_configure+0xd4>)
   41d8a:	4298      	cmp	r0, r3
   41d8c:	d104      	bne.n	41d98 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   41d8e:	2101      	movs	r1, #1
   41d90:	4628      	mov	r0, r5
   41d92:	f001 f8df 	bl	42f54 <nrfx_gpiote_trigger_enable>
   41d96:	e7af      	b.n	41cf8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   41d98:	f06f 0004 	mvn.w	r0, #4
   41d9c:	e7e0      	b.n	41d60 <gpio_nrfx_pin_interrupt_configure+0x88>
   41d9e:	bf00      	nop
   41da0:	40842500 	.word	0x40842500
   41da4:	40842800 	.word	0x40842800
   41da8:	0bad0004 	.word	0x0bad0004
   41dac:	0bad0000 	.word	0x0bad0000

00041db0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   41db0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   41db2:	f001 f8b9 	bl	42f28 <nrfx_gpiote_is_init>
   41db6:	4604      	mov	r4, r0
   41db8:	b968      	cbnz	r0, 41dd6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   41dba:	f001 f88d 	bl	42ed8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   41dbe:	4b08      	ldr	r3, [pc, #32]	; (41de0 <gpio_nrfx_init+0x30>)
   41dc0:	4298      	cmp	r0, r3
   41dc2:	d10a      	bne.n	41dda <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   41dc4:	4621      	mov	r1, r4
   41dc6:	4807      	ldr	r0, [pc, #28]	; (41de4 <gpio_nrfx_init+0x34>)
   41dc8:	f001 f86a 	bl	42ea0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   41dcc:	4622      	mov	r2, r4
   41dce:	2105      	movs	r1, #5
   41dd0:	202f      	movs	r0, #47	; 0x2f
   41dd2:	f7ff f9cd 	bl	41170 <z_arm_irq_priority_set>
		return 0;
   41dd6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   41dd8:	bd10      	pop	{r4, pc}
		return -EIO;
   41dda:	f06f 0004 	mvn.w	r0, #4
   41dde:	e7fb      	b.n	41dd8 <gpio_nrfx_init+0x28>
   41de0:	0bad0000 	.word	0x0bad0000
   41de4:	00041de9 	.word	0x00041de9

00041de8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   41de8:	0942      	lsrs	r2, r0, #5
{
   41dea:	4603      	mov	r3, r0
   41dec:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   41dee:	d002      	beq.n	41df6 <nrfx_gpio_handler+0xe>
   41df0:	2a01      	cmp	r2, #1
   41df2:	d015      	beq.n	41e20 <nrfx_gpio_handler+0x38>
}
   41df4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   41df6:	4e0b      	ldr	r6, [pc, #44]	; (41e24 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   41df8:	6932      	ldr	r2, [r6, #16]
   41dfa:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   41dfc:	2900      	cmp	r1, #0
   41dfe:	d0f9      	beq.n	41df4 <nrfx_gpio_handler+0xc>
   41e00:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   41e02:	f003 031f 	and.w	r3, r3, #31
   41e06:	680c      	ldr	r4, [r1, #0]
   41e08:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   41e0a:	688a      	ldr	r2, [r1, #8]
   41e0c:	402a      	ands	r2, r5
   41e0e:	d002      	beq.n	41e16 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   41e10:	4630      	mov	r0, r6
   41e12:	684b      	ldr	r3, [r1, #4]
   41e14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   41e16:	2c00      	cmp	r4, #0
   41e18:	d0ec      	beq.n	41df4 <nrfx_gpio_handler+0xc>
   41e1a:	4621      	mov	r1, r4
   41e1c:	6824      	ldr	r4, [r4, #0]
   41e1e:	e7f4      	b.n	41e0a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   41e20:	4e01      	ldr	r6, [pc, #4]	; (41e28 <nrfx_gpio_handler+0x40>)
   41e22:	e7e9      	b.n	41df8 <nrfx_gpio_handler+0x10>
   41e24:	00044f44 	.word	0x00044f44
   41e28:	00044f5c 	.word	0x00044f5c

00041e2c <gpio_nrfx_pin_configure>:
{
   41e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   41e30:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   41e32:	f001 051f 	and.w	r5, r1, #31
   41e36:	7b3b      	ldrb	r3, [r7, #12]
{
   41e38:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   41e3a:	4614      	mov	r4, r2
{
   41e3c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   41e3e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   41e42:	b9ca      	cbnz	r2, 41e78 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   41e44:	a902      	add	r1, sp, #8
   41e46:	4628      	mov	r0, r5
   41e48:	f001 f830 	bl	42eac <nrfx_gpiote_channel_get>
   41e4c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   41e4e:	4628      	mov	r0, r5
   41e50:	f001 f8ee 	bl	43030 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   41e54:	4b49      	ldr	r3, [pc, #292]	; (41f7c <gpio_nrfx_pin_configure+0x150>)
   41e56:	4298      	cmp	r0, r3
   41e58:	d004      	beq.n	41e64 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   41e5a:	f06f 0004 	mvn.w	r0, #4
}
   41e5e:	b005      	add	sp, #20
   41e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   41e64:	4284      	cmp	r4, r0
   41e66:	d105      	bne.n	41e74 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   41e68:	f89d 0008 	ldrb.w	r0, [sp, #8]
   41e6c:	f001 f866 	bl	42f3c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   41e70:	42a0      	cmp	r0, r4
   41e72:	d1f2      	bne.n	41e5a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   41e74:	2000      	movs	r0, #0
   41e76:	e7f2      	b.n	41e5e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   41e78:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   41e7c:	f10d 0103 	add.w	r1, sp, #3
   41e80:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   41e82:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   41e86:	f001 f811 	bl	42eac <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   41e8a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   41e8c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   41e8e:	4649      	mov	r1, r9
   41e90:	4628      	mov	r0, r5
   41e92:	aa02      	add	r2, sp, #8
   41e94:	f000 fee4 	bl	42c60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   41e98:	4b38      	ldr	r3, [pc, #224]	; (41f7c <gpio_nrfx_pin_configure+0x150>)
   41e9a:	4298      	cmp	r0, r3
   41e9c:	d002      	beq.n	41ea4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   41e9e:	f06f 0015 	mvn.w	r0, #21
   41ea2:	e7dc      	b.n	41e5e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   41ea4:	4580      	cmp	r8, r0
   41ea6:	d103      	bne.n	41eb0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   41ea8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   41eac:	f001 f846 	bl	42f3c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   41eb0:	03a3      	lsls	r3, r4, #14
   41eb2:	d54f      	bpl.n	41f54 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   41eb4:	f240 6306 	movw	r3, #1542	; 0x606
   41eb8:	f240 2206 	movw	r2, #518	; 0x206
   41ebc:	4023      	ands	r3, r4
   41ebe:	4293      	cmp	r3, r2
   41ec0:	d03a      	beq.n	41f38 <gpio_nrfx_pin_configure+0x10c>
   41ec2:	d80c      	bhi.n	41ede <gpio_nrfx_pin_configure+0xb2>
   41ec4:	2b06      	cmp	r3, #6
   41ec6:	d015      	beq.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
   41ec8:	d804      	bhi.n	41ed4 <gpio_nrfx_pin_configure+0xa8>
   41eca:	b19b      	cbz	r3, 41ef4 <gpio_nrfx_pin_configure+0xc8>
   41ecc:	2b02      	cmp	r3, #2
   41ece:	d1e6      	bne.n	41e9e <gpio_nrfx_pin_configure+0x72>
   41ed0:	2304      	movs	r3, #4
   41ed2:	e00f      	b.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
   41ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   41ed8:	d1e1      	bne.n	41e9e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   41eda:	2301      	movs	r3, #1
   41edc:	e00a      	b.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   41ede:	f240 4202 	movw	r2, #1026	; 0x402
   41ee2:	4293      	cmp	r3, r2
   41ee4:	d02a      	beq.n	41f3c <gpio_nrfx_pin_configure+0x110>
   41ee6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   41eea:	d029      	beq.n	41f40 <gpio_nrfx_pin_configure+0x114>
   41eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   41ef0:	d1d5      	bne.n	41e9e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   41ef2:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   41ef4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   41ef8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   41efc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   41f00:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   41f02:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   41f06:	bf4c      	ite	mi
   41f08:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   41f0a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   41f0e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   41f10:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   41f14:	d516      	bpl.n	41f44 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   41f16:	2101      	movs	r1, #1
   41f18:	687b      	ldr	r3, [r7, #4]
   41f1a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   41f1e:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   41f20:	2200      	movs	r2, #0
   41f22:	4628      	mov	r0, r5
   41f24:	a901      	add	r1, sp, #4
   41f26:	f000 ff47 	bl	42db8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   41f2a:	4b14      	ldr	r3, [pc, #80]	; (41f7c <gpio_nrfx_pin_configure+0x150>)
   41f2c:	4298      	cmp	r0, r3
   41f2e:	bf14      	ite	ne
   41f30:	f06f 0015 	mvnne.w	r0, #21
   41f34:	2000      	moveq	r0, #0
   41f36:	e792      	b.n	41e5e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   41f38:	2307      	movs	r3, #7
   41f3a:	e7db      	b.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   41f3c:	2305      	movs	r3, #5
   41f3e:	e7d9      	b.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   41f40:	2303      	movs	r3, #3
   41f42:	e7d7      	b.n	41ef4 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   41f44:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   41f46:	bf41      	itttt	mi
   41f48:	2101      	movmi	r1, #1
   41f4a:	687b      	ldrmi	r3, [r7, #4]
   41f4c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   41f50:	60de      	strmi	r6, [r3, #12]
}
   41f52:	e7e5      	b.n	41f20 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   41f54:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   41f56:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   41f5a:	bf4c      	ite	mi
   41f5c:	2403      	movmi	r4, #3
   41f5e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   41f62:	461a      	mov	r2, r3
   41f64:	4628      	mov	r0, r5
   41f66:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   41f68:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   41f6c:	f000 fe78 	bl	42c60 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   41f70:	4b02      	ldr	r3, [pc, #8]	; (41f7c <gpio_nrfx_pin_configure+0x150>)
   41f72:	4298      	cmp	r0, r3
   41f74:	f43f af7e 	beq.w	41e74 <gpio_nrfx_pin_configure+0x48>
   41f78:	e791      	b.n	41e9e <gpio_nrfx_pin_configure+0x72>
   41f7a:	bf00      	nop
   41f7c:	0bad0000 	.word	0x0bad0000

00041f80 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   41f80:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   41f82:	794b      	ldrb	r3, [r1, #5]
   41f84:	2b01      	cmp	r3, #1
   41f86:	d028      	beq.n	41fda <uarte_nrfx_configure+0x5a>
   41f88:	2b03      	cmp	r3, #3
   41f8a:	d123      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   41f8c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   41f8e:	798b      	ldrb	r3, [r1, #6]
   41f90:	2b03      	cmp	r3, #3
   41f92:	d11f      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   41f94:	79cd      	ldrb	r5, [r1, #7]
   41f96:	b10d      	cbz	r5, 41f9c <uarte_nrfx_configure+0x1c>
   41f98:	2d01      	cmp	r5, #1
   41f9a:	d11b      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   41f9c:	790a      	ldrb	r2, [r1, #4]
   41f9e:	2a01      	cmp	r2, #1
   41fa0:	d01d      	beq.n	41fde <uarte_nrfx_configure+0x5e>
   41fa2:	2a02      	cmp	r2, #2
   41fa4:	d01f      	beq.n	41fe6 <uarte_nrfx_configure+0x66>
   41fa6:	b9aa      	cbnz	r2, 41fd4 <uarte_nrfx_configure+0x54>
   41fa8:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   41faa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   41fac:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   41fae:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   41fb2:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   41fb4:	d06e      	beq.n	42094 <uarte_nrfx_configure+0x114>
   41fb6:	d833      	bhi.n	42020 <uarte_nrfx_configure+0xa0>
   41fb8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   41fbc:	d06d      	beq.n	4209a <uarte_nrfx_configure+0x11a>
   41fbe:	d81c      	bhi.n	41ffa <uarte_nrfx_configure+0x7a>
   41fc0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   41fc4:	d06b      	beq.n	4209e <uarte_nrfx_configure+0x11e>
   41fc6:	d810      	bhi.n	41fea <uarte_nrfx_configure+0x6a>
   41fc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   41fcc:	d06a      	beq.n	420a4 <uarte_nrfx_configure+0x124>
   41fce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   41fd2:	d06a      	beq.n	420aa <uarte_nrfx_configure+0x12a>
   41fd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41fd8:	e05b      	b.n	42092 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
   41fda:	2700      	movs	r7, #0
   41fdc:	e7d7      	b.n	41f8e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   41fde:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   41fe2:	220e      	movs	r2, #14
   41fe4:	e7e1      	b.n	41faa <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   41fe6:	2400      	movs	r4, #0
   41fe8:	e7fb      	b.n	41fe2 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
   41fea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   41fee:	d05f      	beq.n	420b0 <uarte_nrfx_configure+0x130>
   41ff0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   41ff4:	d1ee      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   41ff6:	4b39      	ldr	r3, [pc, #228]	; (420dc <uarte_nrfx_configure+0x15c>)
   41ff8:	e03e      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   41ffa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   41ffe:	d05a      	beq.n	420b6 <uarte_nrfx_configure+0x136>
   42000:	d807      	bhi.n	42012 <uarte_nrfx_configure+0x92>
   42002:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   42006:	d058      	beq.n	420ba <uarte_nrfx_configure+0x13a>
   42008:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   4200c:	d1e2      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   4200e:	4b34      	ldr	r3, [pc, #208]	; (420e0 <uarte_nrfx_configure+0x160>)
   42010:	e032      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   42012:	f647 2c12 	movw	ip, #31250	; 0x7a12
   42016:	4563      	cmp	r3, ip
   42018:	d1dc      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   4201a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   4201e:	e02b      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   42020:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   42024:	d04b      	beq.n	420be <uarte_nrfx_configure+0x13e>
   42026:	d813      	bhi.n	42050 <uarte_nrfx_configure+0xd0>
   42028:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   4202c:	d04a      	beq.n	420c4 <uarte_nrfx_configure+0x144>
   4202e:	d809      	bhi.n	42044 <uarte_nrfx_configure+0xc4>
   42030:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   42034:	4563      	cmp	r3, ip
   42036:	d047      	beq.n	420c8 <uarte_nrfx_configure+0x148>
   42038:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   4203c:	d1ca      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   4203e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   42042:	e019      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   42044:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   42048:	d1c4      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   4204a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   4204e:	e013      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   42050:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   42054:	d03b      	beq.n	420ce <uarte_nrfx_configure+0x14e>
   42056:	d809      	bhi.n	4206c <uarte_nrfx_configure+0xec>
   42058:	f8df c088 	ldr.w	ip, [pc, #136]	; 420e4 <uarte_nrfx_configure+0x164>
   4205c:	4563      	cmp	r3, ip
   4205e:	d039      	beq.n	420d4 <uarte_nrfx_configure+0x154>
   42060:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   42064:	d1b6      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   42066:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   4206a:	e005      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   4206c:	f8df c078 	ldr.w	ip, [pc, #120]	; 420e8 <uarte_nrfx_configure+0x168>
   42070:	4563      	cmp	r3, ip
   42072:	d1af      	bne.n	41fd4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   42074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   42078:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   4207a:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   4207c:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   4207e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   42082:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   42084:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   42086:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   4208a:	c903      	ldmia	r1, {r0, r1}
   4208c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   42090:	2000      	movs	r0, #0
}
   42092:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   42094:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   42098:	e7ee      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   4209a:	4b14      	ldr	r3, [pc, #80]	; (420ec <uarte_nrfx_configure+0x16c>)
   4209c:	e7ec      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   4209e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   420a2:	e7e9      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
   420a4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   420a8:	e7e6      	b.n	42078 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   420aa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   420ae:	e7e3      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   420b0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   420b4:	e7e0      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   420b6:	4b0e      	ldr	r3, [pc, #56]	; (420f0 <uarte_nrfx_configure+0x170>)
   420b8:	e7de      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   420ba:	4b0e      	ldr	r3, [pc, #56]	; (420f4 <uarte_nrfx_configure+0x174>)
   420bc:	e7dc      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   420be:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   420c2:	e7d9      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   420c4:	4b0c      	ldr	r3, [pc, #48]	; (420f8 <uarte_nrfx_configure+0x178>)
   420c6:	e7d7      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   420c8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   420cc:	e7d4      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   420ce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   420d2:	e7d1      	b.n	42078 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   420d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   420d8:	e7ce      	b.n	42078 <uarte_nrfx_configure+0xf8>
   420da:	bf00      	nop
   420dc:	0013b000 	.word	0x0013b000
   420e0:	004ea000 	.word	0x004ea000
   420e4:	0003d090 	.word	0x0003d090
   420e8:	000f4240 	.word	0x000f4240
   420ec:	00275000 	.word	0x00275000
   420f0:	0075c000 	.word	0x0075c000
   420f4:	003af000 	.word	0x003af000
   420f8:	013a9000 	.word	0x013a9000

000420fc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   420fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   42100:	4607      	mov	r7, r0
   42102:	2200      	movs	r2, #0
   42104:	2101      	movs	r1, #1
   42106:	2008      	movs	r0, #8
   42108:	f7ff f832 	bl	41170 <z_arm_irq_priority_set>
   4210c:	2008      	movs	r0, #8
   4210e:	f7ff f811 	bl	41134 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   42112:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   42114:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   42118:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   4211a:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   4211e:	f8d8 900c 	ldr.w	r9, [r8, #12]
   42122:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   42126:	4648      	mov	r0, r9
	data->dev = dev;
   42128:	6037      	str	r7, [r6, #0]
   4212a:	aa01      	add	r2, sp, #4
   4212c:	f002 fc9a 	bl	44a64 <pinctrl_lookup_state>
	if (ret < 0) {
   42130:	1e05      	subs	r5, r0, #0
   42132:	db4f      	blt.n	421d4 <uarte_0_init+0xd8>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   42134:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   42136:	f8d9 2000 	ldr.w	r2, [r9]
   4213a:	7919      	ldrb	r1, [r3, #4]
   4213c:	6818      	ldr	r0, [r3, #0]
   4213e:	f002 fca9 	bl	44a94 <pinctrl_configure_pins>
	if (err < 0) {
   42142:	1e05      	subs	r5, r0, #0
   42144:	db46      	blt.n	421d4 <uarte_0_init+0xd8>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   42146:	4638      	mov	r0, r7
   42148:	1d31      	adds	r1, r6, #4
   4214a:	f7ff ff19 	bl	41f80 <uarte_nrfx_configure>
	if (err) {
   4214e:	4605      	mov	r5, r0
   42150:	2800      	cmp	r0, #0
   42152:	d13f      	bne.n	421d4 <uarte_0_init+0xd8>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   42154:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   42158:	0799      	lsls	r1, r3, #30
   4215a:	d512      	bpl.n	42182 <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   4215c:	f106 0012 	add.w	r0, r6, #18
   42160:	f000 fcf8 	bl	42b54 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   42164:	4b1f      	ldr	r3, [pc, #124]	; (421e4 <uarte_0_init+0xe8>)
   42166:	4298      	cmp	r0, r3
   42168:	d138      	bne.n	421dc <uarte_0_init+0xe0>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   4216a:	7cb2      	ldrb	r2, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   4216c:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   42170:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   42174:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   42178:	2301      	movs	r3, #1
   4217a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   4217c:	4a1a      	ldr	r2, [pc, #104]	; (421e8 <uarte_0_init+0xec>)
   4217e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   42182:	2308      	movs	r3, #8
   42184:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   42188:	f898 3008 	ldrb.w	r3, [r8, #8]
   4218c:	b95b      	cbnz	r3, 421a6 <uarte_0_init+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4218e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   42192:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   42196:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   4219a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   4219e:	2301      	movs	r3, #1
   421a0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   421a4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   421a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   421aa:	3610      	adds	r6, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   421ac:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   421ae:	bf5c      	itt	pl
   421b0:	f44f 7280 	movpl.w	r2, #256	; 0x100
   421b4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   421b8:	06db      	lsls	r3, r3, #27
   421ba:	bf44      	itt	mi
   421bc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   421c0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   421c4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   421c6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   421ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   421ce:	2301      	movs	r3, #1
   421d0:	60a3      	str	r3, [r4, #8]
   421d2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   421d4:	4628      	mov	r0, r5
   421d6:	b003      	add	sp, #12
   421d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   421dc:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   421e0:	e7f8      	b.n	421d4 <uarte_0_init+0xd8>
   421e2:	bf00      	nop
   421e4:	0bad0000 	.word	0x0bad0000
   421e8:	40017000 	.word	0x40017000

000421ec <uarte_nrfx_poll_out>:
{
   421ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   421ee:	4605      	mov	r5, r0
   421f0:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   421f2:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   421f4:	f002 fd69 	bl	44cca <k_is_in_isr>
   421f8:	b910      	cbnz	r0, 42200 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   421fa:	4b2c      	ldr	r3, [pc, #176]	; (422ac <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
   421fc:	781b      	ldrb	r3, [r3, #0]
   421fe:	b983      	cbnz	r3, 42222 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   42200:	f04f 0320 	mov.w	r3, #32
   42204:	f3ef 8411 	mrs	r4, BASEPRI
   42208:	f383 8812 	msr	BASEPRI_MAX, r3
   4220c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   42210:	6868      	ldr	r0, [r5, #4]
   42212:	f002 fbcc 	bl	449ae <is_tx_ready.isra.0>
   42216:	bb28      	cbnz	r0, 42264 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   42218:	f384 8811 	msr	BASEPRI, r4
   4221c:	f3bf 8f6f 	isb	sy
}
   42220:	e7ee      	b.n	42200 <uarte_nrfx_poll_out+0x14>
{
   42222:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   42224:	6868      	ldr	r0, [r5, #4]
   42226:	f002 fbc2 	bl	449ae <is_tx_ready.isra.0>
   4222a:	b970      	cbnz	r0, 4224a <uarte_nrfx_poll_out+0x5e>
   4222c:	2001      	movs	r0, #1
   4222e:	f002 fcc3 	bl	44bb8 <nrfx_busy_wait>
   42232:	3c01      	subs	r4, #1
   42234:	d1f6      	bne.n	42224 <uarte_nrfx_poll_out+0x38>
   42236:	2100      	movs	r1, #0
   42238:	2021      	movs	r0, #33	; 0x21
   4223a:	f001 fee7 	bl	4400c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   4223e:	e7f0      	b.n	42222 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   42240:	f384 8811 	msr	BASEPRI, r4
   42244:	f3bf 8f6f 	isb	sy
}
   42248:	e7f5      	b.n	42236 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   4224a:	f04f 0320 	mov.w	r3, #32
   4224e:	f3ef 8411 	mrs	r4, BASEPRI
   42252:	f383 8812 	msr	BASEPRI_MAX, r3
   42256:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   4225a:	6868      	ldr	r0, [r5, #4]
   4225c:	f002 fba7 	bl	449ae <is_tx_ready.isra.0>
   42260:	2800      	cmp	r0, #0
   42262:	d0ed      	beq.n	42240 <uarte_nrfx_poll_out+0x54>
    p_reg->TXD.MAXCNT = length;
   42264:	2201      	movs	r2, #1
	data->char_out = c;
   42266:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   4226a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   4226c:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4226e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   42272:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42276:	2200      	movs	r2, #0
   42278:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   4227c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   42280:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   42284:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   42288:	684a      	ldr	r2, [r1, #4]
   4228a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   4228c:	bf41      	itttt	mi
   4228e:	2208      	movmi	r2, #8
   42290:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   42294:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   42298:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4229c:	2201      	movs	r2, #1
   4229e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   422a0:	f384 8811 	msr	BASEPRI, r4
   422a4:	f3bf 8f6f 	isb	sy
}
   422a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   422aa:	bf00      	nop
   422ac:	20040589 	.word	0x20040589

000422b0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   422b0:	2301      	movs	r3, #1
   422b2:	4083      	lsls	r3, r0
{
   422b4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   422b6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   422b8:	4a0c      	ldr	r2, [pc, #48]	; (422ec <compare_int_lock+0x3c>)
   422ba:	e8d2 1fef 	ldaex	r1, [r2]
   422be:	ea01 0c04 	and.w	ip, r1, r4
   422c2:	e8c2 cfee 	stlex	lr, ip, [r2]
   422c6:	f1be 0f00 	cmp.w	lr, #0
   422ca:	d1f6      	bne.n	422ba <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   422cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   422d0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   422d4:	4a06      	ldr	r2, [pc, #24]	; (422f0 <compare_int_lock+0x40>)
   422d6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   422da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   422de:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   422e2:	420b      	tst	r3, r1
}
   422e4:	bf14      	ite	ne
   422e6:	2001      	movne	r0, #1
   422e8:	2000      	moveq	r0, #0
   422ea:	bd10      	pop	{r4, pc}
   422ec:	2004032c 	.word	0x2004032c
   422f0:	40015000 	.word	0x40015000

000422f4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   422f4:	4919      	ldr	r1, [pc, #100]	; (4235c <sys_clock_timeout_handler+0x68>)
{
   422f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   422f8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   422fa:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   422fe:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   42300:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   42304:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   42308:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   4230a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   4230e:	d222      	bcs.n	42356 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   42310:	4b13      	ldr	r3, [pc, #76]	; (42360 <sys_clock_timeout_handler+0x6c>)
   42312:	681b      	ldr	r3, [r3, #0]
   42314:	0a1a      	lsrs	r2, r3, #8
   42316:	061b      	lsls	r3, r3, #24
   42318:	195e      	adds	r6, r3, r5
   4231a:	4b12      	ldr	r3, [pc, #72]	; (42364 <sys_clock_timeout_handler+0x70>)
   4231c:	f142 0700 	adc.w	r7, r2, #0
   42320:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   42324:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   42326:	f001 ffc1 	bl	442ac <sys_clock_announce>
    return p_reg->CC[ch];
   4232a:	00a3      	lsls	r3, r4, #2
   4232c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42330:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   42334:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   42338:	42aa      	cmp	r2, r5
   4233a:	d10b      	bne.n	42354 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   4233c:	b91e      	cbnz	r6, 42346 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   4233e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   42342:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   42346:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   4234a:	4b07      	ldr	r3, [pc, #28]	; (42368 <sys_clock_timeout_handler+0x74>)
   4234c:	fa00 f404 	lsl.w	r4, r0, r4
   42350:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   42354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   42356:	2600      	movs	r6, #0
   42358:	e7e5      	b.n	42326 <sys_clock_timeout_handler+0x32>
   4235a:	bf00      	nop
   4235c:	200400f8 	.word	0x200400f8
   42360:	20040330 	.word	0x20040330
   42364:	200400e0 	.word	0x200400e0
   42368:	40015000 	.word	0x40015000

0004236c <compare_int_unlock>:
	if (key) {
   4236c:	b1e1      	cbz	r1, 423a8 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   4236e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   42370:	4a0e      	ldr	r2, [pc, #56]	; (423ac <compare_int_unlock+0x40>)
   42372:	4083      	lsls	r3, r0
   42374:	e8d2 1fef 	ldaex	r1, [r2]
   42378:	4319      	orrs	r1, r3
   4237a:	e8c2 1fec 	stlex	ip, r1, [r2]
   4237e:	f1bc 0f00 	cmp.w	ip, #0
   42382:	d1f7      	bne.n	42374 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   42384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   42388:	4a09      	ldr	r2, [pc, #36]	; (423b0 <compare_int_unlock+0x44>)
   4238a:	4083      	lsls	r3, r0
   4238c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   42390:	4b08      	ldr	r3, [pc, #32]	; (423b4 <compare_int_unlock+0x48>)
   42392:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   42396:	fa23 f000 	lsr.w	r0, r3, r0
   4239a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4239c:	bf42      	ittt	mi
   4239e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   423a2:	4b05      	ldrmi	r3, [pc, #20]	; (423b8 <compare_int_unlock+0x4c>)
   423a4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   423a8:	4770      	bx	lr
   423aa:	bf00      	nop
   423ac:	2004032c 	.word	0x2004032c
   423b0:	40015000 	.word	0x40015000
   423b4:	20040328 	.word	0x20040328
   423b8:	e000e100 	.word	0xe000e100

000423bc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   423bc:	4b0d      	ldr	r3, [pc, #52]	; (423f4 <z_nrf_rtc_timer_read+0x38>)
   423be:	6818      	ldr	r0, [r3, #0]
   423c0:	0a01      	lsrs	r1, r0, #8
   423c2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   423c4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   423c8:	4b0b      	ldr	r3, [pc, #44]	; (423f8 <z_nrf_rtc_timer_read+0x3c>)
   423ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   423ce:	1818      	adds	r0, r3, r0
   423d0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   423d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   423d8:	d20a      	bcs.n	423f0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   423da:	4b08      	ldr	r3, [pc, #32]	; (423fc <z_nrf_rtc_timer_read+0x40>)
   423dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   423e0:	4290      	cmp	r0, r2
   423e2:	eb71 0303 	sbcs.w	r3, r1, r3
   423e6:	d203      	bcs.n	423f0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   423e8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   423ec:	f141 0100 	adc.w	r1, r1, #0
}
   423f0:	4770      	bx	lr
   423f2:	bf00      	nop
   423f4:	20040330 	.word	0x20040330
   423f8:	40015000 	.word	0x40015000
   423fc:	200400e0 	.word	0x200400e0

00042400 <compare_set>:
{
   42400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42404:	b085      	sub	sp, #20
   42406:	4616      	mov	r6, r2
   42408:	4698      	mov	r8, r3
   4240a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   4240c:	f7ff ff50 	bl	422b0 <compare_int_lock>
   42410:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   42412:	f7ff ffd3 	bl	423bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   42416:	42b0      	cmp	r0, r6
   42418:	eb71 0308 	sbcs.w	r3, r1, r8
   4241c:	d276      	bcs.n	4250c <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
   4241e:	4b43      	ldr	r3, [pc, #268]	; (4252c <compare_set+0x12c>)
   42420:	1a30      	subs	r0, r6, r0
   42422:	eb68 0101 	sbc.w	r1, r8, r1
   42426:	4298      	cmp	r0, r3
   42428:	f171 0300 	sbcs.w	r3, r1, #0
   4242c:	d27b      	bcs.n	42526 <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
   4242e:	4b40      	ldr	r3, [pc, #256]	; (42530 <compare_set+0x130>)
   42430:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   42434:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   42438:	45d8      	cmp	r8, fp
   4243a:	bf08      	it	eq
   4243c:	4556      	cmpeq	r6, sl
   4243e:	d050      	beq.n	424e2 <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   42440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   42444:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   42448:	4614      	mov	r4, r2
   4244a:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   4244e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   42452:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   42456:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   42458:	40ab      	lsls	r3, r5
   4245a:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4245e:	b2bf      	uxth	r7, r7
   42460:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   42464:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   42466:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   4246a:	4b32      	ldr	r3, [pc, #200]	; (42534 <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4246c:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   42470:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   42474:	1a40      	subs	r0, r0, r1
   42476:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   4247a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   4247e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   42480:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   42484:	d107      	bne.n	42496 <compare_set+0x96>
   42486:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   4248a:	2013      	movs	r0, #19
   4248c:	f002 fd18 	bl	44ec0 <z_impl_k_busy_wait>
   42490:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   42494:	4b27      	ldr	r3, [pc, #156]	; (42534 <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   42496:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   4249a:	eba4 000c 	sub.w	r0, r4, ip
   4249e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   424a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   424a6:	bf88      	it	hi
   424a8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   424aa:	2000      	movs	r0, #0
   424ac:	6038      	str	r0, [r7, #0]
   424ae:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   424b0:	9801      	ldr	r0, [sp, #4]
   424b2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   424b6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   424ba:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   424be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   424c2:	4281      	cmp	r1, r0
   424c4:	d006      	beq.n	424d4 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   424c6:	1a20      	subs	r0, r4, r0
   424c8:	3802      	subs	r0, #2
   424ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   424ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   424d2:	d819      	bhi.n	42508 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
   424d4:	1aa4      	subs	r4, r4, r2
   424d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   424da:	eb14 0a06 	adds.w	sl, r4, r6
   424de:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   424e2:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   424e4:	4912      	ldr	r1, [pc, #72]	; (42530 <compare_set+0x130>)
	cc_data[chan].callback = handler;
   424e6:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   424e8:	012b      	lsls	r3, r5, #4
   424ea:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   424ee:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   424f0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   424f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   424f6:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   424f8:	4628      	mov	r0, r5
   424fa:	9900      	ldr	r1, [sp, #0]
   424fc:	f7ff ff36 	bl	4236c <compare_int_unlock>
}
   42500:	4620      	mov	r0, r4
   42502:	b005      	add	sp, #20
   42504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42508:	4620      	mov	r0, r4
   4250a:	e7b1      	b.n	42470 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
   4250c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4250e:	4a0a      	ldr	r2, [pc, #40]	; (42538 <compare_set+0x138>)
   42510:	40ab      	lsls	r3, r5
   42512:	e8d2 1fef 	ldaex	r1, [r2]
   42516:	4319      	orrs	r1, r3
   42518:	e8c2 1fe0 	stlex	r0, r1, [r2]
   4251c:	2800      	cmp	r0, #0
   4251e:	d1f8      	bne.n	42512 <compare_set+0x112>
   42520:	46b2      	mov	sl, r6
   42522:	46c3      	mov	fp, r8
   42524:	e7dd      	b.n	424e2 <compare_set+0xe2>
			return -EINVAL;
   42526:	f06f 0415 	mvn.w	r4, #21
   4252a:	e7e5      	b.n	424f8 <compare_set+0xf8>
   4252c:	01000001 	.word	0x01000001
   42530:	200400e8 	.word	0x200400e8
   42534:	40015000 	.word	0x40015000
   42538:	20040328 	.word	0x20040328

0004253c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   4253c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   4253e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   42540:	f04f 30ff 	mov.w	r0, #4294967295
   42544:	f04f 31ff 	mov.w	r1, #4294967295
   42548:	4d16      	ldr	r5, [pc, #88]	; (425a4 <sys_clock_driver_init+0x68>)
   4254a:	4b17      	ldr	r3, [pc, #92]	; (425a8 <sys_clock_driver_init+0x6c>)
   4254c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   42550:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   42554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   42558:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4255a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4255e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   42562:	4b12      	ldr	r3, [pc, #72]	; (425ac <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   42564:	2101      	movs	r1, #1
   42566:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   4256a:	2015      	movs	r0, #21
   4256c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   42570:	4622      	mov	r2, r4
   42572:	f7fe fdfd 	bl	41170 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   42576:	2015      	movs	r0, #21
   42578:	f7fe fddc 	bl	41134 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   4257c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   4257e:	4a0c      	ldr	r2, [pc, #48]	; (425b0 <sys_clock_driver_init+0x74>)
   42580:	60ab      	str	r3, [r5, #8]
   42582:	602b      	str	r3, [r5, #0]
   42584:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   42586:	4b0b      	ldr	r3, [pc, #44]	; (425b4 <sys_clock_driver_init+0x78>)
   42588:	4a0b      	ldr	r2, [pc, #44]	; (425b8 <sys_clock_driver_init+0x7c>)
   4258a:	9300      	str	r3, [sp, #0]
   4258c:	4620      	mov	r0, r4
   4258e:	2300      	movs	r3, #0
   42590:	9401      	str	r4, [sp, #4]
   42592:	f7ff ff35 	bl	42400 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   42596:	4630      	mov	r0, r6
   42598:	f7ff faf6 	bl	41b88 <z_nrf_clock_control_lf_on>

	return 0;
}
   4259c:	4620      	mov	r0, r4
   4259e:	b002      	add	sp, #8
   425a0:	bd70      	pop	{r4, r5, r6, pc}
   425a2:	bf00      	nop
   425a4:	40015000 	.word	0x40015000
   425a8:	200400e8 	.word	0x200400e8
   425ac:	e000e100 	.word	0xe000e100
   425b0:	2004032c 	.word	0x2004032c
   425b4:	000422f5 	.word	0x000422f5
   425b8:	007fffff 	.word	0x007fffff

000425bc <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   425bc:	4b35      	ldr	r3, [pc, #212]	; (42694 <rtc_nrf_isr+0xd8>)
{
   425be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   425c2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   425c6:	0791      	lsls	r1, r2, #30
   425c8:	d50b      	bpl.n	425e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   425ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   425ce:	b142      	cbz	r2, 425e2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   425d0:	2200      	movs	r2, #0
   425d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   425d6:	4a30      	ldr	r2, [pc, #192]	; (42698 <rtc_nrf_isr+0xdc>)
   425d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   425dc:	6813      	ldr	r3, [r2, #0]
   425de:	3301      	adds	r3, #1
   425e0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   425e2:	f04f 0320 	mov.w	r3, #32
   425e6:	f3ef 8111 	mrs	r1, BASEPRI
   425ea:	f383 8812 	msr	BASEPRI_MAX, r3
   425ee:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   425f2:	4b28      	ldr	r3, [pc, #160]	; (42694 <rtc_nrf_isr+0xd8>)
   425f4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   425f8:	03d2      	lsls	r2, r2, #15
   425fa:	d50e      	bpl.n	4261a <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   425fc:	4a27      	ldr	r2, [pc, #156]	; (4269c <rtc_nrf_isr+0xe0>)
   425fe:	e8d2 0fef 	ldaex	r0, [r2]
   42602:	f020 0401 	bic.w	r4, r0, #1
   42606:	e8c2 4fe5 	stlex	r5, r4, [r2]
   4260a:	2d00      	cmp	r5, #0
   4260c:	d1f7      	bne.n	425fe <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   4260e:	2800      	cmp	r0, #0
   42610:	d137      	bne.n	42682 <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   42612:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   42616:	2a00      	cmp	r2, #0
   42618:	d133      	bne.n	42682 <rtc_nrf_isr+0xc6>
{
   4261a:	2300      	movs	r3, #0
	__asm__ volatile(
   4261c:	f381 8811 	msr	BASEPRI, r1
   42620:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   42624:	b353      	cbz	r3, 4267c <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
   42626:	f7ff fec9 	bl	423bc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   4262a:	f04f 0320 	mov.w	r3, #32
   4262e:	f3ef 8711 	mrs	r7, BASEPRI
   42632:	f383 8812 	msr	BASEPRI_MAX, r3
   42636:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   4263a:	4b19      	ldr	r3, [pc, #100]	; (426a0 <rtc_nrf_isr+0xe4>)
   4263c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   42640:	42a0      	cmp	r0, r4
   42642:	eb71 0205 	sbcs.w	r2, r1, r5
   42646:	f04f 0200 	mov.w	r2, #0
   4264a:	d321      	bcc.n	42690 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
   4264c:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   42650:	f04f 38ff 	mov.w	r8, #4294967295
   42654:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   42658:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   4265a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   4265e:	e9c3 8902 	strd	r8, r9, [r3, #8]
   42662:	4b0c      	ldr	r3, [pc, #48]	; (42694 <rtc_nrf_isr+0xd8>)
   42664:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   42668:	f387 8811 	msr	BASEPRI, r7
   4266c:	f3bf 8f6f 	isb	sy
		if (handler) {
   42670:	b121      	cbz	r1, 4267c <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
   42672:	4622      	mov	r2, r4
   42674:	462b      	mov	r3, r5
   42676:	2000      	movs	r0, #0
   42678:	9600      	str	r6, [sp, #0]
   4267a:	4788      	blx	r1
}
   4267c:	b003      	add	sp, #12
   4267e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   42682:	2200      	movs	r2, #0
   42684:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   42688:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   4268c:	2301      	movs	r3, #1
}
   4268e:	e7c5      	b.n	4261c <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   42690:	4611      	mov	r1, r2
   42692:	e7e9      	b.n	42668 <rtc_nrf_isr+0xac>
   42694:	40015000 	.word	0x40015000
   42698:	20040330 	.word	0x20040330
   4269c:	20040328 	.word	0x20040328
   426a0:	200400e8 	.word	0x200400e8

000426a4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   426a4:	1c43      	adds	r3, r0, #1
{
   426a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   426a8:	d020      	beq.n	426ec <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   426aa:	2801      	cmp	r0, #1
   426ac:	dd20      	ble.n	426f0 <sys_clock_set_timeout+0x4c>
   426ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   426b2:	da1f      	bge.n	426f4 <sys_clock_set_timeout+0x50>
   426b4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   426b6:	f7ff fe81 	bl	423bc <z_nrf_rtc_timer_read>
   426ba:	4b0f      	ldr	r3, [pc, #60]	; (426f8 <sys_clock_set_timeout+0x54>)
   426bc:	e9d3 1300 	ldrd	r1, r3, [r3]
   426c0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   426c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   426c6:	bf28      	it	cs
   426c8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   426ca:	3001      	adds	r0, #1
   426cc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   426ce:	480b      	ldr	r0, [pc, #44]	; (426fc <sys_clock_set_timeout+0x58>)
   426d0:	4282      	cmp	r2, r0
   426d2:	bf28      	it	cs
   426d4:	4602      	movcs	r2, r0
   426d6:	2000      	movs	r0, #0
   426d8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   426da:	4909      	ldr	r1, [pc, #36]	; (42700 <sys_clock_set_timeout+0x5c>)
   426dc:	9001      	str	r0, [sp, #4]
   426de:	9100      	str	r1, [sp, #0]
   426e0:	f143 0300 	adc.w	r3, r3, #0
   426e4:	f7ff fe8c 	bl	42400 <compare_set>
}
   426e8:	b002      	add	sp, #8
   426ea:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   426ec:	4803      	ldr	r0, [pc, #12]	; (426fc <sys_clock_set_timeout+0x58>)
   426ee:	e7e1      	b.n	426b4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   426f0:	2400      	movs	r4, #0
   426f2:	e7e0      	b.n	426b6 <sys_clock_set_timeout+0x12>
   426f4:	4c01      	ldr	r4, [pc, #4]	; (426fc <sys_clock_set_timeout+0x58>)
   426f6:	e7de      	b.n	426b6 <sys_clock_set_timeout+0x12>
   426f8:	200400f8 	.word	0x200400f8
   426fc:	007fffff 	.word	0x007fffff
   42700:	000422f5 	.word	0x000422f5

00042704 <sys_clock_elapsed>:
{
   42704:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   42706:	f7ff fe59 	bl	423bc <z_nrf_rtc_timer_read>
   4270a:	4b02      	ldr	r3, [pc, #8]	; (42714 <sys_clock_elapsed+0x10>)
   4270c:	681b      	ldr	r3, [r3, #0]
}
   4270e:	1ac0      	subs	r0, r0, r3
   42710:	bd08      	pop	{r3, pc}
   42712:	bf00      	nop
   42714:	200400f8 	.word	0x200400f8

00042718 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   42718:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   4271c:	b570      	push	{r4, r5, r6, lr}
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   4271e:	2b00      	cmp	r3, #0
        case 1: return NRF_P1;
   42720:	4e0f      	ldr	r6, [pc, #60]	; (42760 <nrf_pin_configure+0x48>)
   42722:	bf0e      	itee	eq
   42724:	4615      	moveq	r5, r2
   42726:	2501      	movne	r5, #1
   42728:	2100      	movne	r1, #0
   4272a:	f010 0f20 	tst.w	r0, #32
   4272e:	4b0d      	ldr	r3, [pc, #52]	; (42764 <nrf_pin_configure+0x4c>)
   42730:	bf18      	it	ne
   42732:	4633      	movne	r3, r6
    *p_pin = pin_number & 0x1F;
   42734:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   42738:	f3c0 1281 	ubfx	r2, r0, #6, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   4273c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   42740:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   42744:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   42748:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
   4274c:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   4274e:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   42752:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   42756:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
   42758:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   4275c:	bd70      	pop	{r4, r5, r6, pc}
   4275e:	bf00      	nop
   42760:	40842800 	.word	0x40842800
   42764:	40842500 	.word	0x40842500

00042768 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
   42768:	4a05      	ldr	r2, [pc, #20]	; (42780 <nrf_gpio_pin_set+0x18>)
   4276a:	4b06      	ldr	r3, [pc, #24]	; (42784 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   4276c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   42770:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   42772:	2801      	cmp	r0, #1
   42774:	bf08      	it	eq
   42776:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   42778:	2201      	movs	r2, #1
   4277a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   4277c:	609a      	str	r2, [r3, #8]
}
   4277e:	4770      	bx	lr
   42780:	40842800 	.word	0x40842800
   42784:	40842500 	.word	0x40842500

00042788 <nrf_gpio_pin_write>:
    if (value == 0)
   42788:	b959      	cbnz	r1, 427a2 <nrf_gpio_pin_write+0x1a>
    return pin_number >> 5;
   4278a:	0943      	lsrs	r3, r0, #5
    *p_pin = pin_number & 0x1F;
   4278c:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   42790:	4a05      	ldr	r2, [pc, #20]	; (427a8 <nrf_gpio_pin_write+0x20>)
   42792:	4806      	ldr	r0, [pc, #24]	; (427ac <nrf_gpio_pin_write+0x24>)
   42794:	2b01      	cmp	r3, #1
   42796:	bf08      	it	eq
   42798:	4602      	moveq	r2, r0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4279a:	2301      	movs	r3, #1
   4279c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   4279e:	60d3      	str	r3, [r2, #12]
}
   427a0:	4770      	bx	lr
        nrf_gpio_pin_set(pin_number);
   427a2:	f7ff bfe1 	b.w	42768 <nrf_gpio_pin_set>
   427a6:	bf00      	nop
   427a8:	40842500 	.word	0x40842500
   427ac:	40842800 	.word	0x40842800

000427b0 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   427b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   427b4:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   427b6:	4b15      	ldr	r3, [pc, #84]	; (4280c <tfm_ns_interface_dispatch+0x5c>)
   427b8:	4604      	mov	r4, r0
   427ba:	f893 8000 	ldrb.w	r8, [r3]
   427be:	460d      	mov	r5, r1
   427c0:	4616      	mov	r6, r2
   427c2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   427c4:	f1b8 0f00 	cmp.w	r8, #0
   427c8:	d115      	bne.n	427f6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   427ca:	4668      	mov	r0, sp
   427cc:	f001 ff8e 	bl	446ec <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   427d0:	463a      	mov	r2, r7
   427d2:	4631      	mov	r1, r6
   427d4:	4628      	mov	r0, r5
   427d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   427d8:	47a0      	blx	r4
   427da:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   427dc:	4668      	mov	r0, sp
   427de:	f001 ff86 	bl	446ee <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   427e2:	f1b8 0f00 	cmp.w	r8, #0
   427e6:	d002      	beq.n	427ee <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   427e8:	4809      	ldr	r0, [pc, #36]	; (42810 <tfm_ns_interface_dispatch+0x60>)
   427ea:	f001 f8ad 	bl	43948 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   427ee:	4620      	mov	r0, r4
   427f0:	b022      	add	sp, #136	; 0x88
   427f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   427f6:	f04f 32ff 	mov.w	r2, #4294967295
   427fa:	f04f 33ff 	mov.w	r3, #4294967295
   427fe:	4804      	ldr	r0, [pc, #16]	; (42810 <tfm_ns_interface_dispatch+0x60>)
   42800:	f001 f82a 	bl	43858 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   42804:	2800      	cmp	r0, #0
   42806:	d0e0      	beq.n	427ca <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   42808:	241f      	movs	r4, #31
   4280a:	e7f0      	b.n	427ee <tfm_ns_interface_dispatch+0x3e>
   4280c:	20040589 	.word	0x20040589
   42810:	200400c8 	.word	0x200400c8

00042814 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   42814:	4b04      	ldr	r3, [pc, #16]	; (42828 <SystemCoreClockUpdate+0x14>)
   42816:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   4281a:	4b04      	ldr	r3, [pc, #16]	; (4282c <SystemCoreClockUpdate+0x18>)
   4281c:	f002 0203 	and.w	r2, r2, #3
   42820:	40d3      	lsrs	r3, r2
   42822:	4a03      	ldr	r2, [pc, #12]	; (42830 <SystemCoreClockUpdate+0x1c>)
   42824:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   42826:	4770      	bx	lr
   42828:	40005000 	.word	0x40005000
   4282c:	07a12000 	.word	0x07a12000
   42830:	20040020 	.word	0x20040020

00042834 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   42834:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   42836:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   42838:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   4283a:	fab2 f382 	clz	r3, r2
   4283e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   42842:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   42844:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   42846:	d010      	beq.n	4286a <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   42848:	fa05 f303 	lsl.w	r3, r5, r3
   4284c:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   42850:	e8d0 6fef 	ldaex	r6, [r0]
   42854:	4296      	cmp	r6, r2
   42856:	d104      	bne.n	42862 <nrfx_flag32_alloc+0x2e>
   42858:	e8c0 3fec 	stlex	ip, r3, [r0]
   4285c:	f1bc 0f00 	cmp.w	ip, #0
   42860:	d1f6      	bne.n	42850 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   42862:	d1e9      	bne.n	42838 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   42864:	4802      	ldr	r0, [pc, #8]	; (42870 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   42866:	700c      	strb	r4, [r1, #0]
}
   42868:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   4286a:	4802      	ldr	r0, [pc, #8]	; (42874 <nrfx_flag32_alloc+0x40>)
   4286c:	e7fc      	b.n	42868 <nrfx_flag32_alloc+0x34>
   4286e:	bf00      	nop
   42870:	0bad0000 	.word	0x0bad0000
   42874:	0bad0002 	.word	0x0bad0002

00042878 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   42878:	6803      	ldr	r3, [r0, #0]
{
   4287a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   4287c:	40cb      	lsrs	r3, r1
   4287e:	07db      	lsls	r3, r3, #31
   42880:	d411      	bmi.n	428a6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   42882:	2301      	movs	r3, #1
   42884:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   42888:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   4288a:	ea41 0203 	orr.w	r2, r1, r3
   4288e:	e8d0 4fef 	ldaex	r4, [r0]
   42892:	429c      	cmp	r4, r3
   42894:	d104      	bne.n	428a0 <nrfx_flag32_free+0x28>
   42896:	e8c0 2fec 	stlex	ip, r2, [r0]
   4289a:	f1bc 0f00 	cmp.w	ip, #0
   4289e:	d1f6      	bne.n	4288e <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   428a0:	d1f2      	bne.n	42888 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   428a2:	4802      	ldr	r0, [pc, #8]	; (428ac <nrfx_flag32_free+0x34>)
}
   428a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   428a6:	4802      	ldr	r0, [pc, #8]	; (428b0 <nrfx_flag32_free+0x38>)
   428a8:	e7fc      	b.n	428a4 <nrfx_flag32_free+0x2c>
   428aa:	bf00      	nop
   428ac:	0bad0000 	.word	0x0bad0000
   428b0:	0bad0004 	.word	0x0bad0004

000428b4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   428b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   428b6:	4605      	mov	r5, r0
    switch (domain)
   428b8:	2803      	cmp	r0, #3
   428ba:	d86f      	bhi.n	4299c <clock_stop+0xe8>
   428bc:	e8df f000 	tbb	[pc, r0]
   428c0:	372a1f02 	.word	0x372a1f02
    p_reg->INTENCLR = mask;
   428c4:	2202      	movs	r2, #2
   428c6:	4b36      	ldr	r3, [pc, #216]	; (429a0 <clock_stop+0xec>)
   428c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   428cc:	2200      	movs	r2, #0
   428ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   428d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   428d6:	2201      	movs	r2, #1
   428d8:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   428da:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   428dc:	429d      	cmp	r5, r3
   428de:	bf18      	it	ne
   428e0:	2400      	movne	r4, #0
   428e2:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   428e6:	4e2e      	ldr	r6, [pc, #184]	; (429a0 <clock_stop+0xec>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   428e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   428ec:	bf08      	it	eq
   428ee:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
   428f2:	2d03      	cmp	r5, #3
   428f4:	d852      	bhi.n	4299c <clock_stop+0xe8>
   428f6:	e8df f005 	tbb	[pc, r5]
   428fa:	3827      	.short	0x3827
   428fc:	4a41      	.short	0x4a41
    p_reg->INTENCLR = mask;
   428fe:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42900:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   42902:	4b27      	ldr	r3, [pc, #156]	; (429a0 <clock_stop+0xec>)
   42904:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42908:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   4290c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42910:	605a      	str	r2, [r3, #4]
}
   42912:	e7e2      	b.n	428da <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   42914:	f44f 7200 	mov.w	r2, #512	; 0x200
   42918:	4b21      	ldr	r3, [pc, #132]	; (429a0 <clock_stop+0xec>)
   4291a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4291e:	2200      	movs	r2, #0
   42920:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   42924:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42928:	2201      	movs	r2, #1
   4292a:	625a      	str	r2, [r3, #36]	; 0x24
}
   4292c:	e7d5      	b.n	428da <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   4292e:	f44f 7280 	mov.w	r2, #256	; 0x100
   42932:	4b1b      	ldr	r3, [pc, #108]	; (429a0 <clock_stop+0xec>)
   42934:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42938:	2200      	movs	r2, #0
   4293a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   4293e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42942:	2201      	movs	r2, #1
   42944:	61da      	str	r2, [r3, #28]
}
   42946:	e7c8      	b.n	428da <clock_stop+0x26>
            if (p_clk_src != NULL)
   42948:	b124      	cbz	r4, 42954 <clock_stop+0xa0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4294a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   4294e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   42952:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   42954:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   42958:	03db      	lsls	r3, r3, #15
   4295a:	d51f      	bpl.n	4299c <clock_stop+0xe8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   4295c:	b9d4      	cbnz	r4, 42994 <clock_stop+0xe0>
   4295e:	2001      	movs	r0, #1
   42960:	f002 f92a 	bl	44bb8 <nrfx_busy_wait>
   42964:	3f01      	subs	r7, #1
   42966:	d1c4      	bne.n	428f2 <clock_stop+0x3e>
   42968:	e018      	b.n	4299c <clock_stop+0xe8>
            if (p_clk_src != NULL)
   4296a:	b124      	cbz	r4, 42976 <clock_stop+0xc2>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4296c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   42970:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   42974:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   42976:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4297a:	e7ed      	b.n	42958 <clock_stop+0xa4>
            if (p_clk_src != NULL)
   4297c:	b124      	cbz	r4, 42988 <clock_stop+0xd4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   4297e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   42982:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   42986:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   42988:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   4298c:	e7e4      	b.n	42958 <clock_stop+0xa4>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   4298e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   42992:	e7e1      	b.n	42958 <clock_stop+0xa4>
   42994:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42998:	2b01      	cmp	r3, #1
   4299a:	d0e0      	beq.n	4295e <clock_stop+0xaa>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   4299c:	b003      	add	sp, #12
   4299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   429a0:	40005000 	.word	0x40005000

000429a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   429a4:	4b04      	ldr	r3, [pc, #16]	; (429b8 <nrfx_clock_init+0x14>)
   429a6:	791a      	ldrb	r2, [r3, #4]
   429a8:	b922      	cbnz	r2, 429b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   429aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   429ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   429ae:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   429b0:	4802      	ldr	r0, [pc, #8]	; (429bc <nrfx_clock_init+0x18>)
   429b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   429b4:	4802      	ldr	r0, [pc, #8]	; (429c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   429b6:	4770      	bx	lr
   429b8:	20040334 	.word	0x20040334
   429bc:	0bad0000 	.word	0x0bad0000
   429c0:	0bad000c 	.word	0x0bad000c

000429c4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   429c4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   429c6:	2005      	movs	r0, #5
   429c8:	f7fe fbc4 	bl	41154 <arch_irq_is_enabled>
   429cc:	b910      	cbnz	r0, 429d4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   429ce:	2005      	movs	r0, #5
   429d0:	f7fe fbb0 	bl	41134 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   429d4:	2201      	movs	r2, #1
   429d6:	4b04      	ldr	r3, [pc, #16]	; (429e8 <nrfx_clock_enable+0x24>)
   429d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   429dc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   429e0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   429e4:	bd08      	pop	{r3, pc}
   429e6:	bf00      	nop
   429e8:	40005000 	.word	0x40005000

000429ec <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   429ec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   429ee:	2803      	cmp	r0, #3
   429f0:	d81c      	bhi.n	42a2c <nrfx_clock_start+0x40>
   429f2:	e8df f000 	tbb	[pc, r0]
   429f6:	3102      	.short	0x3102
   429f8:	493c      	.short	0x493c
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   429fa:	4a2a      	ldr	r2, [pc, #168]	; (42aa4 <nrfx_clock_start+0xb8>)
   429fc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   42a00:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   42a04:	03c9      	lsls	r1, r1, #15
   42a06:	d412      	bmi.n	42a2e <nrfx_clock_start+0x42>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   42a08:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   42a0c:	07db      	lsls	r3, r3, #31
   42a0e:	d418      	bmi.n	42a42 <nrfx_clock_start+0x56>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   42a10:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   42a12:	4a24      	ldr	r2, [pc, #144]	; (42aa4 <nrfx_clock_start+0xb8>)
   42a14:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42a18:	2300      	movs	r3, #0
   42a1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   42a1e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   42a22:	2302      	movs	r3, #2
   42a24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a28:	2301      	movs	r3, #1
   42a2a:	6093      	str	r3, [r2, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   42a2c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   42a2e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   42a32:	2b02      	cmp	r3, #2
   42a34:	d0ed      	beq.n	42a12 <nrfx_clock_start+0x26>
    if (!is_correct_clk)
   42a36:	2b01      	cmp	r3, #1
   42a38:	d0eb      	beq.n	42a12 <nrfx_clock_start+0x26>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   42a3a:	2000      	movs	r0, #0
   42a3c:	f7ff ff3a 	bl	428b4 <clock_stop>
   42a40:	e7e6      	b.n	42a10 <nrfx_clock_start+0x24>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   42a42:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   42a46:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   42a4a:	3b01      	subs	r3, #1
   42a4c:	2b01      	cmp	r3, #1
   42a4e:	d8f4      	bhi.n	42a3a <nrfx_clock_start+0x4e>
    p_reg->INTENSET = mask;
   42a50:	2302      	movs	r3, #2
   42a52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   42a56:	e7e9      	b.n	42a2c <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42a58:	2200      	movs	r2, #0
   42a5a:	4b12      	ldr	r3, [pc, #72]	; (42aa4 <nrfx_clock_start+0xb8>)
   42a5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   42a60:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   42a64:	2201      	movs	r2, #1
   42a66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a6a:	601a      	str	r2, [r3, #0]
}
   42a6c:	e7de      	b.n	42a2c <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42a6e:	2200      	movs	r2, #0
   42a70:	4b0c      	ldr	r3, [pc, #48]	; (42aa4 <nrfx_clock_start+0xb8>)
   42a72:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   42a76:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   42a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   42a7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a82:	2201      	movs	r2, #1
   42a84:	621a      	str	r2, [r3, #32]
}
   42a86:	e7d1      	b.n	42a2c <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42a88:	2200      	movs	r2, #0
   42a8a:	4b06      	ldr	r3, [pc, #24]	; (42aa4 <nrfx_clock_start+0xb8>)
   42a8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   42a90:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   42a94:	f44f 7280 	mov.w	r2, #256	; 0x100
   42a98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a9c:	2201      	movs	r2, #1
   42a9e:	619a      	str	r2, [r3, #24]
}
   42aa0:	e7c4      	b.n	42a2c <nrfx_clock_start+0x40>
   42aa2:	bf00      	nop
   42aa4:	40005000 	.word	0x40005000

00042aa8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   42aa8:	4b28      	ldr	r3, [pc, #160]	; (42b4c <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   42aaa:	b510      	push	{r4, lr}
   42aac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   42ab0:	b152      	cbz	r2, 42ac8 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42ab2:	2000      	movs	r0, #0
   42ab4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   42ab8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   42abc:	2201      	movs	r2, #1
   42abe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   42ac2:	4b23      	ldr	r3, [pc, #140]	; (42b50 <nrfx_power_clock_irq_handler+0xa8>)
   42ac4:	681b      	ldr	r3, [r3, #0]
   42ac6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   42ac8:	4b20      	ldr	r3, [pc, #128]	; (42b4c <nrfx_power_clock_irq_handler+0xa4>)
   42aca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   42ace:	b18a      	cbz	r2, 42af4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42ad0:	2200      	movs	r2, #0
   42ad2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   42ad6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   42ada:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   42ade:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   42ae2:	f002 0203 	and.w	r2, r2, #3
   42ae6:	2a01      	cmp	r2, #1
   42ae8:	f04f 0102 	mov.w	r1, #2
   42aec:	d126      	bne.n	42b3c <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   42aee:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42af2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   42af4:	4b15      	ldr	r3, [pc, #84]	; (42b4c <nrfx_power_clock_irq_handler+0xa4>)
   42af6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   42afa:	b162      	cbz	r2, 42b16 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42afc:	2200      	movs	r2, #0
   42afe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   42b02:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   42b06:	f44f 7280 	mov.w	r2, #256	; 0x100
   42b0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   42b0e:	4b10      	ldr	r3, [pc, #64]	; (42b50 <nrfx_power_clock_irq_handler+0xa8>)
   42b10:	2004      	movs	r0, #4
   42b12:	681b      	ldr	r3, [r3, #0]
   42b14:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   42b16:	4b0d      	ldr	r3, [pc, #52]	; (42b4c <nrfx_power_clock_irq_handler+0xa4>)
   42b18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   42b1c:	b1aa      	cbz	r2, 42b4a <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   42b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   42b22:	2200      	movs	r2, #0
   42b24:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   42b28:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   42b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
   42b30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   42b34:	4b06      	ldr	r3, [pc, #24]	; (42b50 <nrfx_power_clock_irq_handler+0xa8>)
   42b36:	2005      	movs	r0, #5
   42b38:	681b      	ldr	r3, [r3, #0]
   42b3a:	4718      	bx	r3
   42b3c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   42b40:	4b03      	ldr	r3, [pc, #12]	; (42b50 <nrfx_power_clock_irq_handler+0xa8>)
   42b42:	2001      	movs	r0, #1
   42b44:	681b      	ldr	r3, [r3, #0]
   42b46:	4798      	blx	r3
   42b48:	e7d4      	b.n	42af4 <nrfx_power_clock_irq_handler+0x4c>
}
   42b4a:	bd10      	pop	{r4, pc}
   42b4c:	40005000 	.word	0x40005000
   42b50:	20040334 	.word	0x20040334

00042b54 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   42b54:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   42b56:	4801      	ldr	r0, [pc, #4]	; (42b5c <nrfx_dppi_channel_alloc+0x8>)
   42b58:	f7ff be6c 	b.w	42834 <nrfx_flag32_alloc>
   42b5c:	20040024 	.word	0x20040024

00042b60 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   42b60:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   42b62:	f003 021f 	and.w	r2, r3, #31
   42b66:	6002      	str	r2, [r0, #0]
}
   42b68:	4a03      	ldr	r2, [pc, #12]	; (42b78 <nrf_gpio_pin_port_decode+0x18>)
   42b6a:	4804      	ldr	r0, [pc, #16]	; (42b7c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   42b6c:	095b      	lsrs	r3, r3, #5
}
   42b6e:	2b01      	cmp	r3, #1
   42b70:	bf08      	it	eq
   42b72:	4610      	moveq	r0, r2
   42b74:	4770      	bx	lr
   42b76:	bf00      	nop
   42b78:	40842800 	.word	0x40842800
   42b7c:	40842500 	.word	0x40842500

00042b80 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   42b80:	4b03      	ldr	r3, [pc, #12]	; (42b90 <pin_in_use_by_te+0x10>)
   42b82:	3008      	adds	r0, #8
   42b84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   42b88:	f3c0 1040 	ubfx	r0, r0, #5, #1
   42b8c:	4770      	bx	lr
   42b8e:	bf00      	nop
   42b90:	20040028 	.word	0x20040028

00042b94 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   42b94:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   42b96:	4c0d      	ldr	r4, [pc, #52]	; (42bcc <call_handler+0x38>)
   42b98:	f100 0308 	add.w	r3, r0, #8
   42b9c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   42ba0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   42ba2:	05da      	lsls	r2, r3, #23
{
   42ba4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   42ba6:	d507      	bpl.n	42bb8 <call_handler+0x24>
   42ba8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   42bac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   42bb0:	6852      	ldr	r2, [r2, #4]
   42bb2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   42bb6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   42bb8:	68a3      	ldr	r3, [r4, #8]
   42bba:	b12b      	cbz	r3, 42bc8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   42bbc:	4631      	mov	r1, r6
   42bbe:	4628      	mov	r0, r5
   42bc0:	68e2      	ldr	r2, [r4, #12]
    }
}
   42bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   42bc6:	4718      	bx	r3
}
   42bc8:	bd70      	pop	{r4, r5, r6, pc}
   42bca:	bf00      	nop
   42bcc:	20040028 	.word	0x20040028

00042bd0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   42bd0:	4a12      	ldr	r2, [pc, #72]	; (42c1c <release_handler+0x4c>)
   42bd2:	3008      	adds	r0, #8
   42bd4:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   42bd8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   42bda:	05d9      	lsls	r1, r3, #23
   42bdc:	d51b      	bpl.n	42c16 <release_handler+0x46>
   42bde:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   42be2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   42be6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   42bea:	2000      	movs	r0, #0
   42bec:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   42bf0:	f834 3b02 	ldrh.w	r3, [r4], #2
   42bf4:	f413 7f80 	tst.w	r3, #256	; 0x100
   42bf8:	d003      	beq.n	42c02 <release_handler+0x32>
   42bfa:	f3c3 2343 	ubfx	r3, r3, #9, #4
   42bfe:	4299      	cmp	r1, r3
   42c00:	d009      	beq.n	42c16 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   42c02:	3001      	adds	r0, #1
   42c04:	2830      	cmp	r0, #48	; 0x30
   42c06:	d1f3      	bne.n	42bf0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   42c08:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   42c0a:	4805      	ldr	r0, [pc, #20]	; (42c20 <release_handler+0x50>)
}
   42c0c:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
   42c0e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   42c12:	f7ff be31 	b.w	42878 <nrfx_flag32_free>
}
   42c16:	bc10      	pop	{r4}
   42c18:	4770      	bx	lr
   42c1a:	bf00      	nop
   42c1c:	20040028 	.word	0x20040028
   42c20:	2004009c 	.word	0x2004009c

00042c24 <pin_handler_trigger_uninit>:
{
   42c24:	b538      	push	{r3, r4, r5, lr}
   42c26:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   42c28:	f7ff ffaa 	bl	42b80 <pin_in_use_by_te>
   42c2c:	4c0b      	ldr	r4, [pc, #44]	; (42c5c <pin_handler_trigger_uninit+0x38>)
   42c2e:	f102 0508 	add.w	r5, r2, #8
   42c32:	b160      	cbz	r0, 42c4e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   42c34:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   42c36:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   42c3a:	0b5b      	lsrs	r3, r3, #13
   42c3c:	009b      	lsls	r3, r3, #2
   42c3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42c42:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   42c46:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   42c4a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   42c4e:	4610      	mov	r0, r2
   42c50:	f7ff ffbe 	bl	42bd0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   42c54:	2300      	movs	r3, #0
   42c56:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   42c5a:	bd38      	pop	{r3, r4, r5, pc}
   42c5c:	20040028 	.word	0x20040028

00042c60 <nrfx_gpiote_input_configure>:
{
   42c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   42c64:	4604      	mov	r4, r0
   42c66:	4616      	mov	r6, r2
   42c68:	461d      	mov	r5, r3
    if (p_input_config)
   42c6a:	b321      	cbz	r1, 42cb6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42c6c:	4f4e      	ldr	r7, [pc, #312]	; (42da8 <nrfx_gpiote_input_configure+0x148>)
   42c6e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   42c72:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   42c76:	079b      	lsls	r3, r3, #30
   42c78:	d506      	bpl.n	42c88 <nrfx_gpiote_input_configure+0x28>
   42c7a:	f7ff ff81 	bl	42b80 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   42c7e:	b118      	cbz	r0, 42c88 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   42c80:	484a      	ldr	r0, [pc, #296]	; (42dac <nrfx_gpiote_input_configure+0x14c>)
}
   42c82:	b004      	add	sp, #16
   42c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   42c88:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   42c8a:	4620      	mov	r0, r4
   42c8c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   42c90:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   42c94:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   42c98:	f10d 020f 	add.w	r2, sp, #15
   42c9c:	460b      	mov	r3, r1
   42c9e:	f10d 010e 	add.w	r1, sp, #14
   42ca2:	f001 ff8d 	bl	44bc0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   42ca6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   42caa:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   42cae:	f043 0301 	orr.w	r3, r3, #1
   42cb2:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   42cb6:	b196      	cbz	r6, 42cde <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42cb8:	483b      	ldr	r0, [pc, #236]	; (42da8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   42cba:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   42cbc:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42cbe:	f104 0608 	add.w	r6, r4, #8
   42cc2:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
   42cc6:	078f      	lsls	r7, r1, #30
   42cc8:	d50c      	bpl.n	42ce4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   42cca:	2a00      	cmp	r2, #0
   42ccc:	d1d8      	bne.n	42c80 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   42cce:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
   42cd2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   42cd6:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   42cda:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
   42cde:	bbcd      	cbnz	r5, 42d54 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   42ce0:	4833      	ldr	r0, [pc, #204]	; (42db0 <nrfx_gpiote_input_configure+0x150>)
   42ce2:	e7ce      	b.n	42c82 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   42ce4:	f021 0120 	bic.w	r1, r1, #32
   42ce8:	04c9      	lsls	r1, r1, #19
   42cea:	0cc9      	lsrs	r1, r1, #19
   42cec:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
   42cf0:	2a00      	cmp	r2, #0
   42cf2:	d0ec      	beq.n	42cce <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   42cf4:	2b03      	cmp	r3, #3
   42cf6:	d8c3      	bhi.n	42c80 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   42cf8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   42cfc:	4662      	mov	r2, ip
   42cfe:	0092      	lsls	r2, r2, #2
   42d00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   42d04:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   42d08:	b923      	cbnz	r3, 42d14 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   42d0a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   42d0e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   42d12:	e7dc      	b.n	42cce <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   42d14:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   42d18:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   42d1c:	f027 0703 	bic.w	r7, r7, #3
   42d20:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   42d24:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
   42d28:	f041 0120 	orr.w	r1, r1, #32
   42d2c:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
   42d30:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   42d34:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   42d38:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   42d3c:	0227      	lsls	r7, r4, #8
   42d3e:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
   42d42:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
   42d46:	ea47 070e 	orr.w	r7, r7, lr
   42d4a:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   42d4e:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
   42d52:	e7bc      	b.n	42cce <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
   42d54:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   42d56:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   42d5a:	f7ff ff39 	bl	42bd0 <release_handler>
    if (!handler)
   42d5e:	2e00      	cmp	r6, #0
   42d60:	d0be      	beq.n	42ce0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   42d62:	4d11      	ldr	r5, [pc, #68]	; (42da8 <nrfx_gpiote_input_configure+0x148>)
   42d64:	682b      	ldr	r3, [r5, #0]
   42d66:	429e      	cmp	r6, r3
   42d68:	d104      	bne.n	42d74 <nrfx_gpiote_input_configure+0x114>
   42d6a:	686b      	ldr	r3, [r5, #4]
   42d6c:	429f      	cmp	r7, r3
   42d6e:	d101      	bne.n	42d74 <nrfx_gpiote_input_configure+0x114>
   42d70:	2200      	movs	r2, #0
   42d72:	e00a      	b.n	42d8a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   42d74:	480f      	ldr	r0, [pc, #60]	; (42db4 <nrfx_gpiote_input_configure+0x154>)
   42d76:	f10d 010f 	add.w	r1, sp, #15
   42d7a:	f7ff fd5b 	bl	42834 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   42d7e:	4b0c      	ldr	r3, [pc, #48]	; (42db0 <nrfx_gpiote_input_configure+0x150>)
   42d80:	4298      	cmp	r0, r3
   42d82:	f47f af7e 	bne.w	42c82 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   42d86:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   42d8a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   42d8e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   42d90:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   42d92:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   42d96:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   42d9a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   42d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   42da2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   42da6:	e79b      	b.n	42ce0 <nrfx_gpiote_input_configure+0x80>
   42da8:	20040028 	.word	0x20040028
   42dac:	0bad0004 	.word	0x0bad0004
   42db0:	0bad0000 	.word	0x0bad0000
   42db4:	2004009c 	.word	0x2004009c

00042db8 <nrfx_gpiote_output_configure>:
{
   42db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   42dba:	4604      	mov	r4, r0
   42dbc:	4615      	mov	r5, r2
   42dbe:	b085      	sub	sp, #20
    if (p_config)
   42dc0:	b319      	cbz	r1, 42e0a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42dc2:	4e34      	ldr	r6, [pc, #208]	; (42e94 <nrfx_gpiote_output_configure+0xdc>)
   42dc4:	f100 0708 	add.w	r7, r0, #8
   42dc8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   42dcc:	0793      	lsls	r3, r2, #30
   42dce:	d403      	bmi.n	42dd8 <nrfx_gpiote_output_configure+0x20>
   42dd0:	f7ff fed6 	bl	42b80 <pin_in_use_by_te>
   42dd4:	2800      	cmp	r0, #0
   42dd6:	d15a      	bne.n	42e8e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   42dd8:	f012 0f1c 	tst.w	r2, #28
   42ddc:	d002      	beq.n	42de4 <nrfx_gpiote_output_configure+0x2c>
   42dde:	784b      	ldrb	r3, [r1, #1]
   42de0:	2b01      	cmp	r3, #1
   42de2:	d054      	beq.n	42e8e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   42de4:	2301      	movs	r3, #1
   42de6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   42dea:	2300      	movs	r3, #0
   42dec:	1c4a      	adds	r2, r1, #1
   42dee:	e9cd 1300 	strd	r1, r3, [sp]
   42df2:	4620      	mov	r0, r4
   42df4:	1c8b      	adds	r3, r1, #2
   42df6:	f10d 010f 	add.w	r1, sp, #15
   42dfa:	f001 fee1 	bl	44bc0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   42dfe:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   42e02:	f043 0303 	orr.w	r3, r3, #3
   42e06:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   42e0a:	b915      	cbnz	r5, 42e12 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   42e0c:	4822      	ldr	r0, [pc, #136]	; (42e98 <nrfx_gpiote_output_configure+0xe0>)
}
   42e0e:	b005      	add	sp, #20
   42e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42e12:	4e20      	ldr	r6, [pc, #128]	; (42e94 <nrfx_gpiote_output_configure+0xdc>)
   42e14:	f104 0708 	add.w	r7, r4, #8
   42e18:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   42e1c:	0783      	lsls	r3, r0, #30
   42e1e:	d536      	bpl.n	42e8e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   42e20:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   42e24:	2300      	movs	r3, #0
   42e26:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   42e28:	f020 0020 	bic.w	r0, r0, #32
   42e2c:	0089      	lsls	r1, r1, #2
   42e2e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   42e32:	04c0      	lsls	r0, r0, #19
   42e34:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   42e38:	0cc0      	lsrs	r0, r0, #19
   42e3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   42e3e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   42e42:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   42e46:	786a      	ldrb	r2, [r5, #1]
   42e48:	2a00      	cmp	r2, #0
   42e4a:	d0df      	beq.n	42e0c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   42e4c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   42e50:	78ad      	ldrb	r5, [r5, #2]
   42e52:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   42e56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   42e5a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   42e5e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   42e62:	0223      	lsls	r3, r4, #8
   42e64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   42e68:	0412      	lsls	r2, r2, #16
   42e6a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   42e6e:	ea43 030e 	orr.w	r3, r3, lr
   42e72:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   42e74:	052a      	lsls	r2, r5, #20
   42e76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   42e7a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   42e7e:	4313      	orrs	r3, r2
   42e80:	f040 0020 	orr.w	r0, r0, #32
   42e84:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   42e88:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   42e8c:	e7be      	b.n	42e0c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   42e8e:	4803      	ldr	r0, [pc, #12]	; (42e9c <nrfx_gpiote_output_configure+0xe4>)
   42e90:	e7bd      	b.n	42e0e <nrfx_gpiote_output_configure+0x56>
   42e92:	bf00      	nop
   42e94:	20040028 	.word	0x20040028
   42e98:	0bad0000 	.word	0x0bad0000
   42e9c:	0bad0004 	.word	0x0bad0004

00042ea0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   42ea0:	4b01      	ldr	r3, [pc, #4]	; (42ea8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   42ea2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   42ea6:	4770      	bx	lr
   42ea8:	20040028 	.word	0x20040028

00042eac <nrfx_gpiote_channel_get>:
{
   42eac:	b508      	push	{r3, lr}
   42eae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   42eb0:	f7ff fe66 	bl	42b80 <pin_in_use_by_te>
   42eb4:	b138      	cbz	r0, 42ec6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   42eb6:	4b05      	ldr	r3, [pc, #20]	; (42ecc <nrfx_gpiote_channel_get+0x20>)
   42eb8:	3208      	adds	r2, #8
   42eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   42ebe:	4804      	ldr	r0, [pc, #16]	; (42ed0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   42ec0:	0b5b      	lsrs	r3, r3, #13
   42ec2:	700b      	strb	r3, [r1, #0]
}
   42ec4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   42ec6:	4803      	ldr	r0, [pc, #12]	; (42ed4 <nrfx_gpiote_channel_get+0x28>)
   42ec8:	e7fc      	b.n	42ec4 <nrfx_gpiote_channel_get+0x18>
   42eca:	bf00      	nop
   42ecc:	20040028 	.word	0x20040028
   42ed0:	0bad0000 	.word	0x0bad0000
   42ed4:	0bad0004 	.word	0x0bad0004

00042ed8 <nrfx_gpiote_init>:
{
   42ed8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   42eda:	4c0f      	ldr	r4, [pc, #60]	; (42f18 <nrfx_gpiote_init+0x40>)
   42edc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   42ee0:	b9bd      	cbnz	r5, 42f12 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   42ee2:	2260      	movs	r2, #96	; 0x60
   42ee4:	4629      	mov	r1, r5
   42ee6:	f104 0010 	add.w	r0, r4, #16
   42eea:	f001 fc4a 	bl	44782 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   42eee:	202f      	movs	r0, #47	; 0x2f
   42ef0:	f7fe f920 	bl	41134 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   42ef4:	4b09      	ldr	r3, [pc, #36]	; (42f1c <nrfx_gpiote_init+0x44>)
    return err_code;
   42ef6:	480a      	ldr	r0, [pc, #40]	; (42f20 <nrfx_gpiote_init+0x48>)
   42ef8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   42efc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   42f00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   42f04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   42f08:	2301      	movs	r3, #1
   42f0a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   42f0e:	6763      	str	r3, [r4, #116]	; 0x74
}
   42f10:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   42f12:	4804      	ldr	r0, [pc, #16]	; (42f24 <nrfx_gpiote_init+0x4c>)
   42f14:	e7fc      	b.n	42f10 <nrfx_gpiote_init+0x38>
   42f16:	bf00      	nop
   42f18:	20040028 	.word	0x20040028
   42f1c:	4002f000 	.word	0x4002f000
   42f20:	0bad0000 	.word	0x0bad0000
   42f24:	0bad0005 	.word	0x0bad0005

00042f28 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   42f28:	4b03      	ldr	r3, [pc, #12]	; (42f38 <nrfx_gpiote_is_init+0x10>)
   42f2a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   42f2e:	3800      	subs	r0, #0
   42f30:	bf18      	it	ne
   42f32:	2001      	movne	r0, #1
   42f34:	4770      	bx	lr
   42f36:	bf00      	nop
   42f38:	20040028 	.word	0x20040028

00042f3c <nrfx_gpiote_channel_free>:
{
   42f3c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   42f3e:	4801      	ldr	r0, [pc, #4]	; (42f44 <nrfx_gpiote_channel_free+0x8>)
   42f40:	f7ff bc9a 	b.w	42878 <nrfx_flag32_free>
   42f44:	20040098 	.word	0x20040098

00042f48 <nrfx_gpiote_channel_alloc>:
{
   42f48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   42f4a:	4801      	ldr	r0, [pc, #4]	; (42f50 <nrfx_gpiote_channel_alloc+0x8>)
   42f4c:	f7ff bc72 	b.w	42834 <nrfx_flag32_alloc>
   42f50:	20040098 	.word	0x20040098

00042f54 <nrfx_gpiote_trigger_enable>:
{
   42f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   42f56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   42f58:	f7ff fe12 	bl	42b80 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42f5c:	4b1d      	ldr	r3, [pc, #116]	; (42fd4 <nrfx_gpiote_trigger_enable+0x80>)
   42f5e:	f104 0208 	add.w	r2, r4, #8
   42f62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   42f66:	b1d0      	cbz	r0, 42f9e <nrfx_gpiote_trigger_enable+0x4a>
   42f68:	f013 0502 	ands.w	r5, r3, #2
   42f6c:	d117      	bne.n	42f9e <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   42f6e:	481a      	ldr	r0, [pc, #104]	; (42fd8 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   42f70:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   42f72:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   42f74:	5085      	str	r5, [r0, r2]
   42f76:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   42f78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   42f7c:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   42f80:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   42f84:	f040 0001 	orr.w	r0, r0, #1
   42f88:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   42f8c:	b129      	cbz	r1, 42f9a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   42f8e:	2201      	movs	r2, #1
   42f90:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   42f94:	4a11      	ldr	r2, [pc, #68]	; (42fdc <nrfx_gpiote_trigger_enable+0x88>)
   42f96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   42f9a:	b003      	add	sp, #12
   42f9c:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   42f9e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   42fa2:	2b04      	cmp	r3, #4
   42fa4:	d011      	beq.n	42fca <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   42fa6:	2b05      	cmp	r3, #5
   42fa8:	d011      	beq.n	42fce <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   42faa:	a801      	add	r0, sp, #4
   42fac:	9401      	str	r4, [sp, #4]
   42fae:	f7ff fdd7 	bl	42b60 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   42fb2:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   42fb4:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   42fb6:	40d9      	lsrs	r1, r3
   42fb8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   42fbc:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   42fbe:	4620      	mov	r0, r4
}
   42fc0:	b003      	add	sp, #12
   42fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   42fc6:	f001 be42 	b.w	44c4e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   42fca:	2103      	movs	r1, #3
   42fcc:	e7f7      	b.n	42fbe <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   42fce:	2102      	movs	r1, #2
   42fd0:	e7f5      	b.n	42fbe <nrfx_gpiote_trigger_enable+0x6a>
   42fd2:	bf00      	nop
   42fd4:	20040028 	.word	0x20040028
   42fd8:	4002f100 	.word	0x4002f100
   42fdc:	4002f000 	.word	0x4002f000

00042fe0 <nrfx_gpiote_trigger_disable>:
{
   42fe0:	b508      	push	{r3, lr}
   42fe2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   42fe4:	f7ff fdcc 	bl	42b80 <pin_in_use_by_te>
   42fe8:	b1c0      	cbz	r0, 4301c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   42fea:	4b0f      	ldr	r3, [pc, #60]	; (43028 <nrfx_gpiote_trigger_disable+0x48>)
   42fec:	f102 0108 	add.w	r1, r2, #8
   42ff0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   42ff4:	0799      	lsls	r1, r3, #30
   42ff6:	d411      	bmi.n	4301c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   42ff8:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   42ffa:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   42ffc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   42ffe:	490b      	ldr	r1, [pc, #44]	; (4302c <nrfx_gpiote_trigger_disable+0x4c>)
   43000:	009b      	lsls	r3, r3, #2
   43002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   43006:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4300a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   4300e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   43012:	f022 0203 	bic.w	r2, r2, #3
   43016:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   4301a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4301c:	2100      	movs	r1, #0
}
   4301e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   43022:	4610      	mov	r0, r2
   43024:	f001 be13 	b.w	44c4e <nrf_gpio_cfg_sense_set>
   43028:	20040028 	.word	0x20040028
   4302c:	4002f000 	.word	0x4002f000

00043030 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   43030:	4b10      	ldr	r3, [pc, #64]	; (43074 <nrfx_gpiote_pin_uninit+0x44>)
   43032:	f100 0208 	add.w	r2, r0, #8
   43036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   4303a:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   4303c:	07db      	lsls	r3, r3, #31
{
   4303e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   43040:	d516      	bpl.n	43070 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   43042:	f7ff ffcd 	bl	42fe0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   43046:	4620      	mov	r0, r4
   43048:	f7ff fdec 	bl	42c24 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4304c:	a801      	add	r0, sp, #4
   4304e:	9401      	str	r4, [sp, #4]
   43050:	f7ff fd86 	bl	42b60 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   43054:	9b01      	ldr	r3, [sp, #4]
   43056:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   4305a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   4305e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   43062:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   43066:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   4306a:	4803      	ldr	r0, [pc, #12]	; (43078 <nrfx_gpiote_pin_uninit+0x48>)
}
   4306c:	b002      	add	sp, #8
   4306e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   43070:	4802      	ldr	r0, [pc, #8]	; (4307c <nrfx_gpiote_pin_uninit+0x4c>)
   43072:	e7fb      	b.n	4306c <nrfx_gpiote_pin_uninit+0x3c>
   43074:	20040028 	.word	0x20040028
   43078:	0bad0000 	.word	0x0bad0000
   4307c:	0bad0004 	.word	0x0bad0004

00043080 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   43080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   43084:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   43086:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   43088:	4634      	mov	r4, r6
{
   4308a:	4b60      	ldr	r3, [pc, #384]	; (4320c <nrfx_gpiote_irq_handler+0x18c>)
    return p_reg->INTENSET & mask;
   4308c:	4860      	ldr	r0, [pc, #384]	; (43210 <nrfx_gpiote_irq_handler+0x190>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4308e:	4961      	ldr	r1, [pc, #388]	; (43214 <nrfx_gpiote_irq_handler+0x194>)
{
   43090:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43092:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   43094:	b135      	cbz	r5, 430a4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   43096:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   4309a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4309c:	bf1e      	ittt	ne
   4309e:	601c      	strne	r4, [r3, #0]
   430a0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   430a2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   430a4:	3304      	adds	r3, #4
   430a6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   430a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   430ac:	d1f1      	bne.n	43092 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   430ae:	f8df 9160 	ldr.w	r9, [pc, #352]	; 43210 <nrfx_gpiote_irq_handler+0x190>
   430b2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   430b6:	2b00      	cmp	r3, #0
   430b8:	f000 808a 	beq.w	431d0 <nrfx_gpiote_irq_handler+0x150>
        *p_masks = gpio_regs[i]->LATCH;
   430bc:	4f56      	ldr	r7, [pc, #344]	; (43218 <nrfx_gpiote_irq_handler+0x198>)
   430be:	6a3b      	ldr	r3, [r7, #32]
   430c0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   430c2:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
   430c4:	4b55      	ldr	r3, [pc, #340]	; (4321c <nrfx_gpiote_irq_handler+0x19c>)
   430c6:	6a1a      	ldr	r2, [r3, #32]
   430c8:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   430ca:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   430cc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   430d0:	f10d 0a10 	add.w	sl, sp, #16
   430d4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   430d8:	9300      	str	r3, [sp, #0]
   430da:	e049      	b.n	43170 <nrfx_gpiote_irq_handler+0xf0>
                uint32_t pin = NRF_CTZ(latch[i]);
   430dc:	fa94 f4a4 	rbit	r4, r4
   430e0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   430e4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   430e6:	4a4e      	ldr	r2, [pc, #312]	; (43220 <nrfx_gpiote_irq_handler+0x1a0>)
                pin += 32 * i;
   430e8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   430ea:	f104 0308 	add.w	r3, r4, #8
   430ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   430f2:	08e0      	lsrs	r0, r4, #3
   430f4:	0899      	lsrs	r1, r3, #2
   430f6:	f3c3 0582 	ubfx	r5, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   430fa:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
   430fc:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   43100:	fa03 fc02 	lsl.w	ip, r3, r2
   43104:	f81a 2000 	ldrb.w	r2, [sl, r0]
   43108:	9403      	str	r4, [sp, #12]
   4310a:	ea22 020c 	bic.w	r2, r2, ip
   4310e:	f80a 2000 	strb.w	r2, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43112:	a803      	add	r0, sp, #12
   43114:	f7ff fd24 	bl	42b60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   43118:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
   4311a:	074b      	lsls	r3, r1, #29
   4311c:	f102 0280 	add.w	r2, r2, #128	; 0x80
   43120:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   43124:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   43126:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   4312a:	d52b      	bpl.n	43184 <nrfx_gpiote_irq_handler+0x104>
        call_handler(pin, trigger);
   4312c:	4620      	mov	r0, r4
   4312e:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   43130:	b2d5      	uxtb	r5, r2
   43132:	f7ff fd2f 	bl	42b94 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43136:	a803      	add	r0, sp, #12
   43138:	9403      	str	r4, [sp, #12]
   4313a:	f7ff fd11 	bl	42b60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4313e:	9b03      	ldr	r3, [sp, #12]
   43140:	3380      	adds	r3, #128	; 0x80
   43142:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   43146:	f3c3 4301 	ubfx	r3, r3, #16, #2
   4314a:	429d      	cmp	r5, r3
   4314c:	d107      	bne.n	4315e <nrfx_gpiote_irq_handler+0xde>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4314e:	2100      	movs	r1, #0
   43150:	4620      	mov	r0, r4
   43152:	f001 fd7c 	bl	44c4e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   43156:	4629      	mov	r1, r5
   43158:	4620      	mov	r0, r4
   4315a:	f001 fd78 	bl	44c4e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4315e:	a803      	add	r0, sp, #12
   43160:	9403      	str	r4, [sp, #12]
   43162:	f7ff fcfd 	bl	42b60 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   43166:	2201      	movs	r2, #1
   43168:	9b03      	ldr	r3, [sp, #12]
   4316a:	fa02 f303 	lsl.w	r3, r2, r3
   4316e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   43170:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   43174:	2c00      	cmp	r4, #0
   43176:	d1b1      	bne.n	430dc <nrfx_gpiote_irq_handler+0x5c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   43178:	f1b8 0f00 	cmp.w	r8, #0
   4317c:	d11a      	bne.n	431b4 <nrfx_gpiote_irq_handler+0x134>
   4317e:	f04f 0801 	mov.w	r8, #1
   43182:	e7a7      	b.n	430d4 <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   43184:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   43186:	bf0c      	ite	eq
   43188:	2103      	moveq	r1, #3
   4318a:	2102      	movne	r1, #2
   4318c:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   4318e:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   43190:	f001 fd5d 	bl	44c4e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   43194:	2d03      	cmp	r5, #3
   43196:	d004      	beq.n	431a2 <nrfx_gpiote_irq_handler+0x122>
   43198:	9a01      	ldr	r2, [sp, #4]
   4319a:	2a02      	cmp	r2, #2
   4319c:	d106      	bne.n	431ac <nrfx_gpiote_irq_handler+0x12c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   4319e:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   431a0:	d1dd      	bne.n	4315e <nrfx_gpiote_irq_handler+0xde>
            call_handler(pin, trigger);
   431a2:	4659      	mov	r1, fp
   431a4:	4620      	mov	r0, r4
   431a6:	f7ff fcf5 	bl	42b94 <call_handler>
   431aa:	e7d8      	b.n	4315e <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   431ac:	2a03      	cmp	r2, #3
   431ae:	d1d6      	bne.n	4315e <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   431b0:	2d02      	cmp	r5, #2
   431b2:	e7f5      	b.n	431a0 <nrfx_gpiote_irq_handler+0x120>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   431b4:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   431b8:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   431bc:	6a3a      	ldr	r2, [r7, #32]
   431be:	4917      	ldr	r1, [pc, #92]	; (4321c <nrfx_gpiote_irq_handler+0x19c>)
   431c0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   431c2:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
   431c4:	6a0b      	ldr	r3, [r1, #32]
   431c6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   431c8:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
   431ca:	4313      	orrs	r3, r2
   431cc:	f47f af7e 	bne.w	430cc <nrfx_gpiote_irq_handler+0x4c>
        mask &= ~NRFX_BIT(ch);
   431d0:	2401      	movs	r4, #1
    while (mask)
   431d2:	b916      	cbnz	r6, 431da <nrfx_gpiote_irq_handler+0x15a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   431d4:	b007      	add	sp, #28
   431d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   431da:	fa96 f3a6 	rbit	r3, r6
   431de:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   431e2:	fa04 f203 	lsl.w	r2, r4, r3
   431e6:	009b      	lsls	r3, r3, #2
   431e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   431ec:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   431f0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   431f4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   431f8:	f3c0 2005 	ubfx	r0, r0, #8, #6
   431fc:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   43200:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   43204:	f7ff fcc6 	bl	42b94 <call_handler>
   43208:	e7e3      	b.n	431d2 <nrfx_gpiote_irq_handler+0x152>
   4320a:	bf00      	nop
   4320c:	4002f100 	.word	0x4002f100
   43210:	4002f000 	.word	0x4002f000
   43214:	4002f120 	.word	0x4002f120
   43218:	40842500 	.word	0x40842500
   4321c:	40842800 	.word	0x40842800
   43220:	20040028 	.word	0x20040028

00043224 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
   43224:	4b02      	ldr	r3, [pc, #8]	; (43230 <mbedtls_platform_set_calloc_free+0xc>)
   43226:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
   43228:	4b02      	ldr	r3, [pc, #8]	; (43234 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
   4322a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
   4322c:	6019      	str	r1, [r3, #0]
}
   4322e:	4770      	bx	lr
   43230:	200400a4 	.word	0x200400a4
   43234:	200400a8 	.word	0x200400a8

00043238 <_heap_init>:
 *
 * Not static in order to allow extern use.
 */
void _heap_init(void)
{
	mbedtls_memory_buffer_alloc_init(mbedtls_heap, sizeof(mbedtls_heap));
   43238:	f44f 7100 	mov.w	r1, #512	; 0x200
   4323c:	4801      	ldr	r0, [pc, #4]	; (43244 <_heap_init+0xc>)
   4323e:	f000 b947 	b.w	434d0 <mbedtls_memory_buffer_alloc_init>
   43242:	bf00      	nop
   43244:	20040389 	.word	0x20040389

00043248 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
   43248:	6801      	ldr	r1, [r0, #0]
   4324a:	4a0e      	ldr	r2, [pc, #56]	; (43284 <verify_header+0x3c>)
{
   4324c:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
   4324e:	4291      	cmp	r1, r2
   43250:	d115      	bne.n	4327e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
   43252:	69c1      	ldr	r1, [r0, #28]
   43254:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
   43258:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
   4325c:	4291      	cmp	r1, r2
   4325e:	d10e      	bne.n	4327e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
   43260:	6882      	ldr	r2, [r0, #8]
   43262:	2a01      	cmp	r2, #1
   43264:	d80b      	bhi.n	4327e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
   43266:	68c2      	ldr	r2, [r0, #12]
   43268:	b112      	cbz	r2, 43270 <verify_header+0x28>
   4326a:	6901      	ldr	r1, [r0, #16]
   4326c:	428a      	cmp	r2, r1
   4326e:	d006      	beq.n	4327e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
   43270:	6958      	ldr	r0, [r3, #20]
   43272:	b128      	cbz	r0, 43280 <verify_header+0x38>
   43274:	699b      	ldr	r3, [r3, #24]
   43276:	1a1b      	subs	r3, r3, r0
   43278:	4258      	negs	r0, r3
   4327a:	4158      	adcs	r0, r3
   4327c:	4770      	bx	lr
        return( 1 );
   4327e:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
   43280:	4770      	bx	lr
   43282:	bf00      	nop
   43284:	ff00aa55 	.word	0xff00aa55

00043288 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
   43288:	4b0d      	ldr	r3, [pc, #52]	; (432c0 <verify_chain+0x38>)
{
   4328a:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
   4328c:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
   4328e:	b1a6      	cbz	r6, 432ba <verify_chain+0x32>
   43290:	4630      	mov	r0, r6
   43292:	f7ff ffd9 	bl	43248 <verify_header>
   43296:	4604      	mov	r4, r0
   43298:	b978      	cbnz	r0, 432ba <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
   4329a:	68f3      	ldr	r3, [r6, #12]
   4329c:	b96b      	cbnz	r3, 432ba <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
   4329e:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
   432a0:	b90d      	cbnz	r5, 432a6 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
   432a2:	4620      	mov	r0, r4
   432a4:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
   432a6:	4628      	mov	r0, r5
   432a8:	f7ff ffce 	bl	43248 <verify_header>
   432ac:	b928      	cbnz	r0, 432ba <verify_chain+0x32>
        if( cur->prev != prv )
   432ae:	68eb      	ldr	r3, [r5, #12]
   432b0:	42b3      	cmp	r3, r6
   432b2:	d102      	bne.n	432ba <verify_chain+0x32>
        cur = cur->next;
   432b4:	462e      	mov	r6, r5
   432b6:	692d      	ldr	r5, [r5, #16]
   432b8:	e7f2      	b.n	432a0 <verify_chain+0x18>
        return( 1 );
   432ba:	2401      	movs	r4, #1
   432bc:	e7f1      	b.n	432a2 <verify_chain+0x1a>
   432be:	bf00      	nop
   432c0:	2004033c 	.word	0x2004033c

000432c4 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
   432c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
   432c8:	4f3e      	ldr	r7, [pc, #248]	; (433c4 <buffer_alloc_calloc+0x100>)
   432ca:	683c      	ldr	r4, [r7, #0]
   432cc:	b1d4      	cbz	r4, 43304 <buffer_alloc_calloc+0x40>
   432ce:	68bc      	ldr	r4, [r7, #8]
   432d0:	b1c4      	cbz	r4, 43304 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
   432d2:	2800      	cmp	r0, #0
   432d4:	d04b      	beq.n	4336e <buffer_alloc_calloc+0xaa>
   432d6:	2900      	cmp	r1, #0
   432d8:	d049      	beq.n	4336e <buffer_alloc_calloc+0xaa>
    original_len = len = n * size;
   432da:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
   432de:	fbb5 f0f0 	udiv	r0, r5, r0
   432e2:	4288      	cmp	r0, r1
   432e4:	d143      	bne.n	4336e <buffer_alloc_calloc+0xaa>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   432e6:	1d28      	adds	r0, r5, #4
   432e8:	d841      	bhi.n	4336e <buffer_alloc_calloc+0xaa>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   432ea:	07a9      	lsls	r1, r5, #30
   432ec:	d00d      	beq.n	4330a <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   432ee:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   432f2:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
   432f4:	68fc      	ldr	r4, [r7, #12]
   432f6:	e003      	b.n	43300 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
   432f8:	6863      	ldr	r3, [r4, #4]
   432fa:	42b3      	cmp	r3, r6
   432fc:	d239      	bcs.n	43372 <buffer_alloc_calloc+0xae>
            break;

        cur = cur->next_free;
   432fe:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
   43300:	2c00      	cmp	r4, #0
   43302:	d1f9      	bne.n	432f8 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
   43304:	4620      	mov	r0, r4
   43306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4330a:	462e      	mov	r6, r5
   4330c:	e7f2      	b.n	432f4 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
   4330e:	60f8      	str	r0, [r7, #12]
   43310:	e041      	b.n	43396 <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
   43312:	f106 0c20 	add.w	ip, r6, #32
   43316:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
   4331a:	3920      	subs	r1, #32
   4331c:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
   4331e:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
   43320:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 433c8 <buffer_alloc_calloc+0x104>
    new->prev = cur;
   43324:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
   43328:	6921      	ldr	r1, [r4, #16]
   4332a:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
   4332c:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
   43330:	f8df c098 	ldr.w	ip, [pc, #152]	; 433cc <buffer_alloc_calloc+0x108>
   43334:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
   43338:	b101      	cbz	r1, 4333c <buffer_alloc_calloc+0x78>
        new->next->prev = new;
   4333a:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
   4333c:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
   43340:	b19a      	cbz	r2, 4336a <buffer_alloc_calloc+0xa6>
        new->prev_free->next_free = new;
   43342:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
   43344:	699a      	ldr	r2, [r3, #24]
   43346:	b102      	cbz	r2, 4334a <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
   43348:	6153      	str	r3, [r2, #20]
    cur->next = new;
   4334a:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
   4334c:	2300      	movs	r3, #0
    cur->alloc = 1;
   4334e:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
   43352:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
   43356:	693b      	ldr	r3, [r7, #16]
    cur->size = len;
   43358:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
   4335c:	07db      	lsls	r3, r3, #31
   4335e:	d529      	bpl.n	433b4 <buffer_alloc_calloc+0xf0>
   43360:	f7ff ff92 	bl	43288 <verify_chain>
   43364:	b330      	cbz	r0, 433b4 <buffer_alloc_calloc+0xf0>
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1
void _exit(int status);
static inline void exit(int status)
{
	_exit(status);
   43366:	4648      	mov	r0, r9
   43368:	e022      	b.n	433b0 <buffer_alloc_calloc+0xec>
        heap.first_free = new;
   4336a:	60fb      	str	r3, [r7, #12]
   4336c:	e7ea      	b.n	43344 <buffer_alloc_calloc+0x80>
        return( NULL );
   4336e:	2400      	movs	r4, #0
   43370:	e7c8      	b.n	43304 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
   43372:	68a3      	ldr	r3, [r4, #8]
   43374:	b113      	cbz	r3, 4337c <buffer_alloc_calloc+0xb8>
   43376:	2001      	movs	r0, #1
   43378:	f7fe fafc 	bl	41974 <_exit>
            cur->prev_free->next_free = cur->next_free;
   4337c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    if( cur->size - len < sizeof(memory_header) +
   43380:	6861      	ldr	r1, [r4, #4]
   43382:	f104 0820 	add.w	r8, r4, #32
   43386:	1b89      	subs	r1, r1, r6
   43388:	2923      	cmp	r1, #35	; 0x23
   4338a:	d8c2      	bhi.n	43312 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
   4338c:	2301      	movs	r3, #1
   4338e:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
   43390:	2a00      	cmp	r2, #0
   43392:	d0bc      	beq.n	4330e <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
   43394:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
   43396:	69a3      	ldr	r3, [r4, #24]
   43398:	b103      	cbz	r3, 4339c <buffer_alloc_calloc+0xd8>
            cur->next_free->prev_free = cur->prev_free;
   4339a:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
   4339c:	2300      	movs	r3, #0
        cur->next_free = NULL;
   4339e:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
   433a2:	693b      	ldr	r3, [r7, #16]
   433a4:	07da      	lsls	r2, r3, #31
   433a6:	d505      	bpl.n	433b4 <buffer_alloc_calloc+0xf0>
   433a8:	f7ff ff6e 	bl	43288 <verify_chain>
   433ac:	b110      	cbz	r0, 433b4 <buffer_alloc_calloc+0xf0>
   433ae:	2001      	movs	r0, #1
   433b0:	f7fe fae0 	bl	41974 <_exit>
    memset( ret, 0, original_len );
   433b4:	462a      	mov	r2, r5
   433b6:	2100      	movs	r1, #0
   433b8:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
   433ba:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
   433bc:	f001 f9e1 	bl	44782 <memset>
    return( ret );
   433c0:	e7a0      	b.n	43304 <buffer_alloc_calloc+0x40>
   433c2:	bf00      	nop
   433c4:	2004033c 	.word	0x2004033c
   433c8:	ff00aa55 	.word	0xff00aa55
   433cc:	ee119966 	.word	0xee119966

000433d0 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
   433d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
   433d2:	4605      	mov	r5, r0
   433d4:	2800      	cmp	r0, #0
   433d6:	d078      	beq.n	434ca <buffer_alloc_free+0xfa>
   433d8:	4f3c      	ldr	r7, [pc, #240]	; (434cc <buffer_alloc_free+0xfc>)
   433da:	683b      	ldr	r3, [r7, #0]
   433dc:	2b00      	cmp	r3, #0
   433de:	d074      	beq.n	434ca <buffer_alloc_free+0xfa>
   433e0:	68ba      	ldr	r2, [r7, #8]
   433e2:	2a00      	cmp	r2, #0
   433e4:	d071      	beq.n	434ca <buffer_alloc_free+0xfa>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
   433e6:	4283      	cmp	r3, r0
   433e8:	d803      	bhi.n	433f2 <buffer_alloc_free+0x22>
   433ea:	687a      	ldr	r2, [r7, #4]
   433ec:	4413      	add	r3, r2
   433ee:	4298      	cmp	r0, r3
   433f0:	d302      	bcc.n	433f8 <buffer_alloc_free+0x28>
   433f2:	2001      	movs	r0, #1
   433f4:	f7fe fabe 	bl	41974 <_exit>
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    }

    p -= sizeof(memory_header);
   433f8:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
   433fc:	4620      	mov	r0, r4
   433fe:	f7ff ff23 	bl	43248 <verify_header>
   43402:	b110      	cbz	r0, 4340a <buffer_alloc_free+0x3a>
   43404:	2001      	movs	r0, #1
   43406:	f7fe fab5 	bl	41974 <_exit>
        mbedtls_exit( 1 );

    if( hdr->alloc != 1 )
   4340a:	f855 3c18 	ldr.w	r3, [r5, #-24]
   4340e:	2b01      	cmp	r3, #1
   43410:	d002      	beq.n	43418 <buffer_alloc_free+0x48>
   43412:	2001      	movs	r0, #1
   43414:	f7fe faae 	bl	41974 <_exit>
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    }

    hdr->alloc = 0;
   43418:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   4341a:	f855 6c14 	ldr.w	r6, [r5, #-20]
    hdr->alloc = 0;
   4341e:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   43422:	b1ae      	cbz	r6, 43450 <buffer_alloc_free+0x80>
   43424:	68b2      	ldr	r2, [r6, #8]
   43426:	b992      	cbnz	r2, 4344e <buffer_alloc_free+0x7e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
   43428:	f855 3c1c 	ldr.w	r3, [r5, #-28]
   4342c:	f103 0220 	add.w	r2, r3, #32
   43430:	6873      	ldr	r3, [r6, #4]
   43432:	4413      	add	r3, r2
   43434:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
   43436:	f855 3c10 	ldr.w	r3, [r5, #-16]
   4343a:	6133      	str	r3, [r6, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
   4343c:	b103      	cbz	r3, 43440 <buffer_alloc_free+0x70>
            hdr->next->prev = hdr;
   4343e:	60de      	str	r6, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
   43440:	4620      	mov	r0, r4
   43442:	2220      	movs	r2, #32
   43444:	2100      	movs	r1, #0
   43446:	f001 f99c 	bl	44782 <memset>
   4344a:	4623      	mov	r3, r4
   4344c:	4634      	mov	r4, r6
    memory_header *hdr, *old = NULL;
   4344e:	461e      	mov	r6, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   43450:	6920      	ldr	r0, [r4, #16]
   43452:	2800      	cmp	r0, #0
   43454:	d031      	beq.n	434ba <buffer_alloc_free+0xea>
   43456:	6883      	ldr	r3, [r0, #8]
   43458:	2b00      	cmp	r3, #0
   4345a:	d12e      	bne.n	434ba <buffer_alloc_free+0xea>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
   4345c:	6863      	ldr	r3, [r4, #4]
   4345e:	6842      	ldr	r2, [r0, #4]
   43460:	3320      	adds	r3, #32
   43462:	4413      	add	r3, r2
   43464:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
   43466:	6903      	ldr	r3, [r0, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
   43468:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->next = hdr->next->next;
   4346c:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
   4346e:	b9d2      	cbnz	r2, 434a6 <buffer_alloc_free+0xd6>
   43470:	b9f9      	cbnz	r1, 434b2 <buffer_alloc_free+0xe2>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
   43472:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
   43474:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
   43476:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
   43478:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
   4347a:	b1e2      	cbz	r2, 434b6 <buffer_alloc_free+0xe6>
            hdr->prev_free->next_free = hdr;
   4347c:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
   4347e:	69a2      	ldr	r2, [r4, #24]
   43480:	b102      	cbz	r2, 43484 <buffer_alloc_free+0xb4>
            hdr->next_free->prev_free = hdr;
   43482:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
   43484:	b103      	cbz	r3, 43488 <buffer_alloc_free+0xb8>
            hdr->next->prev = hdr;
   43486:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
   43488:	2220      	movs	r2, #32
   4348a:	2100      	movs	r1, #0
   4348c:	f001 f979 	bl	44782 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
   43490:	693b      	ldr	r3, [r7, #16]
   43492:	079b      	lsls	r3, r3, #30
   43494:	d519      	bpl.n	434ca <buffer_alloc_free+0xfa>
   43496:	f7ff fef7 	bl	43288 <verify_chain>
   4349a:	b1b0      	cbz	r0, 434ca <buffer_alloc_free+0xfa>
        mbedtls_exit( 1 );
}
   4349c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   434a0:	2001      	movs	r0, #1
   434a2:	f7fe ba67 	b.w	41974 <_exit>
                hdr->prev_free->next_free = hdr->next_free;
   434a6:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
   434a8:	69a1      	ldr	r1, [r4, #24]
   434aa:	2900      	cmp	r1, #0
   434ac:	d0e1      	beq.n	43472 <buffer_alloc_free+0xa2>
                hdr->next_free->prev_free = hdr->prev_free;
   434ae:	614a      	str	r2, [r1, #20]
   434b0:	e7df      	b.n	43472 <buffer_alloc_free+0xa2>
                heap.first_free = hdr->next_free;
   434b2:	60f9      	str	r1, [r7, #12]
   434b4:	e7f8      	b.n	434a8 <buffer_alloc_free+0xd8>
            heap.first_free = hdr;
   434b6:	60fc      	str	r4, [r7, #12]
   434b8:	e7e1      	b.n	4347e <buffer_alloc_free+0xae>
    if( old == NULL )
   434ba:	2e00      	cmp	r6, #0
   434bc:	d1e8      	bne.n	43490 <buffer_alloc_free+0xc0>
        hdr->next_free = heap.first_free;
   434be:	68fb      	ldr	r3, [r7, #12]
   434c0:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
   434c2:	b103      	cbz	r3, 434c6 <buffer_alloc_free+0xf6>
            heap.first_free->prev_free = hdr;
   434c4:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
   434c6:	60fc      	str	r4, [r7, #12]
   434c8:	e7e2      	b.n	43490 <buffer_alloc_free+0xc0>
}
   434ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   434cc:	2004033c 	.word	0x2004033c

000434d0 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
   434d0:	b538      	push	{r3, r4, r5, lr}
   434d2:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   434d4:	2214      	movs	r2, #20
   434d6:	2100      	movs	r1, #0
{
   434d8:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   434da:	4812      	ldr	r0, [pc, #72]	; (43524 <mbedtls_memory_buffer_alloc_init+0x54>)
   434dc:	f001 f951 	bl	44782 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
   434e0:	4911      	ldr	r1, [pc, #68]	; (43528 <mbedtls_memory_buffer_alloc_init+0x58>)
   434e2:	4812      	ldr	r0, [pc, #72]	; (4352c <mbedtls_memory_buffer_alloc_init+0x5c>)
   434e4:	f7ff fe9e 	bl	43224 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   434e8:	2d23      	cmp	r5, #35	; 0x23
   434ea:	d91a      	bls.n	43522 <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   434ec:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
   434f0:	bf1f      	itttt	ne
   434f2:	3d04      	subne	r5, #4
   434f4:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   434f6:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
   434fa:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
   434fc:	462a      	mov	r2, r5
   434fe:	2100      	movs	r1, #0
   43500:	4620      	mov	r0, r4
   43502:	f001 f93e 	bl	44782 <memset>

    heap.buf = buf;
   43506:	4b07      	ldr	r3, [pc, #28]	; (43524 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
   43508:	4a09      	ldr	r2, [pc, #36]	; (43530 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
   4350a:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
   4350e:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
   43510:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
   43512:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
   43516:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
   43518:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
   4351c:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
   4351e:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
   43520:	60dc      	str	r4, [r3, #12]
}
   43522:	bd38      	pop	{r3, r4, r5, pc}
   43524:	2004033c 	.word	0x2004033c
   43528:	000433d1 	.word	0x000433d1
   4352c:	000432c5 	.word	0x000432c5
   43530:	ff00aa55 	.word	0xff00aa55

00043534 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   43534:	4b0e      	ldr	r3, [pc, #56]	; (43570 <z_sys_init_run_level+0x3c>)
{
   43536:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   43538:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   4353c:	3001      	adds	r0, #1
   4353e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   43542:	42a6      	cmp	r6, r4
   43544:	d800      	bhi.n	43548 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   43546:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   43548:	e9d4 3500 	ldrd	r3, r5, [r4]
   4354c:	4628      	mov	r0, r5
   4354e:	4798      	blx	r3
		if (dev != NULL) {
   43550:	b165      	cbz	r5, 4356c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   43552:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   43554:	b130      	cbz	r0, 43564 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   43556:	2800      	cmp	r0, #0
   43558:	bfb8      	it	lt
   4355a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   4355c:	28ff      	cmp	r0, #255	; 0xff
   4355e:	bfa8      	it	ge
   43560:	20ff      	movge	r0, #255	; 0xff
   43562:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   43564:	785a      	ldrb	r2, [r3, #1]
   43566:	f042 0201 	orr.w	r2, r2, #1
   4356a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   4356c:	3408      	adds	r4, #8
   4356e:	e7e8      	b.n	43542 <z_sys_init_run_level+0xe>
   43570:	00045304 	.word	0x00045304

00043574 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   43574:	4b01      	ldr	r3, [pc, #4]	; (4357c <z_impl_z_errno+0x8>)
   43576:	6898      	ldr	r0, [r3, #8]
}
   43578:	3060      	adds	r0, #96	; 0x60
   4357a:	4770      	bx	lr
   4357c:	20040350 	.word	0x20040350

00043580 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   43580:	2201      	movs	r2, #1
{
   43582:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   43584:	4b09      	ldr	r3, [pc, #36]	; (435ac <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   43586:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   43588:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   4358a:	f7ff ffd3 	bl	43534 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   4358e:	f000 ff01 	bl	44394 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   43592:	2003      	movs	r0, #3
   43594:	f7ff ffce 	bl	43534 <z_sys_init_run_level>

	z_init_static_threads();
   43598:	f000 f8e6 	bl	43768 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   4359c:	f7fc ff46 	bl	4042c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   435a0:	4a03      	ldr	r2, [pc, #12]	; (435b0 <bg_thread_main+0x30>)
   435a2:	7b13      	ldrb	r3, [r2, #12]
   435a4:	f023 0301 	bic.w	r3, r3, #1
   435a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   435aa:	bd08      	pop	{r3, pc}
   435ac:	20040589 	.word	0x20040589
   435b0:	20040180 	.word	0x20040180

000435b4 <z_bss_zero>:
{
   435b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   435b6:	4803      	ldr	r0, [pc, #12]	; (435c4 <z_bss_zero+0x10>)
   435b8:	4a03      	ldr	r2, [pc, #12]	; (435c8 <z_bss_zero+0x14>)
   435ba:	2100      	movs	r1, #0
   435bc:	1a12      	subs	r2, r2, r0
   435be:	f001 fb80 	bl	44cc2 <z_early_memset>
}
   435c2:	bd08      	pop	{r3, pc}
   435c4:	200400e0 	.word	0x200400e0
   435c8:	2004058c 	.word	0x2004058c

000435cc <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   435cc:	2300      	movs	r3, #0
   435ce:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   435d0:	b570      	push	{r4, r5, r6, lr}
   435d2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   435d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   435d8:	220f      	movs	r2, #15
   435da:	9301      	str	r3, [sp, #4]
   435dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   435e0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   435e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   435e6:	4d0e      	ldr	r5, [pc, #56]	; (43620 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   435e8:	4e0e      	ldr	r6, [pc, #56]	; (43624 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   435ea:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   435ee:	490e      	ldr	r1, [pc, #56]	; (43628 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   435f0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   435f4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   435f6:	fb02 1100 	mla	r1, r2, r0, r1
   435fa:	4b0c      	ldr	r3, [pc, #48]	; (4362c <z_init_cpu+0x60>)
   435fc:	4630      	mov	r0, r6
   435fe:	9500      	str	r5, [sp, #0]
   43600:	f000 f882 	bl	43708 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   43604:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   43606:	480a      	ldr	r0, [pc, #40]	; (43630 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   43608:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   4360a:	3401      	adds	r4, #1
   4360c:	f023 0304 	bic.w	r3, r3, #4
   43610:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   43614:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   43616:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   43618:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   4361a:	b006      	add	sp, #24
   4361c:	bd70      	pop	{r4, r5, r6, pc}
   4361e:	bf00      	nop
   43620:	20040350 	.word	0x20040350
   43624:	20040100 	.word	0x20040100
   43628:	20040990 	.word	0x20040990
   4362c:	00043821 	.word	0x00043821
   43630:	20040ad0 	.word	0x20040ad0

00043634 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   43634:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   43636:	4b2d      	ldr	r3, [pc, #180]	; (436ec <z_cstart+0xb8>)
   43638:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   4363a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   4363e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   43642:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   43646:	2400      	movs	r4, #0
   43648:	23e0      	movs	r3, #224	; 0xe0
   4364a:	4d29      	ldr	r5, [pc, #164]	; (436f0 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   4364c:	4e29      	ldr	r6, [pc, #164]	; (436f4 <z_cstart+0xc0>)
   4364e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   43652:	77ec      	strb	r4, [r5, #31]
   43654:	762c      	strb	r4, [r5, #24]
   43656:	766c      	strb	r4, [r5, #25]
   43658:	76ac      	strb	r4, [r5, #26]
   4365a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   4365e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   43660:	4f25      	ldr	r7, [pc, #148]	; (436f8 <z_cstart+0xc4>)
   43662:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   43666:	626b      	str	r3, [r5, #36]	; 0x24
   43668:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   4366c:	f7fd ff4c 	bl	41508 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   43670:	f7fd fd42 	bl	410f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   43674:	f04f 33ff 	mov.w	r3, #4294967295
   43678:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   4367a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   4367c:	f7fe f954 	bl	41928 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   43680:	f7fd fff2 	bl	41668 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   43684:	f240 1301 	movw	r3, #257	; 0x101
   43688:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   4368c:	ab06      	add	r3, sp, #24
   4368e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   43690:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   43694:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   43696:	f001 faee 	bl	44c76 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   4369a:	4620      	mov	r0, r4
   4369c:	f7ff ff4a 	bl	43534 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   436a0:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   436a2:	4d16      	ldr	r5, [pc, #88]	; (436fc <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   436a4:	f7ff ff46 	bl	43534 <z_sys_init_run_level>
	z_sched_init();
   436a8:	f000 fc1c 	bl	43ee4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   436ac:	4b14      	ldr	r3, [pc, #80]	; (43700 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   436ae:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   436b0:	9305      	str	r3, [sp, #20]
   436b2:	2301      	movs	r3, #1
   436b4:	4913      	ldr	r1, [pc, #76]	; (43704 <z_cstart+0xd0>)
   436b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   436ba:	e9cd 4303 	strd	r4, r3, [sp, #12]
   436be:	4628      	mov	r0, r5
   436c0:	463b      	mov	r3, r7
   436c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   436c6:	9400      	str	r4, [sp, #0]
   436c8:	f000 f81e 	bl	43708 <z_setup_new_thread>
   436cc:	4606      	mov	r6, r0
   436ce:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   436d0:	4628      	mov	r0, r5
   436d2:	f022 0204 	bic.w	r2, r2, #4
   436d6:	736a      	strb	r2, [r5, #13]
   436d8:	f001 fb3a 	bl	44d50 <z_ready_thread>
	z_init_cpu(0);
   436dc:	4620      	mov	r0, r4
   436de:	f7ff ff75 	bl	435cc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   436e2:	463a      	mov	r2, r7
   436e4:	4631      	mov	r1, r6
   436e6:	4628      	mov	r0, r5
   436e8:	f7fd fdf0 	bl	412cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   436ec:	20040ad0 	.word	0x20040ad0
   436f0:	e000ed00 	.word	0xe000ed00
   436f4:	20040350 	.word	0x20040350
   436f8:	00043581 	.word	0x00043581
   436fc:	20040180 	.word	0x20040180
   43700:	0004537a 	.word	0x0004537a
   43704:	20040590 	.word	0x20040590

00043708 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   43708:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   4370c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   4370e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   43712:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   43714:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   43716:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   4371a:	2500      	movs	r5, #0
{
   4371c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   4371e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   43720:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   43722:	e9c0 5506 	strd	r5, r5, [r0, #24]
   43726:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   43728:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4372a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4372c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   43730:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   43734:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   43736:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   43738:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4373a:	9202      	str	r2, [sp, #8]
   4373c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   4373e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   43742:	9201      	str	r2, [sp, #4]
   43744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   43746:	9200      	str	r2, [sp, #0]
   43748:	4642      	mov	r2, r8
   4374a:	f7fd fda1 	bl	41290 <arch_new_thread>
	if (!_current) {
   4374e:	4b05      	ldr	r3, [pc, #20]	; (43764 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   43750:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   43752:	689b      	ldr	r3, [r3, #8]
   43754:	b103      	cbz	r3, 43758 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   43756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   43758:	4640      	mov	r0, r8
   4375a:	6723      	str	r3, [r4, #112]	; 0x70
   4375c:	b004      	add	sp, #16
   4375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43762:	bf00      	nop
   43764:	20040350 	.word	0x20040350

00043768 <z_init_static_threads>:
{
   43768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4376c:	4c29      	ldr	r4, [pc, #164]	; (43814 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   4376e:	4d2a      	ldr	r5, [pc, #168]	; (43818 <z_init_static_threads+0xb0>)
{
   43770:	b087      	sub	sp, #28
   43772:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   43774:	42ae      	cmp	r6, r5
   43776:	f104 0430 	add.w	r4, r4, #48	; 0x30
   4377a:	d30f      	bcc.n	4379c <z_init_static_threads+0x34>
	k_sched_lock();
   4377c:	f000 f9c6 	bl	43b0c <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   43780:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   43784:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   43788:	4c22      	ldr	r4, [pc, #136]	; (43814 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   4378a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4381c <z_init_static_threads+0xb4>
   4378e:	42ac      	cmp	r4, r5
   43790:	d320      	bcc.n	437d4 <z_init_static_threads+0x6c>
}
   43792:	b007      	add	sp, #28
   43794:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   43798:	f000 bb88 	b.w	43eac <k_sched_unlock>
		z_setup_new_thread(
   4379c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   437a0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   437a4:	9305      	str	r3, [sp, #20]
   437a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   437aa:	9304      	str	r3, [sp, #16]
   437ac:	f854 3c14 	ldr.w	r3, [r4, #-20]
   437b0:	9303      	str	r3, [sp, #12]
   437b2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   437b6:	9302      	str	r3, [sp, #8]
   437b8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   437bc:	9301      	str	r3, [sp, #4]
   437be:	f854 3c20 	ldr.w	r3, [r4, #-32]
   437c2:	9300      	str	r3, [sp, #0]
   437c4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   437c8:	f7ff ff9e 	bl	43708 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   437cc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   437d0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   437d2:	e7ce      	b.n	43772 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   437d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   437d6:	1c5a      	adds	r2, r3, #1
   437d8:	d00d      	beq.n	437f6 <z_init_static_threads+0x8e>
   437da:	2100      	movs	r1, #0
   437dc:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   437de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   437e2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   437e6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   437ea:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   437ee:	d104      	bne.n	437fa <z_init_static_threads+0x92>
	z_sched_start(thread);
   437f0:	4640      	mov	r0, r8
   437f2:	f000 fa71 	bl	43cd8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   437f6:	3430      	adds	r4, #48	; 0x30
   437f8:	e7c9      	b.n	4378e <z_init_static_threads+0x26>
   437fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   437fe:	2300      	movs	r3, #0
   43800:	f7fc fca8 	bl	40154 <__aeabi_uldivmod>
   43804:	4602      	mov	r2, r0
   43806:	460b      	mov	r3, r1
   43808:	f108 0018 	add.w	r0, r8, #24
   4380c:	4649      	mov	r1, r9
   4380e:	f000 fcd3 	bl	441b8 <z_add_timeout>
   43812:	e7f0      	b.n	437f6 <z_init_static_threads+0x8e>
   43814:	200400c8 	.word	0x200400c8
   43818:	200400c8 	.word	0x200400c8
   4381c:	00044d71 	.word	0x00044d71

00043820 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   43820:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   43822:	4c0b      	ldr	r4, [pc, #44]	; (43850 <idle+0x30>)
   43824:	4d0b      	ldr	r5, [pc, #44]	; (43854 <idle+0x34>)
	__asm__ volatile(
   43826:	f04f 0220 	mov.w	r2, #32
   4382a:	f3ef 8311 	mrs	r3, BASEPRI
   4382e:	f382 8812 	msr	BASEPRI_MAX, r2
   43832:	f3bf 8f6f 	isb	sy
   43836:	f001 fb15 	bl	44e64 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4383a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   4383c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4383e:	b913      	cbnz	r3, 43846 <idle+0x26>
	arch_cpu_idle();
   43840:	f7fd fc60 	bl	41104 <arch_cpu_idle>
}
   43844:	e7ef      	b.n	43826 <idle+0x6>
   43846:	f7fd fb85 	bl	40f54 <pm_system_suspend>
   4384a:	2800      	cmp	r0, #0
   4384c:	d1eb      	bne.n	43826 <idle+0x6>
   4384e:	e7f7      	b.n	43840 <idle+0x20>
   43850:	20040350 	.word	0x20040350
   43854:	20040589 	.word	0x20040589

00043858 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   43858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4385c:	4604      	mov	r4, r0
   4385e:	4617      	mov	r7, r2
   43860:	461e      	mov	r6, r3
   43862:	f04f 0320 	mov.w	r3, #32
   43866:	f3ef 8811 	mrs	r8, BASEPRI
   4386a:	f383 8812 	msr	BASEPRI_MAX, r3
   4386e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   43872:	68c3      	ldr	r3, [r0, #12]
   43874:	4a32      	ldr	r2, [pc, #200]	; (43940 <z_impl_k_mutex_lock+0xe8>)
   43876:	b16b      	cbz	r3, 43894 <z_impl_k_mutex_lock+0x3c>
   43878:	6880      	ldr	r0, [r0, #8]
   4387a:	6891      	ldr	r1, [r2, #8]
   4387c:	4288      	cmp	r0, r1
   4387e:	d019      	beq.n	438b4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   43880:	ea57 0306 	orrs.w	r3, r7, r6
   43884:	d118      	bne.n	438b8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   43886:	f388 8811 	msr	BASEPRI, r8
   4388a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   4388e:	f06f 000f 	mvn.w	r0, #15
   43892:	e00c      	b.n	438ae <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   43894:	6891      	ldr	r1, [r2, #8]
   43896:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   4389a:	3301      	adds	r3, #1
   4389c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   4389e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   438a0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   438a2:	60a3      	str	r3, [r4, #8]
   438a4:	f388 8811 	msr	BASEPRI, r8
   438a8:	f3bf 8f6f 	isb	sy
		return 0;
   438ac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   438ae:	b002      	add	sp, #8
   438b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   438b4:	6921      	ldr	r1, [r4, #16]
   438b6:	e7f0      	b.n	4389a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   438b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   438bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   438c0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   438c4:	4299      	cmp	r1, r3
   438c6:	bfa8      	it	ge
   438c8:	4619      	movge	r1, r3
   438ca:	4291      	cmp	r1, r2
   438cc:	bfb8      	it	lt
   438ce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   438d0:	428b      	cmp	r3, r1
   438d2:	dd2e      	ble.n	43932 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   438d4:	f001 fa06 	bl	44ce4 <adjust_owner_prio.isra.0>
   438d8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   438da:	4622      	mov	r2, r4
   438dc:	4641      	mov	r1, r8
   438de:	e9cd 7600 	strd	r7, r6, [sp]
   438e2:	4818      	ldr	r0, [pc, #96]	; (43944 <z_impl_k_mutex_lock+0xec>)
   438e4:	f000 fa54 	bl	43d90 <z_pend_curr>
	if (got_mutex == 0) {
   438e8:	2800      	cmp	r0, #0
   438ea:	d0e0      	beq.n	438ae <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   438ec:	f04f 0320 	mov.w	r3, #32
   438f0:	f3ef 8611 	mrs	r6, BASEPRI
   438f4:	f383 8812 	msr	BASEPRI_MAX, r3
   438f8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   438fc:	6823      	ldr	r3, [r4, #0]
   438fe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43900:	429c      	cmp	r4, r3
   43902:	d00a      	beq.n	4391a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   43904:	b14b      	cbz	r3, 4391a <z_impl_k_mutex_lock+0xc2>
   43906:	f993 300e 	ldrsb.w	r3, [r3, #14]
   4390a:	4299      	cmp	r1, r3
   4390c:	bfa8      	it	ge
   4390e:	4619      	movge	r1, r3
   43910:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   43914:	4299      	cmp	r1, r3
   43916:	bfb8      	it	lt
   43918:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   4391a:	68a0      	ldr	r0, [r4, #8]
   4391c:	f001 f9e2 	bl	44ce4 <adjust_owner_prio.isra.0>
   43920:	b900      	cbnz	r0, 43924 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   43922:	b145      	cbz	r5, 43936 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   43924:	4631      	mov	r1, r6
   43926:	4807      	ldr	r0, [pc, #28]	; (43944 <z_impl_k_mutex_lock+0xec>)
   43928:	f000 f8de 	bl	43ae8 <z_reschedule>
	return -EAGAIN;
   4392c:	f06f 000a 	mvn.w	r0, #10
   43930:	e7bd      	b.n	438ae <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   43932:	2500      	movs	r5, #0
   43934:	e7d1      	b.n	438da <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   43936:	f386 8811 	msr	BASEPRI, r6
   4393a:	f3bf 8f6f 	isb	sy
   4393e:	e7f5      	b.n	4392c <z_impl_k_mutex_lock+0xd4>
   43940:	20040350 	.word	0x20040350
   43944:	2004058a 	.word	0x2004058a

00043948 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   43948:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   4394a:	6883      	ldr	r3, [r0, #8]
{
   4394c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   4394e:	2b00      	cmp	r3, #0
   43950:	d032      	beq.n	439b8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   43952:	4a1c      	ldr	r2, [pc, #112]	; (439c4 <z_impl_k_mutex_unlock+0x7c>)
   43954:	6892      	ldr	r2, [r2, #8]
   43956:	4293      	cmp	r3, r2
   43958:	d131      	bne.n	439be <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   4395a:	7bda      	ldrb	r2, [r3, #15]
   4395c:	3a01      	subs	r2, #1
   4395e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   43960:	68c3      	ldr	r3, [r0, #12]
   43962:	2b01      	cmp	r3, #1
   43964:	d905      	bls.n	43972 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   43966:	3b01      	subs	r3, #1
   43968:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   4396a:	f000 fa9f 	bl	43eac <k_sched_unlock>

	return 0;
   4396e:	2000      	movs	r0, #0
}
   43970:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   43972:	f04f 0320 	mov.w	r3, #32
   43976:	f3ef 8511 	mrs	r5, BASEPRI
   4397a:	f383 8812 	msr	BASEPRI_MAX, r3
   4397e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   43982:	6901      	ldr	r1, [r0, #16]
   43984:	6880      	ldr	r0, [r0, #8]
   43986:	f001 f9ad 	bl	44ce4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   4398a:	4620      	mov	r0, r4
   4398c:	f001 fa3c 	bl	44e08 <z_unpend_first_thread>
	mutex->owner = new_owner;
   43990:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   43992:	b158      	cbz	r0, 439ac <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   43994:	f990 200e 	ldrsb.w	r2, [r0, #14]
   43998:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   4399a:	2200      	movs	r2, #0
   4399c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   4399e:	f001 f9d7 	bl	44d50 <z_ready_thread>
		z_reschedule(&lock, key);
   439a2:	4629      	mov	r1, r5
   439a4:	4808      	ldr	r0, [pc, #32]	; (439c8 <z_impl_k_mutex_unlock+0x80>)
   439a6:	f000 f89f 	bl	43ae8 <z_reschedule>
   439aa:	e7de      	b.n	4396a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   439ac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   439ae:	f385 8811 	msr	BASEPRI, r5
   439b2:	f3bf 8f6f 	isb	sy
   439b6:	e7d8      	b.n	4396a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   439b8:	f06f 0015 	mvn.w	r0, #21
   439bc:	e7d8      	b.n	43970 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   439be:	f04f 30ff 	mov.w	r0, #4294967295
   439c2:	e7d5      	b.n	43970 <z_impl_k_mutex_unlock+0x28>
   439c4:	20040350 	.word	0x20040350
   439c8:	2004058a 	.word	0x2004058a

000439cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   439cc:	b538      	push	{r3, r4, r5, lr}
   439ce:	4604      	mov	r4, r0
	__asm__ volatile(
   439d0:	f04f 0320 	mov.w	r3, #32
   439d4:	f3ef 8511 	mrs	r5, BASEPRI
   439d8:	f383 8812 	msr	BASEPRI_MAX, r3
   439dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   439e0:	f001 fa12 	bl	44e08 <z_unpend_first_thread>

	if (thread != NULL) {
   439e4:	b148      	cbz	r0, 439fa <z_impl_k_sem_give+0x2e>
   439e6:	2200      	movs	r2, #0
   439e8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   439ea:	f001 f9b1 	bl	44d50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   439ee:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   439f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   439f4:	4804      	ldr	r0, [pc, #16]	; (43a08 <z_impl_k_sem_give+0x3c>)
   439f6:	f000 b877 	b.w	43ae8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   439fa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   439fe:	429a      	cmp	r2, r3
   43a00:	bf18      	it	ne
   43a02:	3301      	addne	r3, #1
   43a04:	60a3      	str	r3, [r4, #8]
}
   43a06:	e7f2      	b.n	439ee <z_impl_k_sem_give+0x22>
   43a08:	2004058a 	.word	0x2004058a

00043a0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   43a0c:	b513      	push	{r0, r1, r4, lr}
   43a0e:	f04f 0420 	mov.w	r4, #32
   43a12:	f3ef 8111 	mrs	r1, BASEPRI
   43a16:	f384 8812 	msr	BASEPRI_MAX, r4
   43a1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   43a1e:	6884      	ldr	r4, [r0, #8]
   43a20:	b144      	cbz	r4, 43a34 <z_impl_k_sem_take+0x28>
		sem->count--;
   43a22:	3c01      	subs	r4, #1
   43a24:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   43a26:	f381 8811 	msr	BASEPRI, r1
   43a2a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   43a2e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   43a30:	b002      	add	sp, #8
   43a32:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   43a34:	ea52 0403 	orrs.w	r4, r2, r3
   43a38:	d106      	bne.n	43a48 <z_impl_k_sem_take+0x3c>
   43a3a:	f381 8811 	msr	BASEPRI, r1
   43a3e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   43a42:	f06f 000f 	mvn.w	r0, #15
   43a46:	e7f3      	b.n	43a30 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   43a48:	e9cd 2300 	strd	r2, r3, [sp]
   43a4c:	4602      	mov	r2, r0
   43a4e:	4802      	ldr	r0, [pc, #8]	; (43a58 <z_impl_k_sem_take+0x4c>)
   43a50:	f000 f99e 	bl	43d90 <z_pend_curr>
	return ret;
   43a54:	e7ec      	b.n	43a30 <z_impl_k_sem_take+0x24>
   43a56:	bf00      	nop
   43a58:	2004058a 	.word	0x2004058a

00043a5c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   43a5c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   43a5e:	4d07      	ldr	r5, [pc, #28]	; (43a7c <z_reset_time_slice+0x20>)
   43a60:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   43a62:	b154      	cbz	r4, 43a7a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   43a64:	f7fe fe4e 	bl	42704 <sys_clock_elapsed>
   43a68:	4b05      	ldr	r3, [pc, #20]	; (43a80 <z_reset_time_slice+0x24>)
   43a6a:	4404      	add	r4, r0
   43a6c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   43a6e:	6828      	ldr	r0, [r5, #0]
   43a70:	2100      	movs	r1, #0
	}
}
   43a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   43a76:	f001 ba05 	b.w	44e84 <z_set_timeout_expiry>
}
   43a7a:	bd38      	pop	{r3, r4, r5, pc}
   43a7c:	20040380 	.word	0x20040380
   43a80:	20040350 	.word	0x20040350

00043a84 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   43a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43a86:	4604      	mov	r4, r0
   43a88:	460d      	mov	r5, r1
	__asm__ volatile(
   43a8a:	f04f 0320 	mov.w	r3, #32
   43a8e:	f3ef 8711 	mrs	r7, BASEPRI
   43a92:	f383 8812 	msr	BASEPRI_MAX, r3
   43a96:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   43a9a:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   43a9c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   43aa0:	f240 30e7 	movw	r0, #999	; 0x3e7
   43aa4:	4e0d      	ldr	r6, [pc, #52]	; (43adc <k_sched_time_slice_set+0x58>)
   43aa6:	2300      	movs	r3, #0
   43aa8:	6131      	str	r1, [r6, #16]
   43aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   43aae:	fbe4 010c 	umlal	r0, r1, r4, ip
   43ab2:	f7fc fb4f 	bl	40154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   43ab6:	2c00      	cmp	r4, #0
   43ab8:	4b09      	ldr	r3, [pc, #36]	; (43ae0 <k_sched_time_slice_set+0x5c>)
   43aba:	dc0a      	bgt.n	43ad2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   43abc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   43abe:	4b09      	ldr	r3, [pc, #36]	; (43ae4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   43ac0:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   43ac2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   43ac4:	f7ff ffca 	bl	43a5c <z_reset_time_slice>
	__asm__ volatile(
   43ac8:	f387 8811 	msr	BASEPRI, r7
   43acc:	f3bf 8f6f 	isb	sy
	}
}
   43ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   43ad2:	2802      	cmp	r0, #2
   43ad4:	bfb8      	it	lt
   43ad6:	2002      	movlt	r0, #2
   43ad8:	e7f0      	b.n	43abc <k_sched_time_slice_set+0x38>
   43ada:	bf00      	nop
   43adc:	20040350 	.word	0x20040350
   43ae0:	20040380 	.word	0x20040380
   43ae4:	2004037c 	.word	0x2004037c

00043ae8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   43ae8:	b949      	cbnz	r1, 43afe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   43aea:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   43aee:	b930      	cbnz	r0, 43afe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   43af0:	4b05      	ldr	r3, [pc, #20]	; (43b08 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   43af2:	69da      	ldr	r2, [r3, #28]
   43af4:	689b      	ldr	r3, [r3, #8]
   43af6:	429a      	cmp	r2, r3
   43af8:	d001      	beq.n	43afe <z_reschedule+0x16>
	ret = arch_swap(key);
   43afa:	f7fd bb6f 	b.w	411dc <arch_swap>
   43afe:	f381 8811 	msr	BASEPRI, r1
   43b02:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   43b06:	4770      	bx	lr
   43b08:	20040350 	.word	0x20040350

00043b0c <k_sched_lock>:
	__asm__ volatile(
   43b0c:	f04f 0320 	mov.w	r3, #32
   43b10:	f3ef 8111 	mrs	r1, BASEPRI
   43b14:	f383 8812 	msr	BASEPRI_MAX, r3
   43b18:	f3bf 8f6f 	isb	sy
   43b1c:	4b04      	ldr	r3, [pc, #16]	; (43b30 <k_sched_lock+0x24>)
   43b1e:	689a      	ldr	r2, [r3, #8]
   43b20:	7bd3      	ldrb	r3, [r2, #15]
   43b22:	3b01      	subs	r3, #1
   43b24:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   43b26:	f381 8811 	msr	BASEPRI, r1
   43b2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   43b2e:	4770      	bx	lr
   43b30:	20040350 	.word	0x20040350

00043b34 <update_cache>:
{
   43b34:	b538      	push	{r3, r4, r5, lr}
   43b36:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   43b38:	480c      	ldr	r0, [pc, #48]	; (43b6c <update_cache+0x38>)
   43b3a:	f001 f903 	bl	44d44 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   43b3e:	4d0c      	ldr	r5, [pc, #48]	; (43b70 <update_cache+0x3c>)
   43b40:	4604      	mov	r4, r0
   43b42:	b900      	cbnz	r0, 43b46 <update_cache+0x12>
   43b44:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   43b46:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   43b48:	b94a      	cbnz	r2, 43b5e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   43b4a:	7b5a      	ldrb	r2, [r3, #13]
   43b4c:	06d2      	lsls	r2, r2, #27
   43b4e:	d106      	bne.n	43b5e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   43b50:	69a2      	ldr	r2, [r4, #24]
   43b52:	b922      	cbnz	r2, 43b5e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   43b54:	89da      	ldrh	r2, [r3, #14]
   43b56:	2a7f      	cmp	r2, #127	; 0x7f
   43b58:	d901      	bls.n	43b5e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   43b5a:	61eb      	str	r3, [r5, #28]
}
   43b5c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   43b5e:	429c      	cmp	r4, r3
   43b60:	d002      	beq.n	43b68 <update_cache+0x34>
			z_reset_time_slice(thread);
   43b62:	4620      	mov	r0, r4
   43b64:	f7ff ff7a 	bl	43a5c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   43b68:	61ec      	str	r4, [r5, #28]
}
   43b6a:	e7f7      	b.n	43b5c <update_cache+0x28>
   43b6c:	20040370 	.word	0x20040370
   43b70:	20040350 	.word	0x20040350

00043b74 <move_thread_to_end_of_prio_q>:
{
   43b74:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   43b76:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   43b7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   43b7c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   43b7e:	7b43      	ldrb	r3, [r0, #13]
   43b80:	da04      	bge.n	43b8c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   43b86:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   43b88:	f001 f8b4 	bl	44cf4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   43b8c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   43b8e:	4a15      	ldr	r2, [pc, #84]	; (43be4 <move_thread_to_end_of_prio_q+0x70>)
   43b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
   43b94:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43b96:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   43b9a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43b9e:	42ab      	cmp	r3, r5
   43ba0:	d01b      	beq.n	43bda <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43ba2:	b1d3      	cbz	r3, 43bda <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   43ba4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   43ba8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   43bac:	4286      	cmp	r6, r0
   43bae:	d00f      	beq.n	43bd0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   43bb0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   43bb2:	2800      	cmp	r0, #0
   43bb4:	dd0c      	ble.n	43bd0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   43bb6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   43bb8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   43bbc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   43bbe:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   43bc0:	6890      	ldr	r0, [r2, #8]
}
   43bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   43bc6:	1a43      	subs	r3, r0, r1
   43bc8:	4258      	negs	r0, r3
   43bca:	4158      	adcs	r0, r3
   43bcc:	f7ff bfb2 	b.w	43b34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   43bd0:	42a3      	cmp	r3, r4
   43bd2:	d002      	beq.n	43bda <move_thread_to_end_of_prio_q+0x66>
   43bd4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43bd6:	2b00      	cmp	r3, #0
   43bd8:	d1e6      	bne.n	43ba8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   43bda:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   43bde:	6021      	str	r1, [r4, #0]
	list->tail = node;
   43be0:	6251      	str	r1, [r2, #36]	; 0x24
}
   43be2:	e7ed      	b.n	43bc0 <move_thread_to_end_of_prio_q+0x4c>
   43be4:	20040350 	.word	0x20040350

00043be8 <z_time_slice>:
{
   43be8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   43bea:	f04f 0320 	mov.w	r3, #32
   43bee:	f3ef 8511 	mrs	r5, BASEPRI
   43bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   43bf6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   43bfa:	4b17      	ldr	r3, [pc, #92]	; (43c58 <z_time_slice+0x70>)
   43bfc:	4a17      	ldr	r2, [pc, #92]	; (43c5c <z_time_slice+0x74>)
   43bfe:	689c      	ldr	r4, [r3, #8]
   43c00:	6811      	ldr	r1, [r2, #0]
   43c02:	428c      	cmp	r4, r1
   43c04:	d107      	bne.n	43c16 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   43c06:	4620      	mov	r0, r4
   43c08:	f7ff ff28 	bl	43a5c <z_reset_time_slice>
	__asm__ volatile(
   43c0c:	f385 8811 	msr	BASEPRI, r5
   43c10:	f3bf 8f6f 	isb	sy
}
   43c14:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   43c16:	2100      	movs	r1, #0
   43c18:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   43c1a:	4a11      	ldr	r2, [pc, #68]	; (43c60 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   43c1c:	6812      	ldr	r2, [r2, #0]
   43c1e:	b1c2      	cbz	r2, 43c52 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   43c20:	89e2      	ldrh	r2, [r4, #14]
   43c22:	2a7f      	cmp	r2, #127	; 0x7f
   43c24:	d815      	bhi.n	43c52 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   43c26:	7b62      	ldrb	r2, [r4, #13]
   43c28:	06d2      	lsls	r2, r2, #27
   43c2a:	d112      	bne.n	43c52 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   43c2c:	4a0d      	ldr	r2, [pc, #52]	; (43c64 <z_time_slice+0x7c>)
   43c2e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   43c32:	6812      	ldr	r2, [r2, #0]
   43c34:	4291      	cmp	r1, r2
   43c36:	db0c      	blt.n	43c52 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   43c38:	4a0b      	ldr	r2, [pc, #44]	; (43c68 <z_time_slice+0x80>)
   43c3a:	4294      	cmp	r4, r2
   43c3c:	d009      	beq.n	43c52 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   43c3e:	691a      	ldr	r2, [r3, #16]
   43c40:	4282      	cmp	r2, r0
   43c42:	dc03      	bgt.n	43c4c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   43c44:	4620      	mov	r0, r4
   43c46:	f7ff ff95 	bl	43b74 <move_thread_to_end_of_prio_q>
   43c4a:	e7dc      	b.n	43c06 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   43c4c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   43c4e:	611a      	str	r2, [r3, #16]
   43c50:	e7dc      	b.n	43c0c <z_time_slice+0x24>
   43c52:	2200      	movs	r2, #0
   43c54:	e7fb      	b.n	43c4e <z_time_slice+0x66>
   43c56:	bf00      	nop
   43c58:	20040350 	.word	0x20040350
   43c5c:	20040378 	.word	0x20040378
   43c60:	20040380 	.word	0x20040380
   43c64:	2004037c 	.word	0x2004037c
   43c68:	20040100 	.word	0x20040100

00043c6c <ready_thread>:
{
   43c6c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   43c6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   43c72:	7b43      	ldrb	r3, [r0, #13]
   43c74:	2a00      	cmp	r2, #0
   43c76:	db2a      	blt.n	43cce <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   43c78:	06da      	lsls	r2, r3, #27
   43c7a:	d128      	bne.n	43cce <ready_thread+0x62>
   43c7c:	6982      	ldr	r2, [r0, #24]
   43c7e:	bb32      	cbnz	r2, 43cce <ready_thread+0x62>
	return list->head == list;
   43c80:	4a14      	ldr	r2, [pc, #80]	; (43cd4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   43c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
   43c86:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43c88:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   43c8c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43c90:	42ab      	cmp	r3, r5
   43c92:	d017      	beq.n	43cc4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43c94:	b1b3      	cbz	r3, 43cc4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   43c96:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   43c9a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   43c9e:	428e      	cmp	r6, r1
   43ca0:	d00b      	beq.n	43cba <ready_thread+0x4e>
		return b2 - b1;
   43ca2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   43ca4:	2900      	cmp	r1, #0
   43ca6:	dd08      	ble.n	43cba <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   43ca8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   43caa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   43cae:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   43cb0:	6058      	str	r0, [r3, #4]
		update_cache(0);
   43cb2:	2000      	movs	r0, #0
}
   43cb4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   43cb6:	f7ff bf3d 	b.w	43b34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   43cba:	42a3      	cmp	r3, r4
   43cbc:	d002      	beq.n	43cc4 <ready_thread+0x58>
   43cbe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43cc0:	2b00      	cmp	r3, #0
   43cc2:	d1ea      	bne.n	43c9a <ready_thread+0x2e>
	node->prev = tail;
   43cc4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   43cc8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   43cca:	6250      	str	r0, [r2, #36]	; 0x24
}
   43ccc:	e7f1      	b.n	43cb2 <ready_thread+0x46>
}
   43cce:	bc70      	pop	{r4, r5, r6}
   43cd0:	4770      	bx	lr
   43cd2:	bf00      	nop
   43cd4:	20040350 	.word	0x20040350

00043cd8 <z_sched_start>:
{
   43cd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   43cda:	f04f 0220 	mov.w	r2, #32
   43cde:	f3ef 8411 	mrs	r4, BASEPRI
   43ce2:	f382 8812 	msr	BASEPRI_MAX, r2
   43ce6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   43cea:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   43cec:	0751      	lsls	r1, r2, #29
   43cee:	d404      	bmi.n	43cfa <z_sched_start+0x22>
	__asm__ volatile(
   43cf0:	f384 8811 	msr	BASEPRI, r4
   43cf4:	f3bf 8f6f 	isb	sy
}
   43cf8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   43cfa:	f022 0204 	bic.w	r2, r2, #4
   43cfe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   43d00:	f7ff ffb4 	bl	43c6c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   43d04:	4621      	mov	r1, r4
}
   43d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   43d0a:	4801      	ldr	r0, [pc, #4]	; (43d10 <z_sched_start+0x38>)
   43d0c:	f7ff beec 	b.w	43ae8 <z_reschedule>
   43d10:	2004058a 	.word	0x2004058a

00043d14 <unready_thread>:
{
   43d14:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   43d16:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   43d1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   43d1c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   43d1e:	7b43      	ldrb	r3, [r0, #13]
   43d20:	da04      	bge.n	43d2c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   43d26:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   43d28:	f000 ffe4 	bl	44cf4 <sys_dlist_remove>
	update_cache(thread == _current);
   43d2c:	4b04      	ldr	r3, [pc, #16]	; (43d40 <unready_thread+0x2c>)
   43d2e:	6898      	ldr	r0, [r3, #8]
   43d30:	1a43      	subs	r3, r0, r1
   43d32:	4258      	negs	r0, r3
   43d34:	4158      	adcs	r0, r3
}
   43d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   43d3a:	f7ff befb 	b.w	43b34 <update_cache>
   43d3e:	bf00      	nop
   43d40:	20040350 	.word	0x20040350

00043d44 <pend>:
{
   43d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43d48:	4606      	mov	r6, r0
   43d4a:	4615      	mov	r5, r2
   43d4c:	461c      	mov	r4, r3
	__asm__ volatile(
   43d4e:	f04f 0320 	mov.w	r3, #32
   43d52:	f3ef 8711 	mrs	r7, BASEPRI
   43d56:	f383 8812 	msr	BASEPRI_MAX, r3
   43d5a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   43d5e:	f001 f829 	bl	44db4 <add_to_waitq_locked>
	__asm__ volatile(
   43d62:	f387 8811 	msr	BASEPRI, r7
   43d66:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   43d6a:	f1b4 3fff 	cmp.w	r4, #4294967295
   43d6e:	bf08      	it	eq
   43d70:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   43d74:	d008      	beq.n	43d88 <pend+0x44>
   43d76:	462a      	mov	r2, r5
   43d78:	4623      	mov	r3, r4
   43d7a:	f106 0018 	add.w	r0, r6, #24
   43d7e:	4903      	ldr	r1, [pc, #12]	; (43d8c <pend+0x48>)
}
   43d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   43d84:	f000 ba18 	b.w	441b8 <z_add_timeout>
   43d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43d8c:	00044d71 	.word	0x00044d71

00043d90 <z_pend_curr>:
{
   43d90:	b510      	push	{r4, lr}
   43d92:	460c      	mov	r4, r1
	pending_current = _current;
   43d94:	4b06      	ldr	r3, [pc, #24]	; (43db0 <z_pend_curr+0x20>)
{
   43d96:	4611      	mov	r1, r2
	pending_current = _current;
   43d98:	6898      	ldr	r0, [r3, #8]
   43d9a:	4b06      	ldr	r3, [pc, #24]	; (43db4 <z_pend_curr+0x24>)
   43d9c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   43d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   43da2:	f7ff ffcf 	bl	43d44 <pend>
   43da6:	4620      	mov	r0, r4
}
   43da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43dac:	f7fd ba16 	b.w	411dc <arch_swap>
   43db0:	20040350 	.word	0x20040350
   43db4:	20040378 	.word	0x20040378

00043db8 <z_set_prio>:
{
   43db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43dba:	4604      	mov	r4, r0
	__asm__ volatile(
   43dbc:	f04f 0320 	mov.w	r3, #32
   43dc0:	f3ef 8611 	mrs	r6, BASEPRI
   43dc4:	f383 8812 	msr	BASEPRI_MAX, r3
   43dc8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   43dcc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   43dce:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   43dd0:	06da      	lsls	r2, r3, #27
   43dd2:	d133      	bne.n	43e3c <z_set_prio+0x84>
		if (need_sched) {
   43dd4:	6982      	ldr	r2, [r0, #24]
   43dd6:	bb8a      	cbnz	r2, 43e3c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   43ddc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   43dde:	f000 ff89 	bl	44cf4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   43de2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   43de4:	4a17      	ldr	r2, [pc, #92]	; (43e44 <z_set_prio+0x8c>)
   43de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   43dea:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
   43dec:	7381      	strb	r1, [r0, #14]
   43dee:	4610      	mov	r0, r2
   43df0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43df4:	4283      	cmp	r3, r0
   43df6:	d01b      	beq.n	43e30 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43df8:	b1d3      	cbz	r3, 43e30 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   43dfa:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   43dfc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   43e00:	42a9      	cmp	r1, r5
   43e02:	d010      	beq.n	43e26 <z_set_prio+0x6e>
		return b2 - b1;
   43e04:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   43e06:	2d00      	cmp	r5, #0
   43e08:	dd0d      	ble.n	43e26 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   43e0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   43e0c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   43e10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   43e12:	605c      	str	r4, [r3, #4]
			update_cache(1);
   43e14:	2001      	movs	r0, #1
   43e16:	f7ff fe8d 	bl	43b34 <update_cache>
   43e1a:	2001      	movs	r0, #1
	__asm__ volatile(
   43e1c:	f386 8811 	msr	BASEPRI, r6
   43e20:	f3bf 8f6f 	isb	sy
}
   43e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   43e26:	42bb      	cmp	r3, r7
   43e28:	d002      	beq.n	43e30 <z_set_prio+0x78>
   43e2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43e2c:	2b00      	cmp	r3, #0
   43e2e:	d1e5      	bne.n	43dfc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   43e30:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   43e32:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   43e36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   43e38:	6254      	str	r4, [r2, #36]	; 0x24
}
   43e3a:	e7eb      	b.n	43e14 <z_set_prio+0x5c>
			thread->base.prio = prio;
   43e3c:	2000      	movs	r0, #0
   43e3e:	73a1      	strb	r1, [r4, #14]
   43e40:	e7ec      	b.n	43e1c <z_set_prio+0x64>
   43e42:	bf00      	nop
   43e44:	20040350 	.word	0x20040350

00043e48 <z_impl_k_thread_suspend>:
{
   43e48:	b570      	push	{r4, r5, r6, lr}
   43e4a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   43e4c:	3018      	adds	r0, #24
   43e4e:	f000 fff3 	bl	44e38 <z_abort_timeout>
	__asm__ volatile(
   43e52:	f04f 0320 	mov.w	r3, #32
   43e56:	f3ef 8611 	mrs	r6, BASEPRI
   43e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   43e5e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   43e62:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   43e66:	7b63      	ldrb	r3, [r4, #13]
   43e68:	2a00      	cmp	r2, #0
   43e6a:	da05      	bge.n	43e78 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   43e70:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43e72:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   43e74:	f000 ff3e 	bl	44cf4 <sys_dlist_remove>
		update_cache(thread == _current);
   43e78:	4d0b      	ldr	r5, [pc, #44]	; (43ea8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   43e7a:	7b63      	ldrb	r3, [r4, #13]
   43e7c:	68a8      	ldr	r0, [r5, #8]
   43e7e:	f043 0310 	orr.w	r3, r3, #16
   43e82:	7363      	strb	r3, [r4, #13]
   43e84:	1b03      	subs	r3, r0, r4
   43e86:	4258      	negs	r0, r3
   43e88:	4158      	adcs	r0, r3
   43e8a:	f7ff fe53 	bl	43b34 <update_cache>
	__asm__ volatile(
   43e8e:	f386 8811 	msr	BASEPRI, r6
   43e92:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   43e96:	68ab      	ldr	r3, [r5, #8]
   43e98:	42a3      	cmp	r3, r4
   43e9a:	d103      	bne.n	43ea4 <z_impl_k_thread_suspend+0x5c>
}
   43e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   43ea0:	f000 bf46 	b.w	44d30 <z_reschedule_unlocked>
}
   43ea4:	bd70      	pop	{r4, r5, r6, pc}
   43ea6:	bf00      	nop
   43ea8:	20040350 	.word	0x20040350

00043eac <k_sched_unlock>:
{
   43eac:	b510      	push	{r4, lr}
	__asm__ volatile(
   43eae:	f04f 0320 	mov.w	r3, #32
   43eb2:	f3ef 8411 	mrs	r4, BASEPRI
   43eb6:	f383 8812 	msr	BASEPRI_MAX, r3
   43eba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   43ebe:	4b08      	ldr	r3, [pc, #32]	; (43ee0 <k_sched_unlock+0x34>)
		update_cache(0);
   43ec0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   43ec2:	689a      	ldr	r2, [r3, #8]
   43ec4:	7bd3      	ldrb	r3, [r2, #15]
   43ec6:	3301      	adds	r3, #1
   43ec8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   43eca:	f7ff fe33 	bl	43b34 <update_cache>
	__asm__ volatile(
   43ece:	f384 8811 	msr	BASEPRI, r4
   43ed2:	f3bf 8f6f 	isb	sy
}
   43ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   43eda:	f000 bf29 	b.w	44d30 <z_reschedule_unlocked>
   43ede:	bf00      	nop
   43ee0:	20040350 	.word	0x20040350

00043ee4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   43ee4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   43ee6:	4b04      	ldr	r3, [pc, #16]	; (43ef8 <z_sched_init+0x14>)
   43ee8:	4608      	mov	r0, r1
   43eea:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   43eee:	e9c3 2208 	strd	r2, r2, [r3, #32]
   43ef2:	f7ff bdc7 	b.w	43a84 <k_sched_time_slice_set>
   43ef6:	bf00      	nop
   43ef8:	20040350 	.word	0x20040350

00043efc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   43efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   43efe:	f04f 0320 	mov.w	r3, #32
   43f02:	f3ef 8511 	mrs	r5, BASEPRI
   43f06:	f383 8812 	msr	BASEPRI_MAX, r3
   43f0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   43f0e:	491a      	ldr	r1, [pc, #104]	; (43f78 <z_impl_k_yield+0x7c>)
   43f10:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   43f12:	7b43      	ldrb	r3, [r0, #13]
   43f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   43f18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   43f1a:	f000 feeb 	bl	44cf4 <sys_dlist_remove>
	return list->head == list;
   43f1e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   43f20:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   43f22:	7b5a      	ldrb	r2, [r3, #13]
   43f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
   43f28:	735a      	strb	r2, [r3, #13]
   43f2a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   43f2e:	4282      	cmp	r2, r0
   43f30:	d01c      	beq.n	43f6c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43f32:	b1da      	cbz	r2, 43f6c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   43f34:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   43f36:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   43f3a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   43f3e:	42a6      	cmp	r6, r4
   43f40:	d00f      	beq.n	43f62 <z_impl_k_yield+0x66>
		return b2 - b1;
   43f42:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   43f44:	2c00      	cmp	r4, #0
   43f46:	dd0c      	ble.n	43f62 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   43f48:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   43f4a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   43f4e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   43f50:	6053      	str	r3, [r2, #4]
	update_cache(1);
   43f52:	2001      	movs	r0, #1
   43f54:	f7ff fdee 	bl	43b34 <update_cache>
   43f58:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   43f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   43f5e:	f7fd b93d 	b.w	411dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   43f62:	42ba      	cmp	r2, r7
   43f64:	d002      	beq.n	43f6c <z_impl_k_yield+0x70>
   43f66:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   43f68:	2a00      	cmp	r2, #0
   43f6a:	d1e6      	bne.n	43f3a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   43f6c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   43f6e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   43f72:	6013      	str	r3, [r2, #0]
	list->tail = node;
   43f74:	624b      	str	r3, [r1, #36]	; 0x24
}
   43f76:	e7ec      	b.n	43f52 <z_impl_k_yield+0x56>
   43f78:	20040350 	.word	0x20040350

00043f7c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   43f7c:	ea50 0301 	orrs.w	r3, r0, r1
{
   43f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43f84:	4605      	mov	r5, r0
   43f86:	460e      	mov	r6, r1
	if (ticks == 0) {
   43f88:	d103      	bne.n	43f92 <z_tick_sleep+0x16>
	z_impl_k_yield();
   43f8a:	f7ff ffb7 	bl	43efc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   43f8e:	2000      	movs	r0, #0
   43f90:	e033      	b.n	43ffa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   43f92:	f06f 0401 	mvn.w	r4, #1
   43f96:	f04f 33ff 	mov.w	r3, #4294967295
   43f9a:	1a24      	subs	r4, r4, r0
   43f9c:	eb63 0301 	sbc.w	r3, r3, r1
   43fa0:	2c01      	cmp	r4, #1
   43fa2:	f173 0300 	sbcs.w	r3, r3, #0
   43fa6:	da02      	bge.n	43fae <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   43fa8:	f000 ff86 	bl	44eb8 <sys_clock_tick_get_32>
   43fac:	1944      	adds	r4, r0, r5
   43fae:	f04f 0320 	mov.w	r3, #32
   43fb2:	f3ef 8811 	mrs	r8, BASEPRI
   43fb6:	f383 8812 	msr	BASEPRI_MAX, r3
   43fba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   43fbe:	4f10      	ldr	r7, [pc, #64]	; (44000 <z_tick_sleep+0x84>)
   43fc0:	4b10      	ldr	r3, [pc, #64]	; (44004 <z_tick_sleep+0x88>)
   43fc2:	68b8      	ldr	r0, [r7, #8]
   43fc4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   43fc6:	f7ff fea5 	bl	43d14 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   43fca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   43fcc:	490e      	ldr	r1, [pc, #56]	; (44008 <z_tick_sleep+0x8c>)
   43fce:	462a      	mov	r2, r5
   43fd0:	4633      	mov	r3, r6
   43fd2:	3018      	adds	r0, #24
   43fd4:	f000 f8f0 	bl	441b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   43fd8:	68ba      	ldr	r2, [r7, #8]
   43fda:	4640      	mov	r0, r8
   43fdc:	7b53      	ldrb	r3, [r2, #13]
   43fde:	f043 0310 	orr.w	r3, r3, #16
   43fe2:	7353      	strb	r3, [r2, #13]
   43fe4:	f7fd f8fa 	bl	411dc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   43fe8:	f000 ff66 	bl	44eb8 <sys_clock_tick_get_32>
   43fec:	1a20      	subs	r0, r4, r0
   43fee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   43ff2:	2801      	cmp	r0, #1
   43ff4:	f173 0300 	sbcs.w	r3, r3, #0
   43ff8:	dbc9      	blt.n	43f8e <z_tick_sleep+0x12>
}
   43ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43ffe:	bf00      	nop
   44000:	20040350 	.word	0x20040350
   44004:	20040378 	.word	0x20040378
   44008:	00044d71 	.word	0x00044d71

0004400c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4400c:	f1b1 3fff 	cmp.w	r1, #4294967295
   44010:	bf08      	it	eq
   44012:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   44016:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   44018:	d106      	bne.n	44028 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   4401a:	4b08      	ldr	r3, [pc, #32]	; (4403c <z_impl_k_sleep+0x30>)
   4401c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   4401e:	f7ff ff13 	bl	43e48 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   44022:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   44026:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   44028:	f7ff ffa8 	bl	43f7c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   4402c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   44030:	fb80 0303 	smull	r0, r3, r0, r3
   44034:	0bc0      	lsrs	r0, r0, #15
   44036:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   4403a:	e7f4      	b.n	44026 <z_impl_k_sleep+0x1a>
   4403c:	20040350 	.word	0x20040350

00044040 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   44040:	4b01      	ldr	r3, [pc, #4]	; (44048 <z_impl_z_current_get+0x8>)
   44042:	6898      	ldr	r0, [r3, #8]
   44044:	4770      	bx	lr
   44046:	bf00      	nop
   44048:	20040350 	.word	0x20040350

0004404c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   4404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44050:	4604      	mov	r4, r0
   44052:	f04f 0320 	mov.w	r3, #32
   44056:	f3ef 8611 	mrs	r6, BASEPRI
   4405a:	f383 8812 	msr	BASEPRI_MAX, r3
   4405e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   44062:	7b43      	ldrb	r3, [r0, #13]
   44064:	071a      	lsls	r2, r3, #28
   44066:	d505      	bpl.n	44074 <z_thread_abort+0x28>
	__asm__ volatile(
   44068:	f386 8811 	msr	BASEPRI, r6
   4406c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   44070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   44074:	f023 0220 	bic.w	r2, r3, #32
   44078:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   4407c:	09d2      	lsrs	r2, r2, #7
   4407e:	d120      	bne.n	440c2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   44080:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   44082:	68a3      	ldr	r3, [r4, #8]
   44084:	b113      	cbz	r3, 4408c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   44086:	4620      	mov	r0, r4
   44088:	f000 fe3c 	bl	44d04 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   4408c:	f104 0018 	add.w	r0, r4, #24
   44090:	f000 fed2 	bl	44e38 <z_abort_timeout>
   44094:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   44098:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   4409c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4409e:	42bd      	cmp	r5, r7
   440a0:	d000      	beq.n	440a4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   440a2:	b9b5      	cbnz	r5, 440d2 <z_thread_abort+0x86>
		update_cache(1);
   440a4:	2001      	movs	r0, #1
   440a6:	f7ff fd45 	bl	43b34 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   440aa:	4b10      	ldr	r3, [pc, #64]	; (440ec <z_thread_abort+0xa0>)
   440ac:	689b      	ldr	r3, [r3, #8]
   440ae:	42a3      	cmp	r3, r4
   440b0:	d1da      	bne.n	44068 <z_thread_abort+0x1c>
   440b2:	f3ef 8305 	mrs	r3, IPSR
   440b6:	2b00      	cmp	r3, #0
   440b8:	d1d6      	bne.n	44068 <z_thread_abort+0x1c>
   440ba:	4630      	mov	r0, r6
   440bc:	f7fd f88e 	bl	411dc <arch_swap>
	return ret;
   440c0:	e7d2      	b.n	44068 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   440c2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   440c6:	f043 0308 	orr.w	r3, r3, #8
   440ca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   440cc:	f000 fe12 	bl	44cf4 <sys_dlist_remove>
}
   440d0:	e7d7      	b.n	44082 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   440d2:	4628      	mov	r0, r5
   440d4:	f000 fe16 	bl	44d04 <unpend_thread_no_timeout>
   440d8:	f105 0018 	add.w	r0, r5, #24
   440dc:	f000 feac 	bl	44e38 <z_abort_timeout>
		ready_thread(thread);
   440e0:	4628      	mov	r0, r5
   440e2:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   440e6:	f7ff fdc1 	bl	43c6c <ready_thread>
   440ea:	e7d7      	b.n	4409c <z_thread_abort+0x50>
   440ec:	20040350 	.word	0x20040350

000440f0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   440f0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   440f2:	4806      	ldr	r0, [pc, #24]	; (4410c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   440f4:	4a06      	ldr	r2, [pc, #24]	; (44110 <z_data_copy+0x20>)
   440f6:	4907      	ldr	r1, [pc, #28]	; (44114 <z_data_copy+0x24>)
   440f8:	1a12      	subs	r2, r2, r0
   440fa:	f000 fde4 	bl	44cc6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   440fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   44102:	4a05      	ldr	r2, [pc, #20]	; (44118 <z_data_copy+0x28>)
   44104:	4905      	ldr	r1, [pc, #20]	; (4411c <z_data_copy+0x2c>)
   44106:	4806      	ldr	r0, [pc, #24]	; (44120 <z_data_copy+0x30>)
   44108:	f000 bddd 	b.w	44cc6 <z_early_memcpy>
   4410c:	20040000 	.word	0x20040000
   44110:	200400dc 	.word	0x200400dc
   44114:	000453b4 	.word	0x000453b4
   44118:	00000000 	.word	0x00000000
   4411c:	000453b4 	.word	0x000453b4
   44120:	20040000 	.word	0x20040000

00044124 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   44124:	4b03      	ldr	r3, [pc, #12]	; (44134 <elapsed+0x10>)
   44126:	681b      	ldr	r3, [r3, #0]
   44128:	b90b      	cbnz	r3, 4412e <elapsed+0xa>
   4412a:	f7fe baeb 	b.w	42704 <sys_clock_elapsed>
}
   4412e:	2000      	movs	r0, #0
   44130:	4770      	bx	lr
   44132:	bf00      	nop
   44134:	20040384 	.word	0x20040384

00044138 <next_timeout>:
	return list->head == list;
   44138:	4b10      	ldr	r3, [pc, #64]	; (4417c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   4413a:	b510      	push	{r4, lr}
   4413c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4413e:	429c      	cmp	r4, r3
   44140:	bf08      	it	eq
   44142:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   44144:	f7ff ffee 	bl	44124 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   44148:	b1a4      	cbz	r4, 44174 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   4414a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   4414e:	1a1b      	subs	r3, r3, r0
   44150:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   44154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   44158:	f170 0200 	sbcs.w	r2, r0, #0
   4415c:	da0a      	bge.n	44174 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   4415e:	2800      	cmp	r0, #0
   44160:	bfac      	ite	ge
   44162:	4618      	movge	r0, r3
   44164:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   44166:	4b06      	ldr	r3, [pc, #24]	; (44180 <next_timeout+0x48>)
   44168:	691b      	ldr	r3, [r3, #16]
   4416a:	b113      	cbz	r3, 44172 <next_timeout+0x3a>
   4416c:	4298      	cmp	r0, r3
   4416e:	bfa8      	it	ge
   44170:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   44172:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   44174:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   44178:	e7f5      	b.n	44166 <next_timeout+0x2e>
   4417a:	bf00      	nop
   4417c:	200400ac 	.word	0x200400ac
   44180:	20040350 	.word	0x20040350

00044184 <remove_timeout>:
{
   44184:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   44186:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   44188:	b168      	cbz	r0, 441a6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   4418a:	4a0a      	ldr	r2, [pc, #40]	; (441b4 <remove_timeout+0x30>)
   4418c:	6852      	ldr	r2, [r2, #4]
   4418e:	4290      	cmp	r0, r2
   44190:	d009      	beq.n	441a6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   44192:	b143      	cbz	r3, 441a6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   44194:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   44198:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   4419c:	1912      	adds	r2, r2, r4
   4419e:	eb41 0105 	adc.w	r1, r1, r5
   441a2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   441a6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   441a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   441aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   441ac:	2300      	movs	r3, #0
	node->prev = NULL;
   441ae:	e9c0 3300 	strd	r3, r3, [r0]
}
   441b2:	bd30      	pop	{r4, r5, pc}
   441b4:	200400ac 	.word	0x200400ac

000441b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   441b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   441bc:	bf08      	it	eq
   441be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   441c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   441c4:	4604      	mov	r4, r0
   441c6:	461f      	mov	r7, r3
   441c8:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   441ca:	d067      	beq.n	4429c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   441cc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   441ce:	f04f 0320 	mov.w	r3, #32
   441d2:	f3ef 8611 	mrs	r6, BASEPRI
   441d6:	f383 8812 	msr	BASEPRI_MAX, r3
   441da:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   441de:	f06f 0201 	mvn.w	r2, #1
   441e2:	f04f 3cff 	mov.w	ip, #4294967295
   441e6:	1b53      	subs	r3, r2, r5
   441e8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   441ec:	2b00      	cmp	r3, #0
   441ee:	db1b      	blt.n	44228 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   441f0:	4b2b      	ldr	r3, [pc, #172]	; (442a0 <z_add_timeout+0xe8>)
   441f2:	e9d3 1300 	ldrd	r1, r3, [r3]
   441f6:	1a52      	subs	r2, r2, r1
   441f8:	eb6c 0303 	sbc.w	r3, ip, r3
   441fc:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   441fe:	eb63 0307 	sbc.w	r3, r3, r7
   44202:	2d01      	cmp	r5, #1
   44204:	f173 0200 	sbcs.w	r2, r3, #0
   44208:	bfbc      	itt	lt
   4420a:	2501      	movlt	r5, #1
   4420c:	2300      	movlt	r3, #0
   4420e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   44212:	4824      	ldr	r0, [pc, #144]	; (442a4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   44214:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44218:	4283      	cmp	r3, r0
   4421a:	d118      	bne.n	4424e <z_add_timeout+0x96>
	node->prev = tail;
   4421c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   44220:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   44224:	6044      	str	r4, [r0, #4]
}
   44226:	e026      	b.n	44276 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   44228:	f7ff ff7c 	bl	44124 <elapsed>
   4422c:	3501      	adds	r5, #1
   4422e:	f147 0700 	adc.w	r7, r7, #0
   44232:	182d      	adds	r5, r5, r0
   44234:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   44238:	e9c4 5704 	strd	r5, r7, [r4, #16]
   4423c:	e7e9      	b.n	44212 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   4423e:	1a52      	subs	r2, r2, r1
   44240:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   44244:	459c      	cmp	ip, r3
   44246:	e9c4 2504 	strd	r2, r5, [r4, #16]
   4424a:	d0e7      	beq.n	4421c <z_add_timeout+0x64>
   4424c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   4424e:	2b00      	cmp	r3, #0
   44250:	d0e4      	beq.n	4421c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   44252:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   44256:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   4425a:	428a      	cmp	r2, r1
   4425c:	eb75 0e07 	sbcs.w	lr, r5, r7
   44260:	daed      	bge.n	4423e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   44262:	1a8a      	subs	r2, r1, r2
   44264:	eb67 0505 	sbc.w	r5, r7, r5
   44268:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   4426c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   4426e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   44272:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   44274:	605c      	str	r4, [r3, #4]
	return list->head == list;
   44276:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44278:	4283      	cmp	r3, r0
   4427a:	d00b      	beq.n	44294 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   4427c:	429c      	cmp	r4, r3
   4427e:	d109      	bne.n	44294 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   44280:	f7ff ff5a 	bl	44138 <next_timeout>

			if (next_time == 0 ||
   44284:	b118      	cbz	r0, 4428e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   44286:	4b08      	ldr	r3, [pc, #32]	; (442a8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   44288:	691b      	ldr	r3, [r3, #16]
   4428a:	4283      	cmp	r3, r0
   4428c:	d002      	beq.n	44294 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   4428e:	2100      	movs	r1, #0
   44290:	f7fe fa08 	bl	426a4 <sys_clock_set_timeout>
	__asm__ volatile(
   44294:	f386 8811 	msr	BASEPRI, r6
   44298:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   4429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4429e:	bf00      	nop
   442a0:	20040200 	.word	0x20040200
   442a4:	200400ac 	.word	0x200400ac
   442a8:	20040350 	.word	0x20040350

000442ac <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   442ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   442b0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   442b2:	f7ff fc99 	bl	43be8 <z_time_slice>
	__asm__ volatile(
   442b6:	f04f 0320 	mov.w	r3, #32
   442ba:	f3ef 8411 	mrs	r4, BASEPRI
   442be:	f383 8812 	msr	BASEPRI_MAX, r3
   442c2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   442c6:	4e24      	ldr	r6, [pc, #144]	; (44358 <sys_clock_announce+0xac>)
	return list->head == list;
   442c8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4435c <sys_clock_announce+0xb0>
   442cc:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   442ce:	4d24      	ldr	r5, [pc, #144]	; (44360 <sys_clock_announce+0xb4>)
   442d0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   442d4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   442d6:	4540      	cmp	r0, r8
   442d8:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
   442dc:	e9d5 1e00 	ldrd	r1, lr, [r5]
   442e0:	d00b      	beq.n	442fa <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   442e2:	b150      	cbz	r0, 442fa <sys_clock_announce+0x4e>
   442e4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   442e8:	429a      	cmp	r2, r3
   442ea:	eb77 090c 	sbcs.w	r9, r7, ip
   442ee:	da16      	bge.n	4431e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   442f0:	1a9b      	subs	r3, r3, r2
   442f2:	eb6c 0c07 	sbc.w	ip, ip, r7
   442f6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   442fa:	1852      	adds	r2, r2, r1
   442fc:	eb4e 0707 	adc.w	r7, lr, r7
   44300:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   44304:	2500      	movs	r5, #0
   44306:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   44308:	f7ff ff16 	bl	44138 <next_timeout>
   4430c:	4629      	mov	r1, r5
   4430e:	f7fe f9c9 	bl	426a4 <sys_clock_set_timeout>
	__asm__ volatile(
   44312:	f384 8811 	msr	BASEPRI, r4
   44316:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   4431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   4431e:	1859      	adds	r1, r3, r1
   44320:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   44324:	1ad3      	subs	r3, r2, r3
   44326:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   44328:	2200      	movs	r2, #0
   4432a:	2300      	movs	r3, #0
   4432c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   44330:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   44334:	f7ff ff26 	bl	44184 <remove_timeout>
   44338:	f384 8811 	msr	BASEPRI, r4
   4433c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   44340:	6883      	ldr	r3, [r0, #8]
   44342:	4798      	blx	r3
	__asm__ volatile(
   44344:	f04f 0320 	mov.w	r3, #32
   44348:	f3ef 8411 	mrs	r4, BASEPRI
   4434c:	f383 8812 	msr	BASEPRI_MAX, r3
   44350:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   44354:	e7bc      	b.n	442d0 <sys_clock_announce+0x24>
   44356:	bf00      	nop
   44358:	20040384 	.word	0x20040384
   4435c:	200400ac 	.word	0x200400ac
   44360:	20040200 	.word	0x20040200

00044364 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   44364:	b510      	push	{r4, lr}
   44366:	f04f 0320 	mov.w	r3, #32
   4436a:	f3ef 8411 	mrs	r4, BASEPRI
   4436e:	f383 8812 	msr	BASEPRI_MAX, r3
   44372:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   44376:	f7fe f9c5 	bl	42704 <sys_clock_elapsed>
   4437a:	4a05      	ldr	r2, [pc, #20]	; (44390 <sys_clock_tick_get+0x2c>)
   4437c:	e9d2 3100 	ldrd	r3, r1, [r2]
   44380:	18c0      	adds	r0, r0, r3
   44382:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   44386:	f384 8811 	msr	BASEPRI, r4
   4438a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   4438e:	bd10      	pop	{r4, pc}
   44390:	20040200 	.word	0x20040200

00044394 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   44394:	4a02      	ldr	r2, [pc, #8]	; (443a0 <boot_banner+0xc>)
   44396:	4903      	ldr	r1, [pc, #12]	; (443a4 <boot_banner+0x10>)
   44398:	4803      	ldr	r0, [pc, #12]	; (443a8 <boot_banner+0x14>)
   4439a:	f000 b847 	b.w	4442c <printk>
   4439e:	bf00      	nop
   443a0:	000453b2 	.word	0x000453b2
   443a4:	0004537f 	.word	0x0004537f
   443a8:	0004538c 	.word	0x0004538c

000443ac <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   443ac:	b530      	push	{r4, r5, lr}
   443ae:	b095      	sub	sp, #84	; 0x54
   443b0:	4605      	mov	r5, r0
   443b2:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   443b4:	2230      	movs	r2, #48	; 0x30
   443b6:	2100      	movs	r1, #0
   443b8:	a808      	add	r0, sp, #32
   443ba:	f000 f9e2 	bl	44782 <memset>
   443be:	233f      	movs	r3, #63	; 0x3f
   443c0:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   443c2:	ab07      	add	r3, sp, #28
   443c4:	9303      	str	r3, [sp, #12]
   443c6:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   443c8:	9406      	str	r4, [sp, #24]
   443ca:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   443ce:	b144      	cbz	r4, 443e2 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   443d0:	2201      	movs	r2, #1
   443d2:	4805      	ldr	r0, [pc, #20]	; (443e8 <psa_generate_random+0x3c>)
   443d4:	9200      	str	r2, [sp, #0]
   443d6:	ab05      	add	r3, sp, #20
   443d8:	a903      	add	r1, sp, #12
   443da:	f7fe f9e9 	bl	427b0 <tfm_ns_interface_dispatch>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   443de:	b015      	add	sp, #84	; 0x54
   443e0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   443e2:	4620      	mov	r0, r4
   443e4:	e7fb      	b.n	443de <psa_generate_random+0x32>
   443e6:	bf00      	nop
   443e8:	00037c11 	.word	0x00037c11

000443ec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   443ec:	4603      	mov	r3, r0
   443ee:	b158      	cbz	r0, 44408 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   443f0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   443f2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   443f6:	2a01      	cmp	r2, #1
   443f8:	d003      	beq.n	44402 <sys_notify_validate+0x16>
   443fa:	2a03      	cmp	r2, #3
   443fc:	d104      	bne.n	44408 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   443fe:	6802      	ldr	r2, [r0, #0]
   44400:	b112      	cbz	r2, 44408 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   44402:	2000      	movs	r0, #0
   44404:	6098      	str	r0, [r3, #8]
   44406:	4770      	bx	lr
		return -EINVAL;
   44408:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   4440c:	4770      	bx	lr

0004440e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4440e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   44410:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   44412:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   44416:	2a03      	cmp	r2, #3
   44418:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   4441c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
   4441e:	bf14      	ite	ne
   44420:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   44422:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   44424:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   44426:	4770      	bx	lr

00044428 <arch_printk_char_out>:
}
   44428:	2000      	movs	r0, #0
   4442a:	4770      	bx	lr

0004442c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   4442c:	b40f      	push	{r0, r1, r2, r3}
   4442e:	b507      	push	{r0, r1, r2, lr}
   44430:	a904      	add	r1, sp, #16
   44432:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   44436:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   44438:	f7fc f84e 	bl	404d8 <vprintk>

	va_end(ap);
}
   4443c:	b003      	add	sp, #12
   4443e:	f85d eb04 	ldr.w	lr, [sp], #4
   44442:	b004      	add	sp, #16
   44444:	4770      	bx	lr

00044446 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44446:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   44448:	f013 0307 	ands.w	r3, r3, #7
   4444c:	d105      	bne.n	4445a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   4444e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   44450:	2b00      	cmp	r3, #0
   44452:	bf0c      	ite	eq
   44454:	2000      	moveq	r0, #0
   44456:	2003      	movne	r0, #3
   44458:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   4445a:	2b02      	cmp	r3, #2
   4445c:	d105      	bne.n	4446a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   4445e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   44460:	2b00      	cmp	r3, #0
   44462:	bf14      	ite	ne
   44464:	2000      	movne	r0, #0
   44466:	2004      	moveq	r0, #4
   44468:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   4446a:	2b01      	cmp	r3, #1
   4446c:	d105      	bne.n	4447a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   4446e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   44470:	2b00      	cmp	r3, #0
   44472:	bf0c      	ite	eq
   44474:	2000      	moveq	r0, #0
   44476:	2005      	movne	r0, #5
   44478:	4770      	bx	lr
	int evt = EVT_NOP;
   4447a:	2000      	movs	r0, #0
}
   4447c:	4770      	bx	lr

0004447e <notify_one>:
{
   4447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44482:	460d      	mov	r5, r1
   44484:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   44486:	4619      	mov	r1, r3
   44488:	1d28      	adds	r0, r5, #4
{
   4448a:	4690      	mov	r8, r2
   4448c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4448e:	f7ff ffbe 	bl	4440e <sys_notify_finalize>
	if (cb) {
   44492:	4604      	mov	r4, r0
   44494:	b138      	cbz	r0, 444a6 <notify_one+0x28>
		cb(mgr, cli, state, res);
   44496:	4633      	mov	r3, r6
   44498:	4642      	mov	r2, r8
   4449a:	4629      	mov	r1, r5
   4449c:	4638      	mov	r0, r7
   4449e:	46a4      	mov	ip, r4
}
   444a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   444a4:	4760      	bx	ip
}
   444a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000444aa <transition_complete>:
{
   444aa:	b410      	push	{r4}
	__asm__ volatile(
   444ac:	f04f 0420 	mov.w	r4, #32
   444b0:	f3ef 8211 	mrs	r2, BASEPRI
   444b4:	f384 8812 	msr	BASEPRI_MAX, r4
   444b8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   444bc:	6141      	str	r1, [r0, #20]
}
   444be:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   444c0:	2101      	movs	r1, #1
   444c2:	f7fc b817 	b.w	404f4 <process_event>

000444c6 <validate_args>:
{
   444c6:	b510      	push	{r4, lr}
   444c8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   444ca:	b140      	cbz	r0, 444de <validate_args+0x18>
   444cc:	b139      	cbz	r1, 444de <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   444ce:	1d08      	adds	r0, r1, #4
   444d0:	f7ff ff8c 	bl	443ec <sys_notify_validate>
	if ((rv == 0)
   444d4:	b928      	cbnz	r0, 444e2 <validate_args+0x1c>
	    && ((cli->notify.flags
   444d6:	68a3      	ldr	r3, [r4, #8]
   444d8:	f033 0303 	bics.w	r3, r3, #3
   444dc:	d001      	beq.n	444e2 <validate_args+0x1c>
		rv = -EINVAL;
   444de:	f06f 0015 	mvn.w	r0, #21
}
   444e2:	bd10      	pop	{r4, pc}

000444e4 <onoff_manager_init>:
{
   444e4:	b538      	push	{r3, r4, r5, lr}
   444e6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   444e8:	4605      	mov	r5, r0
   444ea:	b158      	cbz	r0, 44504 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   444ec:	b151      	cbz	r1, 44504 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   444ee:	680b      	ldr	r3, [r1, #0]
   444f0:	b143      	cbz	r3, 44504 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   444f2:	684b      	ldr	r3, [r1, #4]
   444f4:	b133      	cbz	r3, 44504 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   444f6:	221c      	movs	r2, #28
   444f8:	2100      	movs	r1, #0
   444fa:	f000 f942 	bl	44782 <memset>
	return 0;
   444fe:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   44500:	612c      	str	r4, [r5, #16]
}
   44502:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   44504:	f06f 0015 	mvn.w	r0, #21
   44508:	e7fb      	b.n	44502 <onoff_manager_init+0x1e>

0004450a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   4450a:	b570      	push	{r4, r5, r6, lr}
   4450c:	4604      	mov	r4, r0
   4450e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   44510:	f7ff ffd9 	bl	444c6 <validate_args>

	if (rv < 0) {
   44514:	1e05      	subs	r5, r0, #0
   44516:	db31      	blt.n	4457c <onoff_request+0x72>
   44518:	f04f 0320 	mov.w	r3, #32
   4451c:	f3ef 8111 	mrs	r1, BASEPRI
   44520:	f383 8812 	msr	BASEPRI_MAX, r3
   44524:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   44528:	f64f 75ff 	movw	r5, #65535	; 0xffff
   4452c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4452e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   44530:	42ab      	cmp	r3, r5
   44532:	f000 0207 	and.w	r2, r0, #7
   44536:	d02e      	beq.n	44596 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   44538:	2a02      	cmp	r2, #2
   4453a:	d10e      	bne.n	4455a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   4453c:	3301      	adds	r3, #1
   4453e:	8363      	strh	r3, [r4, #26]
	rv = state;
   44540:	4615      	mov	r5, r2
		notify = true;
   44542:	2301      	movs	r3, #1
	__asm__ volatile(
   44544:	f381 8811 	msr	BASEPRI, r1
   44548:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   4454c:	b1b3      	cbz	r3, 4457c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   4454e:	2300      	movs	r3, #0
   44550:	4631      	mov	r1, r6
   44552:	4620      	mov	r0, r4
   44554:	f7ff ff93 	bl	4447e <notify_one>
   44558:	e010      	b.n	4457c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   4455a:	0783      	lsls	r3, r0, #30
   4455c:	d001      	beq.n	44562 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   4455e:	2a06      	cmp	r2, #6
   44560:	d10e      	bne.n	44580 <onoff_request+0x76>
	parent->next = child;
   44562:	2300      	movs	r3, #0
   44564:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   44566:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   44568:	b993      	cbnz	r3, 44590 <onoff_request+0x86>
	list->head = node;
   4456a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   4456e:	4615      	mov	r5, r2
   44570:	b962      	cbnz	r2, 4458c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   44572:	460a      	mov	r2, r1
   44574:	4620      	mov	r0, r4
   44576:	2102      	movs	r1, #2
   44578:	f7fb ffbc 	bl	404f4 <process_event>
		}
	}

	return rv;
}
   4457c:	4628      	mov	r0, r5
   4457e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   44580:	2a05      	cmp	r2, #5
   44582:	bf0c      	ite	eq
   44584:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   44588:	f06f 0504 	mvnne.w	r5, #4
   4458c:	2300      	movs	r3, #0
   4458e:	e7d9      	b.n	44544 <onoff_request+0x3a>
	parent->next = child;
   44590:	601e      	str	r6, [r3, #0]
	list->tail = node;
   44592:	6066      	str	r6, [r4, #4]
}
   44594:	e7eb      	b.n	4456e <onoff_request+0x64>
		rv = -EAGAIN;
   44596:	f06f 050a 	mvn.w	r5, #10
   4459a:	e7f7      	b.n	4458c <onoff_request+0x82>

0004459c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   4459c:	4604      	mov	r4, r0
   4459e:	b508      	push	{r3, lr}
   445a0:	4608      	mov	r0, r1
   445a2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   445a4:	461a      	mov	r2, r3
   445a6:	47a0      	blx	r4
	return z_impl_z_current_get();
   445a8:	f7ff fd4a 	bl	44040 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   445ac:	f7fd f846 	bl	4163c <z_impl_k_thread_abort>

000445b0 <encode_uint>:
{
   445b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   445b4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   445b6:	78d3      	ldrb	r3, [r2, #3]
{
   445b8:	4680      	mov	r8, r0
	switch (specifier) {
   445ba:	2b6f      	cmp	r3, #111	; 0x6f
{
   445bc:	460f      	mov	r7, r1
   445be:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   445c0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   445c4:	d029      	beq.n	4461a <encode_uint+0x6a>
   445c6:	d824      	bhi.n	44612 <encode_uint+0x62>
		return 16;
   445c8:	2b58      	cmp	r3, #88	; 0x58
   445ca:	bf14      	ite	ne
   445cc:	260a      	movne	r6, #10
   445ce:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   445d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   445d4:	4632      	mov	r2, r6
   445d6:	2300      	movs	r3, #0
   445d8:	4640      	mov	r0, r8
   445da:	4639      	mov	r1, r7
   445dc:	f7fb fdba 	bl	40154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   445e0:	2a09      	cmp	r2, #9
   445e2:	b2d4      	uxtb	r4, r2
   445e4:	d81e      	bhi.n	44624 <encode_uint+0x74>
   445e6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   445e8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   445ea:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   445ec:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   445f0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   445f4:	d301      	bcc.n	445fa <encode_uint+0x4a>
   445f6:	45d1      	cmp	r9, sl
   445f8:	d811      	bhi.n	4461e <encode_uint+0x6e>
	if (conv->flag_hash) {
   445fa:	782b      	ldrb	r3, [r5, #0]
   445fc:	069b      	lsls	r3, r3, #26
   445fe:	d505      	bpl.n	4460c <encode_uint+0x5c>
		if (radix == 8) {
   44600:	2e08      	cmp	r6, #8
   44602:	d115      	bne.n	44630 <encode_uint+0x80>
			conv->altform_0 = true;
   44604:	78ab      	ldrb	r3, [r5, #2]
   44606:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   4460a:	70ab      	strb	r3, [r5, #2]
}
   4460c:	4648      	mov	r0, r9
   4460e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   44612:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   44616:	2b70      	cmp	r3, #112	; 0x70
   44618:	e7d7      	b.n	445ca <encode_uint+0x1a>
	switch (specifier) {
   4461a:	2608      	movs	r6, #8
   4461c:	e7d8      	b.n	445d0 <encode_uint+0x20>
		value /= radix;
   4461e:	4680      	mov	r8, r0
   44620:	460f      	mov	r7, r1
   44622:	e7d7      	b.n	445d4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44624:	f1bb 0f19 	cmp.w	fp, #25
   44628:	bf94      	ite	ls
   4462a:	3437      	addls	r4, #55	; 0x37
   4462c:	3457      	addhi	r4, #87	; 0x57
   4462e:	e7db      	b.n	445e8 <encode_uint+0x38>
		} else if (radix == 16) {
   44630:	2e10      	cmp	r6, #16
   44632:	d1eb      	bne.n	4460c <encode_uint+0x5c>
			conv->altform_0c = true;
   44634:	78ab      	ldrb	r3, [r5, #2]
   44636:	f043 0310 	orr.w	r3, r3, #16
   4463a:	e7e6      	b.n	4460a <encode_uint+0x5a>

0004463c <outs>:
{
   4463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44640:	4607      	mov	r7, r0
   44642:	4688      	mov	r8, r1
   44644:	4615      	mov	r5, r2
   44646:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   44648:	4614      	mov	r4, r2
   4464a:	42b4      	cmp	r4, r6
   4464c:	eba4 0005 	sub.w	r0, r4, r5
   44650:	d302      	bcc.n	44658 <outs+0x1c>
   44652:	b93e      	cbnz	r6, 44664 <outs+0x28>
   44654:	7823      	ldrb	r3, [r4, #0]
   44656:	b12b      	cbz	r3, 44664 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   44658:	4641      	mov	r1, r8
   4465a:	f814 0b01 	ldrb.w	r0, [r4], #1
   4465e:	47b8      	blx	r7
		if (rc < 0) {
   44660:	2800      	cmp	r0, #0
   44662:	daf2      	bge.n	4464a <outs+0xe>
}
   44664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00044668 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   44668:	4770      	bx	lr

0004466a <nordicsemi_nrf53_init>:
	__asm__ volatile(
   4466a:	f04f 0320 	mov.w	r3, #32
   4466e:	f3ef 8111 	mrs	r1, BASEPRI
   44672:	f383 8812 	msr	BASEPRI_MAX, r3
   44676:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   4467a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   4467e:	2202      	movs	r2, #2
   44680:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   44684:	2201      	movs	r2, #1
   44686:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   4468a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   4468e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   44692:	f381 8811 	msr	BASEPRI, r1
   44696:	f3bf 8f6f 	isb	sy
}
   4469a:	2000      	movs	r0, #0
   4469c:	4770      	bx	lr

0004469e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   4469e:	2806      	cmp	r0, #6
   446a0:	d108      	bne.n	446b4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   446a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   446a6:	2201      	movs	r2, #1
   446a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   446ac:	f3bf 8f4f 	dsb	sy
        __WFE();
   446b0:	bf20      	wfe
    while (true)
   446b2:	e7fd      	b.n	446b0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   446b4:	4770      	bx	lr

000446b6 <pm_state_exit_post_ops>:
   446b6:	2300      	movs	r3, #0
   446b8:	f383 8811 	msr	BASEPRI, r3
   446bc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   446c0:	4770      	bx	lr

000446c2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   446c2:	f000 bae3 	b.w	44c8c <z_fatal_error>

000446c6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   446c6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   446c8:	6800      	ldr	r0, [r0, #0]
   446ca:	f000 badf 	b.w	44c8c <z_fatal_error>

000446ce <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   446ce:	2100      	movs	r1, #0
   446d0:	2001      	movs	r0, #1
   446d2:	f7ff bff6 	b.w	446c2 <z_arm_fatal_error>

000446d6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   446d6:	b508      	push	{r3, lr}
	handler();
   446d8:	f7fc fd60 	bl	4119c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   446dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   446e0:	f7fc be28 	b.w	41334 <z_arm_exc_exit>

000446e4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   446e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   446e6:	f383 880b 	msr	PSPLIM, r3
}
   446ea:	4770      	bx	lr

000446ec <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   446ec:	4770      	bx	lr

000446ee <z_arm_restore_fp_context>:
   446ee:	4770      	bx	lr

000446f0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   446f0:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   446f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   446f8:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   446fa:	bf08      	it	eq
   446fc:	f06f 0015 	mvneq.w	r0, #21
   44700:	4770      	bx	lr

00044702 <mpu_configure_region>:
{
   44702:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   44704:	890a      	ldrh	r2, [r1, #8]
   44706:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   44708:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   4470a:	684d      	ldr	r5, [r1, #4]
   4470c:	f002 021f 	and.w	r2, r2, #31
   44710:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   44714:	9300      	str	r3, [sp, #0]
   44716:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   4471a:	f023 031f 	bic.w	r3, r3, #31
   4471e:	1e6a      	subs	r2, r5, #1
   44720:	4413      	add	r3, r2
   44722:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   44726:	2807      	cmp	r0, #7
   44728:	9303      	str	r3, [sp, #12]
   4472a:	d804      	bhi.n	44736 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   4472c:	4669      	mov	r1, sp
   4472e:	f7fc ffb7 	bl	416a0 <region_init>
}
   44732:	b004      	add	sp, #16
   44734:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   44736:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   4473a:	e7fa      	b.n	44732 <mpu_configure_region+0x30>

0004473c <free>:
}

void free(void *ptr)
{
	ARG_UNUSED(ptr);
}
   4473c:	4770      	bx	lr

0004473e <calloc>:

#endif /* CONFIG_MINIMAL_LIBC_MALLOC */

#ifdef CONFIG_MINIMAL_LIBC_CALLOC
void *calloc(size_t nmemb, size_t size)
{
   4473e:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   44740:	f7fe ff18 	bl	43574 <z_impl_z_errno>
	void *ret;

	if (size_mul_overflow(nmemb, size, &size)) {
		errno = ENOMEM;
   44744:	230c      	movs	r3, #12
   44746:	6003      	str	r3, [r0, #0]
	if (ret != NULL) {
		(void)memset(ret, 0, size);
	}

	return ret;
}
   44748:	2000      	movs	r0, #0
   4474a:	bd08      	pop	{r3, pc}

0004474c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   4474c:	4603      	mov	r3, r0
	size_t n = 0;
   4474e:	2000      	movs	r0, #0

	while (*s != '\0') {
   44750:	5c1a      	ldrb	r2, [r3, r0]
   44752:	b902      	cbnz	r2, 44756 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   44754:	4770      	bx	lr
		n++;
   44756:	3001      	adds	r0, #1
   44758:	e7fa      	b.n	44750 <strlen+0x4>

0004475a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   4475a:	4603      	mov	r3, r0
	size_t n = 0;
   4475c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   4475e:	5c1a      	ldrb	r2, [r3, r0]
   44760:	b10a      	cbz	r2, 44766 <strnlen+0xc>
   44762:	4288      	cmp	r0, r1
   44764:	d100      	bne.n	44768 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   44766:	4770      	bx	lr
		n++;
   44768:	3001      	adds	r0, #1
   4476a:	e7f8      	b.n	4475e <strnlen+0x4>

0004476c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4476c:	b510      	push	{r4, lr}
   4476e:	1e43      	subs	r3, r0, #1
   44770:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   44772:	4291      	cmp	r1, r2
   44774:	d100      	bne.n	44778 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   44776:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   44778:	f811 4b01 	ldrb.w	r4, [r1], #1
   4477c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   44780:	e7f7      	b.n	44772 <memcpy+0x6>

00044782 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   44782:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   44784:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   44786:	4402      	add	r2, r0
   44788:	4293      	cmp	r3, r2
   4478a:	d100      	bne.n	4478e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4478c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4478e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   44792:	e7f9      	b.n	44788 <memset+0x6>

00044794 <_stdout_hook_default>:
}
   44794:	f04f 30ff 	mov.w	r0, #4294967295
   44798:	4770      	bx	lr

0004479a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   4479a:	220c      	movs	r2, #12
   4479c:	6903      	ldr	r3, [r0, #16]
   4479e:	b2c9      	uxtb	r1, r1
   447a0:	fb01 3302 	mla	r3, r1, r2, r3
   447a4:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   447a6:	f000 0007 	and.w	r0, r0, #7
   447aa:	4770      	bx	lr

000447ac <set_on_state>:
	__asm__ volatile(
   447ac:	f04f 0320 	mov.w	r3, #32
   447b0:	f3ef 8211 	mrs	r2, BASEPRI
   447b4:	f383 8812 	msr	BASEPRI_MAX, r3
   447b8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   447bc:	6803      	ldr	r3, [r0, #0]
   447be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   447c2:	f043 0302 	orr.w	r3, r3, #2
   447c6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   447c8:	f382 8811 	msr	BASEPRI, r2
   447cc:	f3bf 8f6f 	isb	sy
}
   447d0:	4770      	bx	lr

000447d2 <stop>:
{
   447d2:	4603      	mov	r3, r0
   447d4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   447d6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   447d8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   447da:	f04f 0420 	mov.w	r4, #32
   447de:	f3ef 8611 	mrs	r6, BASEPRI
   447e2:	f384 8812 	msr	BASEPRI_MAX, r4
   447e6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   447ea:	250c      	movs	r5, #12
   447ec:	fb05 0401 	mla	r4, r5, r1, r0
   447f0:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   447f2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   447f6:	d001      	beq.n	447fc <stop+0x2a>
   447f8:	42a2      	cmp	r2, r4
   447fa:	d110      	bne.n	4481e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   447fc:	2201      	movs	r2, #1
   447fe:	fb05 0001 	mla	r0, r5, r1, r0
   44802:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
   44804:	2000      	movs	r0, #0
	__asm__ volatile(
   44806:	f386 8811 	msr	BASEPRI, r6
   4480a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   4480e:	b928      	cbnz	r0, 4481c <stop+0x4a>
	get_sub_config(dev, type)->stop();
   44810:	685b      	ldr	r3, [r3, #4]
   44812:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   44816:	684b      	ldr	r3, [r1, #4]
   44818:	4798      	blx	r3
	return 0;
   4481a:	2000      	movs	r0, #0
}
   4481c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   4481e:	f04f 30ff 	mov.w	r0, #4294967295
   44822:	e7f0      	b.n	44806 <stop+0x34>

00044824 <api_stop>:
	return stop(dev, subsys, CTX_API);
   44824:	2280      	movs	r2, #128	; 0x80
   44826:	f7ff bfd4 	b.w	447d2 <stop>

0004482a <async_start>:
{
   4482a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4482c:	9f06      	ldr	r7, [sp, #24]
   4482e:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   44830:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   44832:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   44834:	f04f 0020 	mov.w	r0, #32
   44838:	f3ef 8c11 	mrs	ip, BASEPRI
   4483c:	f380 8812 	msr	BASEPRI_MAX, r0
   44840:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   44844:	260c      	movs	r6, #12
   44846:	fb06 4601 	mla	r6, r6, r1, r4
   4484a:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   4484c:	f000 0e07 	and.w	lr, r0, #7
   44850:	f1be 0f01 	cmp.w	lr, #1
   44854:	d111      	bne.n	4487a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   44856:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
   44858:	2600      	movs	r6, #0
	__asm__ volatile(
   4485a:	f38c 8811 	msr	BASEPRI, ip
   4485e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   44862:	b946      	cbnz	r6, 44876 <async_start+0x4c>
	subdata->cb = cb;
   44864:	200c      	movs	r0, #12
   44866:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   4486a:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   4486e:	686b      	ldr	r3, [r5, #4]
   44870:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   44874:	4798      	blx	r3
}
   44876:	4630      	mov	r0, r6
   44878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   4487a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   4487e:	4287      	cmp	r7, r0
   44880:	bf14      	ite	ne
   44882:	f04f 36ff 	movne.w	r6, #4294967295
   44886:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   4488a:	e7e6      	b.n	4485a <async_start+0x30>

0004488c <api_start>:
{
   4488c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   4488e:	2480      	movs	r4, #128	; 0x80
   44890:	9400      	str	r4, [sp, #0]
   44892:	f7ff ffca 	bl	4482a <async_start>
}
   44896:	b002      	add	sp, #8
   44898:	bd10      	pop	{r4, pc}

0004489a <onoff_started_callback>:
{
   4489a:	b410      	push	{r4}
	notify(mgr, 0);
   4489c:	241c      	movs	r4, #28
	return &data->mgr[type];
   4489e:	6900      	ldr	r0, [r0, #16]
   448a0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   448a2:	fb03 0004 	mla	r0, r3, r4, r0
   448a6:	2100      	movs	r1, #0
}
   448a8:	bc10      	pop	{r4}
	notify(mgr, 0);
   448aa:	4710      	bx	r2

000448ac <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   448ac:	2003      	movs	r0, #3
   448ae:	f7fe b89d 	b.w	429ec <nrfx_clock_start>

000448b2 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   448b2:	2002      	movs	r0, #2
   448b4:	f7fe b89a 	b.w	429ec <nrfx_clock_start>

000448b8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   448b8:	2000      	movs	r0, #0
   448ba:	f7fe b897 	b.w	429ec <nrfx_clock_start>

000448be <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   448be:	2003      	movs	r0, #3
   448c0:	f000 b97c 	b.w	44bbc <nrfx_clock_stop>

000448c4 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   448c4:	2002      	movs	r0, #2
   448c6:	f000 b979 	b.w	44bbc <nrfx_clock_stop>

000448ca <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   448ca:	2000      	movs	r0, #0
   448cc:	f000 b976 	b.w	44bbc <nrfx_clock_stop>

000448d0 <blocking_start_callback>:
{
   448d0:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   448d2:	f7ff b87b 	b.w	439cc <z_impl_k_sem_give>

000448d6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448d6:	6843      	ldr	r3, [r0, #4]
}
   448d8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448da:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   448dc:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   448de:	600b      	str	r3, [r1, #0]
}
   448e0:	4770      	bx	lr

000448e2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448e2:	6843      	ldr	r3, [r0, #4]
   448e4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   448e6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   448e8:	4042      	eors	r2, r0
   448ea:	400a      	ands	r2, r1
   448ec:	4042      	eors	r2, r0
    p_reg->OUT = value;
   448ee:	605a      	str	r2, [r3, #4]
}
   448f0:	2000      	movs	r0, #0
   448f2:	4770      	bx	lr

000448f4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448f4:	6843      	ldr	r3, [r0, #4]
}
   448f6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   448fa:	6099      	str	r1, [r3, #8]
}
   448fc:	4770      	bx	lr

000448fe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   448fe:	6843      	ldr	r3, [r0, #4]
}
   44900:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   44902:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   44904:	60d9      	str	r1, [r3, #12]
}
   44906:	4770      	bx	lr

00044908 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   44908:	6843      	ldr	r3, [r0, #4]
}
   4490a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4490c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   4490e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   44910:	404b      	eors	r3, r1
    p_reg->OUT = value;
   44912:	6053      	str	r3, [r2, #4]
}
   44914:	4770      	bx	lr

00044916 <gpio_nrfx_manage_callback>:
	return port->data;
   44916:	6903      	ldr	r3, [r0, #16]
{
   44918:	b530      	push	{r4, r5, lr}
	return list->head;
   4491a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   4491c:	b158      	cbz	r0, 44936 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4491e:	2400      	movs	r4, #0
   44920:	4281      	cmp	r1, r0
   44922:	d112      	bne.n	4494a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   44924:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   44926:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   44928:	b954      	cbnz	r4, 44940 <gpio_nrfx_manage_callback+0x2a>
   4492a:	428d      	cmp	r5, r1
	list->head = node;
   4492c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   4492e:	d100      	bne.n	44932 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   44930:	6098      	str	r0, [r3, #8]
	parent->next = child;
   44932:	2000      	movs	r0, #0
   44934:	6008      	str	r0, [r1, #0]
	if (set) {
   44936:	b96a      	cbnz	r2, 44954 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   44938:	2000      	movs	r0, #0
}
   4493a:	bd30      	pop	{r4, r5, pc}
   4493c:	4628      	mov	r0, r5
   4493e:	e7ef      	b.n	44920 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   44940:	428d      	cmp	r5, r1
	parent->next = child;
   44942:	6020      	str	r0, [r4, #0]
	list->tail = node;
   44944:	bf08      	it	eq
   44946:	609c      	streq	r4, [r3, #8]
}
   44948:	e7f3      	b.n	44932 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   4494a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4494c:	4604      	mov	r4, r0
   4494e:	2d00      	cmp	r5, #0
   44950:	d1f4      	bne.n	4493c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   44952:	b13a      	cbz	r2, 44964 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   44954:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   44956:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   44958:	600a      	str	r2, [r1, #0]
	list->head = node;
   4495a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4495c:	2800      	cmp	r0, #0
   4495e:	d1eb      	bne.n	44938 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   44960:	6099      	str	r1, [r3, #8]
}
   44962:	e7ea      	b.n	4493a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   44964:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   44968:	e7e7      	b.n	4493a <gpio_nrfx_manage_callback+0x24>

0004496a <uarte_nrfx_config_get>:
{
   4496a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   4496c:	6902      	ldr	r2, [r0, #16]
   4496e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   44972:	e883 0003 	stmia.w	r3, {r0, r1}
}
   44976:	2000      	movs	r0, #0
   44978:	4770      	bx	lr

0004497a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   4497a:	6843      	ldr	r3, [r0, #4]
   4497c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   4497e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   44982:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   44986:	4770      	bx	lr

00044988 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   44988:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   4498a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   4498c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4498e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   44992:	b148      	cbz	r0, 449a8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44994:	2000      	movs	r0, #0
	*c = data->rx_data;
   44996:	7c52      	ldrb	r2, [r2, #17]
   44998:	700a      	strb	r2, [r1, #0]
   4499a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   4499e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   449a2:	2201      	movs	r2, #1
   449a4:	601a      	str	r2, [r3, #0]
	return 0;
   449a6:	4770      	bx	lr
		return -1;
   449a8:	f04f 30ff 	mov.w	r0, #4294967295
}
   449ac:	4770      	bx	lr

000449ae <is_tx_ready.isra.0>:
	return config->uarte_regs;
   449ae:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   449b0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   449b2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   449b6:	b940      	cbnz	r0, 449ca <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   449b8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   449ba:	079b      	lsls	r3, r3, #30
   449bc:	d406      	bmi.n	449cc <is_tx_ready.isra.0+0x1e>
   449be:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   449c2:	3800      	subs	r0, #0
   449c4:	bf18      	it	ne
   449c6:	2001      	movne	r0, #1
   449c8:	4770      	bx	lr
   449ca:	2001      	movs	r0, #1
}
   449cc:	4770      	bx	lr

000449ce <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   449ce:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   449d0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   449d2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   449d6:	05c9      	lsls	r1, r1, #23
   449d8:	d518      	bpl.n	44a0c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   449da:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   449de:	b1a9      	cbz	r1, 44a0c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   449e0:	f04f 0020 	mov.w	r0, #32
   449e4:	f3ef 8111 	mrs	r1, BASEPRI
   449e8:	f380 8812 	msr	BASEPRI_MAX, r0
   449ec:	f3bf 8f6f 	isb	sy
   449f0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   449f4:	b130      	cbz	r0, 44a04 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   449f6:	2000      	movs	r0, #0
   449f8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   449fc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44a00:	2001      	movs	r0, #1
   44a02:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   44a04:	f381 8811 	msr	BASEPRI, r1
   44a08:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   44a0c:	6852      	ldr	r2, [r2, #4]
   44a0e:	06d2      	lsls	r2, r2, #27
   44a10:	d515      	bpl.n	44a3e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   44a12:	f04f 0120 	mov.w	r1, #32
   44a16:	f3ef 8211 	mrs	r2, BASEPRI
   44a1a:	f381 8812 	msr	BASEPRI_MAX, r1
   44a1e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44a22:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   44a26:	b111      	cbz	r1, 44a2e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   44a28:	2100      	movs	r1, #0
   44a2a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   44a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   44a32:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   44a36:	f382 8811 	msr	BASEPRI, r2
   44a3a:	f3bf 8f6f 	isb	sy
}
   44a3e:	4770      	bx	lr

00044a40 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   44a40:	4608      	mov	r0, r1
   44a42:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   44a44:	4611      	mov	r1, r2
   44a46:	f7ff fcb1 	bl	443ac <psa_generate_random>
	int err = EINVAL;
   44a4a:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   44a4c:	bf18      	it	ne
   44a4e:	2016      	movne	r0, #22
   44a50:	bd08      	pop	{r3, pc}

00044a52 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   44a52:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   44a54:	f000 fa39 	bl	44eca <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   44a58:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   44a5a:	bf18      	it	ne
   44a5c:	f06f 0015 	mvnne.w	r0, #21
   44a60:	bd08      	pop	{r3, pc}

00044a62 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   44a62:	4770      	bx	lr

00044a64 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   44a64:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   44a66:	6843      	ldr	r3, [r0, #4]
   44a68:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   44a6a:	7a03      	ldrb	r3, [r0, #8]
   44a6c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   44a70:	3b01      	subs	r3, #1
   44a72:	00db      	lsls	r3, r3, #3
   44a74:	6845      	ldr	r5, [r0, #4]
   44a76:	6814      	ldr	r4, [r2, #0]
   44a78:	441d      	add	r5, r3
   44a7a:	42ac      	cmp	r4, r5
   44a7c:	d902      	bls.n	44a84 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   44a7e:	f06f 0001 	mvn.w	r0, #1
}
   44a82:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   44a84:	7965      	ldrb	r5, [r4, #5]
   44a86:	428d      	cmp	r5, r1
   44a88:	d002      	beq.n	44a90 <pinctrl_lookup_state+0x2c>
		(*state)++;
   44a8a:	3408      	adds	r4, #8
   44a8c:	6014      	str	r4, [r2, #0]
   44a8e:	e7f1      	b.n	44a74 <pinctrl_lookup_state+0x10>
			return 0;
   44a90:	2000      	movs	r0, #0
   44a92:	e7f6      	b.n	44a82 <pinctrl_lookup_state+0x1e>

00044a94 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   44a94:	b570      	push	{r4, r5, r6, lr}
   44a96:	4615      	mov	r5, r2
   44a98:	4604      	mov	r4, r0
   44a9a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   44a9e:	42a6      	cmp	r6, r4
   44aa0:	d101      	bne.n	44aa6 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   44aa2:	2000      	movs	r0, #0
}
   44aa4:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   44aa6:	6823      	ldr	r3, [r4, #0]
   44aa8:	0c1a      	lsrs	r2, r3, #16
   44aaa:	2a22      	cmp	r2, #34	; 0x22
   44aac:	d878      	bhi.n	44ba0 <pinctrl_configure_pins+0x10c>
   44aae:	e8df f002 	tbb	[pc, r2]
   44ab2:	2212      	.short	0x2212
   44ab4:	77772e29 	.word	0x77772e29
   44ab8:	77777777 	.word	0x77777777
   44abc:	77383377 	.word	0x77383377
   44ac0:	77777777 	.word	0x77777777
   44ac4:	77777777 	.word	0x77777777
   44ac8:	534e493d 	.word	0x534e493d
   44acc:	58777777 	.word	0x58777777
   44ad0:	6d68635e 	.word	0x6d68635e
   44ad4:	72          	.byte	0x72
   44ad5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   44ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44ada:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   44ade:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   44ae0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   44ae4:	f7fd fe40 	bl	42768 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   44ae8:	2201      	movs	r2, #1
   44aea:	4611      	mov	r1, r2
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44aec:	6820      	ldr	r0, [r4, #0]
   44aee:	f7fd fe13 	bl	42718 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   44af2:	3404      	adds	r4, #4
   44af4:	e7d3      	b.n	44a9e <pinctrl_configure_pins+0xa>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   44af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44afa:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44afe:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b00:	2100      	movs	r1, #0
   44b02:	e7f3      	b.n	44aec <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   44b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b08:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   44b0c:	e7e7      	b.n	44ade <pinctrl_configure_pins+0x4a>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   44b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b12:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b16:	e7f2      	b.n	44afe <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   44b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b1c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b20:	e7ed      	b.n	44afe <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   44b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b26:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   44b2a:	e7e8      	b.n	44afe <pinctrl_configure_pins+0x6a>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   44b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b30:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   44b34:	6820      	ldr	r0, [r4, #0]
   44b36:	f3c0 3140 	ubfx	r1, r0, #13, #1
   44b3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   44b3e:	f7fd fe23 	bl	42788 <nrf_gpio_pin_write>
   44b42:	e7d1      	b.n	44ae8 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   44b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b48:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   44b4c:	e7f2      	b.n	44b34 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   44b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b52:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   44b56:	e7ed      	b.n	44b34 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   44b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b5c:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   44b60:	e7e8      	b.n	44b34 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   44b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b66:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b6a:	2201      	movs	r2, #1
   44b6c:	e7c8      	b.n	44b00 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   44b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b72:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b76:	e7f8      	b.n	44b6a <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   44b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b7c:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b80:	e7f3      	b.n	44b6a <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   44b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b86:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b8a:	e7ee      	b.n	44b6a <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   44b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b90:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   44b94:	e7e9      	b.n	44b6a <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   44b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b9a:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   44b9e:	e7e4      	b.n	44b6a <pinctrl_configure_pins+0xd6>
		switch (NRF_GET_FUN(pins[i])) {
   44ba0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   44ba4:	e77e      	b.n	44aa4 <pinctrl_configure_pins+0x10>

00044ba6 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   44ba6:	2000      	movs	r0, #0
{
   44ba8:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
   44baa:	f7fc fcff 	bl	415ac <sys_arch_reboot>

00044bae <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   44bae:	2000      	movs	r0, #0
   44bb0:	4770      	bx	lr

00044bb2 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   44bb2:	f7fd be2f 	b.w	42814 <SystemCoreClockUpdate>

00044bb6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   44bb6:	4700      	bx	r0

00044bb8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   44bb8:	f000 b982 	b.w	44ec0 <z_impl_k_busy_wait>

00044bbc <nrfx_clock_stop>:
    clock_stop(domain);
   44bbc:	f7fd be7a 	b.w	428b4 <clock_stop>

00044bc0 <nrf_gpio_reconfigure>:
{
   44bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   44bc2:	4617      	mov	r7, r2
   44bc4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   44bc8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   44bca:	a801      	add	r0, sp, #4
{
   44bcc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   44bce:	f7fd ffc7 	bl	42b60 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   44bd2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   44bd4:	2f00      	cmp	r7, #0
   44bd6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   44bda:	bf14      	ite	ne
   44bdc:	2302      	movne	r3, #2
   44bde:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   44be0:	2900      	cmp	r1, #0
   44be2:	bf18      	it	ne
   44be4:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   44be8:	2d00      	cmp	r5, #0
   44bea:	bf14      	ite	ne
   44bec:	f04f 0c0c 	movne.w	ip, #12
   44bf0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   44bf4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   44bf6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   44bfa:	bf14      	ite	ne
   44bfc:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   44c00:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   44c04:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   44c06:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   44c0a:	bf14      	ite	ne
   44c0c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   44c10:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   44c14:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   44c18:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   44c1c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   44c20:	b101      	cbz	r1, 44c24 <nrf_gpio_reconfigure+0x64>
   44c22:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   44c24:	b10f      	cbz	r7, 44c2a <nrf_gpio_reconfigure+0x6a>
   44c26:	783f      	ldrb	r7, [r7, #0]
   44c28:	007f      	lsls	r7, r7, #1
   44c2a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   44c2c:	b10d      	cbz	r5, 44c32 <nrf_gpio_reconfigure+0x72>
   44c2e:	782d      	ldrb	r5, [r5, #0]
   44c30:	00ad      	lsls	r5, r5, #2
   44c32:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   44c34:	b10c      	cbz	r4, 44c3a <nrf_gpio_reconfigure+0x7a>
   44c36:	7822      	ldrb	r2, [r4, #0]
   44c38:	0214      	lsls	r4, r2, #8
   44c3a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   44c3c:	b10e      	cbz	r6, 44c42 <nrf_gpio_reconfigure+0x82>
   44c3e:	7836      	ldrb	r6, [r6, #0]
   44c40:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   44c42:	432c      	orrs	r4, r5
   44c44:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   44c46:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   44c4a:	b003      	add	sp, #12
   44c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00044c4e <nrf_gpio_cfg_sense_set>:
{
   44c4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   44c50:	f10d 030f 	add.w	r3, sp, #15
   44c54:	9301      	str	r3, [sp, #4]
   44c56:	2300      	movs	r3, #0
{
   44c58:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   44c5c:	461a      	mov	r2, r3
   44c5e:	4619      	mov	r1, r3
   44c60:	9300      	str	r3, [sp, #0]
   44c62:	f7ff ffad 	bl	44bc0 <nrf_gpio_reconfigure>
}
   44c66:	b005      	add	sp, #20
   44c68:	f85d fb04 	ldr.w	pc, [sp], #4

00044c6c <mbedtls_heap_init>:
{
	mbedtls_memory_buffer_alloc_free();
}

static int mbedtls_heap_init(const struct device *dev)
{
   44c6c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	_heap_init();
   44c6e:	f7fe fae3 	bl	43238 <_heap_init>

	return 0;
}
   44c72:	2000      	movs	r0, #0
   44c74:	bd08      	pop	{r3, pc}

00044c76 <z_device_state_init>:
}
   44c76:	4770      	bx	lr

00044c78 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   44c78:	b138      	cbz	r0, 44c8a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   44c7a:	68c3      	ldr	r3, [r0, #12]
   44c7c:	8818      	ldrh	r0, [r3, #0]
   44c7e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   44c82:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   44c86:	4258      	negs	r0, r3
   44c88:	4158      	adcs	r0, r3
}
   44c8a:	4770      	bx	lr

00044c8c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   44c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44c8e:	4605      	mov	r5, r0
   44c90:	460e      	mov	r6, r1
	__asm__ volatile(
   44c92:	f04f 0320 	mov.w	r3, #32
   44c96:	f3ef 8711 	mrs	r7, BASEPRI
   44c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   44c9e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   44ca2:	f7ff f9cd 	bl	44040 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   44ca6:	4631      	mov	r1, r6
   44ca8:	4604      	mov	r4, r0
   44caa:	4628      	mov	r0, r5
   44cac:	f7ff ff7b 	bl	44ba6 <k_sys_fatal_error_handler>
	__asm__ volatile(
   44cb0:	f387 8811 	msr	BASEPRI, r7
   44cb4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   44cb8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   44cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   44cbe:	f7fc bcbd 	b.w	4163c <z_impl_k_thread_abort>

00044cc2 <z_early_memset>:
	(void) memset(dst, c, n);
   44cc2:	f7ff bd5e 	b.w	44782 <memset>

00044cc6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   44cc6:	f7ff bd51 	b.w	4476c <memcpy>

00044cca <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   44cca:	f3ef 8005 	mrs	r0, IPSR
}
   44cce:	3800      	subs	r0, #0
   44cd0:	bf18      	it	ne
   44cd2:	2001      	movne	r0, #1
   44cd4:	4770      	bx	lr

00044cd6 <z_pm_save_idle_exit>:
{
   44cd6:	b508      	push	{r3, lr}
	pm_system_resume();
   44cd8:	f7fc f902 	bl	40ee0 <pm_system_resume>
}
   44cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   44ce0:	f7ff bebf 	b.w	44a62 <sys_clock_idle_exit>

00044ce4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   44ce4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   44ce8:	428b      	cmp	r3, r1
   44cea:	d001      	beq.n	44cf0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   44cec:	f7ff b864 	b.w	43db8 <z_set_prio>
}
   44cf0:	2000      	movs	r0, #0
   44cf2:	4770      	bx	lr

00044cf4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   44cf4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   44cf8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   44cfa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   44cfc:	2300      	movs	r3, #0
	node->prev = NULL;
   44cfe:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   44d02:	4770      	bx	lr

00044d04 <unpend_thread_no_timeout>:
{
   44d04:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   44d06:	f7ff fff5 	bl	44cf4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   44d0a:	7b43      	ldrb	r3, [r0, #13]
   44d0c:	f023 0302 	bic.w	r3, r3, #2
   44d10:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   44d12:	2300      	movs	r3, #0
   44d14:	6083      	str	r3, [r0, #8]
}
   44d16:	bd08      	pop	{r3, pc}

00044d18 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   44d18:	4603      	mov	r3, r0
   44d1a:	b920      	cbnz	r0, 44d26 <z_reschedule_irqlock+0xe>
   44d1c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   44d20:	b90a      	cbnz	r2, 44d26 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   44d22:	f7fc ba5b 	b.w	411dc <arch_swap>
   44d26:	f383 8811 	msr	BASEPRI, r3
   44d2a:	f3bf 8f6f 	isb	sy
}
   44d2e:	4770      	bx	lr

00044d30 <z_reschedule_unlocked>:
	__asm__ volatile(
   44d30:	f04f 0320 	mov.w	r3, #32
   44d34:	f3ef 8011 	mrs	r0, BASEPRI
   44d38:	f383 8812 	msr	BASEPRI_MAX, r3
   44d3c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   44d40:	f7ff bfea 	b.w	44d18 <z_reschedule_irqlock>

00044d44 <z_priq_dumb_best>:
{
   44d44:	4603      	mov	r3, r0
	return list->head == list;
   44d46:	6800      	ldr	r0, [r0, #0]
}
   44d48:	4283      	cmp	r3, r0
   44d4a:	bf08      	it	eq
   44d4c:	2000      	moveq	r0, #0
   44d4e:	4770      	bx	lr

00044d50 <z_ready_thread>:
{
   44d50:	b510      	push	{r4, lr}
   44d52:	f04f 0320 	mov.w	r3, #32
   44d56:	f3ef 8411 	mrs	r4, BASEPRI
   44d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   44d5e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   44d62:	f7fe ff83 	bl	43c6c <ready_thread>
	__asm__ volatile(
   44d66:	f384 8811 	msr	BASEPRI, r4
   44d6a:	f3bf 8f6f 	isb	sy
}
   44d6e:	bd10      	pop	{r4, pc}

00044d70 <z_thread_timeout>:
{
   44d70:	4601      	mov	r1, r0
   44d72:	b510      	push	{r4, lr}
	__asm__ volatile(
   44d74:	f04f 0320 	mov.w	r3, #32
   44d78:	f3ef 8411 	mrs	r4, BASEPRI
   44d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   44d80:	f3bf 8f6f 	isb	sy
		if (!killed) {
   44d84:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   44d88:	f013 0f28 	tst.w	r3, #40	; 0x28
   44d8c:	d10d      	bne.n	44daa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   44d8e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   44d92:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   44d94:	b10b      	cbz	r3, 44d9a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   44d96:	f7ff ffb5 	bl	44d04 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   44d9a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   44d9e:	f023 0314 	bic.w	r3, r3, #20
   44da2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   44da6:	f7fe ff61 	bl	43c6c <ready_thread>
	__asm__ volatile(
   44daa:	f384 8811 	msr	BASEPRI, r4
   44dae:	f3bf 8f6f 	isb	sy
}
   44db2:	bd10      	pop	{r4, pc}

00044db4 <add_to_waitq_locked>:
{
   44db4:	b538      	push	{r3, r4, r5, lr}
   44db6:	4604      	mov	r4, r0
   44db8:	460d      	mov	r5, r1
	unready_thread(thread);
   44dba:	f7fe ffab 	bl	43d14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   44dbe:	7b63      	ldrb	r3, [r4, #13]
   44dc0:	f043 0302 	orr.w	r3, r3, #2
   44dc4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   44dc6:	b195      	cbz	r5, 44dee <add_to_waitq_locked+0x3a>
   44dc8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   44dca:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44dcc:	429d      	cmp	r5, r3
   44dce:	d015      	beq.n	44dfc <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   44dd0:	b1a3      	cbz	r3, 44dfc <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   44dd2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   44dd6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   44dda:	4291      	cmp	r1, r2
   44ddc:	d008      	beq.n	44df0 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   44dde:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   44de0:	2a00      	cmp	r2, #0
   44de2:	dd05      	ble.n	44df0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   44de4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   44de6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   44dea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   44dec:	605c      	str	r4, [r3, #4]
}
   44dee:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   44df0:	686a      	ldr	r2, [r5, #4]
   44df2:	4293      	cmp	r3, r2
   44df4:	d002      	beq.n	44dfc <add_to_waitq_locked+0x48>
   44df6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   44df8:	2b00      	cmp	r3, #0
   44dfa:	d1ec      	bne.n	44dd6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   44dfc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   44dfe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   44e02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   44e04:	606c      	str	r4, [r5, #4]
}
   44e06:	e7f2      	b.n	44dee <add_to_waitq_locked+0x3a>

00044e08 <z_unpend_first_thread>:
{
   44e08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   44e0a:	f04f 0320 	mov.w	r3, #32
   44e0e:	f3ef 8511 	mrs	r5, BASEPRI
   44e12:	f383 8812 	msr	BASEPRI_MAX, r3
   44e16:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   44e1a:	f7ff ff93 	bl	44d44 <z_priq_dumb_best>
		if (thread != NULL) {
   44e1e:	4604      	mov	r4, r0
   44e20:	b120      	cbz	r0, 44e2c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   44e22:	f7ff ff6f 	bl	44d04 <unpend_thread_no_timeout>
   44e26:	3018      	adds	r0, #24
   44e28:	f000 f806 	bl	44e38 <z_abort_timeout>
	__asm__ volatile(
   44e2c:	f385 8811 	msr	BASEPRI, r5
   44e30:	f3bf 8f6f 	isb	sy
}
   44e34:	4620      	mov	r0, r4
   44e36:	bd38      	pop	{r3, r4, r5, pc}

00044e38 <z_abort_timeout>:
{
   44e38:	b510      	push	{r4, lr}
	__asm__ volatile(
   44e3a:	f04f 0220 	mov.w	r2, #32
   44e3e:	f3ef 8411 	mrs	r4, BASEPRI
   44e42:	f382 8812 	msr	BASEPRI_MAX, r2
   44e46:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   44e4a:	6803      	ldr	r3, [r0, #0]
   44e4c:	b13b      	cbz	r3, 44e5e <z_abort_timeout+0x26>
			remove_timeout(to);
   44e4e:	f7ff f999 	bl	44184 <remove_timeout>
			ret = 0;
   44e52:	2000      	movs	r0, #0
	__asm__ volatile(
   44e54:	f384 8811 	msr	BASEPRI, r4
   44e58:	f3bf 8f6f 	isb	sy
}
   44e5c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   44e5e:	f06f 0015 	mvn.w	r0, #21
   44e62:	e7f7      	b.n	44e54 <z_abort_timeout+0x1c>

00044e64 <z_get_next_timeout_expiry>:
{
   44e64:	b510      	push	{r4, lr}
	__asm__ volatile(
   44e66:	f04f 0320 	mov.w	r3, #32
   44e6a:	f3ef 8411 	mrs	r4, BASEPRI
   44e6e:	f383 8812 	msr	BASEPRI_MAX, r3
   44e72:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   44e76:	f7ff f95f 	bl	44138 <next_timeout>
	__asm__ volatile(
   44e7a:	f384 8811 	msr	BASEPRI, r4
   44e7e:	f3bf 8f6f 	isb	sy
}
   44e82:	bd10      	pop	{r4, pc}

00044e84 <z_set_timeout_expiry>:
{
   44e84:	b570      	push	{r4, r5, r6, lr}
   44e86:	4604      	mov	r4, r0
   44e88:	460d      	mov	r5, r1
	__asm__ volatile(
   44e8a:	f04f 0320 	mov.w	r3, #32
   44e8e:	f3ef 8611 	mrs	r6, BASEPRI
   44e92:	f383 8812 	msr	BASEPRI_MAX, r3
   44e96:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   44e9a:	f7ff f94d 	bl	44138 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   44e9e:	2801      	cmp	r0, #1
   44ea0:	dd05      	ble.n	44eae <z_set_timeout_expiry+0x2a>
   44ea2:	42a0      	cmp	r0, r4
   44ea4:	db03      	blt.n	44eae <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   44ea6:	4629      	mov	r1, r5
   44ea8:	4620      	mov	r0, r4
   44eaa:	f7fd fbfb 	bl	426a4 <sys_clock_set_timeout>
	__asm__ volatile(
   44eae:	f386 8811 	msr	BASEPRI, r6
   44eb2:	f3bf 8f6f 	isb	sy
}
   44eb6:	bd70      	pop	{r4, r5, r6, pc}

00044eb8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   44eb8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   44eba:	f7ff fa53 	bl	44364 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   44ebe:	bd08      	pop	{r3, pc}

00044ec0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   44ec0:	b108      	cbz	r0, 44ec6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   44ec2:	f7fb bfb9 	b.w	40e38 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   44ec6:	4770      	bx	lr

00044ec8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   44ec8:	4770      	bx	lr

00044eca <psa_crypto_init>:
}
   44eca:	2000      	movs	r0, #0
   44ecc:	4770      	bx	lr
	...

00044ed0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   44ed0:	f7ff be6f 	b.w	44bb2 <SystemInit>
